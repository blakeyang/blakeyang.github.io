{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/404.html","path":"404.html","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/baidu_verify_UbpiI2UtZR.html","path":"baidu_verify_UbpiI2UtZR.html","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/googleaac6ec34022a82d2.html","path":"googleaac6ec34022a82d2.html","modified":0,"renderable":0},{"_id":"source/rose.html","path":"rose.html","modified":0,"renderable":0},{"_id":"source/images/努力和天赋.JPG","path":"images/努力和天赋.JPG","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"00f12876cd7f8fbedb796063d0727fd01a6531ba","modified":1558427178921},{"_id":"source/404.html","hash":"6bd2fa293ef3dde478fbd582b372fe957f31ecd0","modified":1551168344595},{"_id":"source/CNAME","hash":"b3d2bd99ffd7e2911454e8dfda42399ee0755d1b","modified":1551059829543},{"_id":"source/baidu_verify_UbpiI2UtZR.html","hash":"44ad571bd34404112bfecb450bd04f5113108c92","modified":1551236119589},{"_id":"source/favicon.ico","hash":"4ef6c17d21de64f3757da66a0a97e896401a3a05","modified":1545058177848},{"_id":"source/googleaac6ec34022a82d2.html","hash":"79804248297903f52f14b9dbb7950cb291b69432","modified":1550218105633},{"_id":"source/rose.html","hash":"f5701b9608c7f1c113a0d2d7bad178cf0e0797dc","modified":1482469128000},{"_id":"themes/next/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1551000907807},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1545058878576},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1545058878576},{"_id":"themes/next/.git","hash":"042ff34da0707513a5681580b37513c890c671ef","modified":1545058878488},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1545058878576},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1545058878578},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1545058878578},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1545058878578},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1545058878579},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1545058878579},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1545058878579},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1545058878579},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1545058878580},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1545058878580},{"_id":"themes/next/_config.yml","hash":"685dbd2b60c7304474526374ea294318a6d5b525","modified":1564731738642},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1545058878581},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1545058878581},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1545058878601},{"_id":"source/about/index.md","hash":"ebfefd819fdb088575d4af3f7ed523aeb8b3d9fd","modified":1550916464511},{"_id":"source/_posts/Block闭包简查记录.md","hash":"bc905a502e3fbdb3941bacca3c3425ce93979cbd","modified":1551878940228},{"_id":"source/_posts/CPU的制作.md","hash":"c93df34b10637ac61c5c2d56d0cdab51effa2f02","modified":1558878578822},{"_id":"source/_posts/RAC-Api-Summer.md","hash":"fbc4ab663ec555e2e39b0224dae2c13305debd24","modified":1551187562175},{"_id":"source/_posts/iOS内存原理.md","hash":"5b2c69d6895fe7391322e8fb49d374a7d62172b8","modified":1551843760360},{"_id":"source/_posts/互联网网络传输协议理解坑点.md","hash":"70c440263dd4039e19c7bb51022237c7f7bd8ee4","modified":1558879520520},{"_id":"source/_posts/努力和天赋.md","hash":"3e6c6e3f0df94a65953a7ac3b03c17da723f7711","modified":1558415651711},{"_id":"source/_posts/我心里一直有一个念想.md","hash":"73387a1e104b86974b0779a11893913aa94adb25","modified":1558446026219},{"_id":"source/_posts/折腾.md","hash":"181b44c2bfefb95f090f94d7ada33a0eb320b5c8","modified":1551000623827},{"_id":"source/_posts/洗牙.md","hash":"6a6124abf3454fef571d0b28c7c0eb542b400fce","modified":1550998572908},{"_id":"source/_posts/内存分配详解-由底到高.md","hash":"c81be55d01c59b3a7ff863521203ef2ed31a0203","modified":1551923936711},{"_id":"source/_posts/游戏人生.md","hash":"d311930e7bd65b03df6f1f34de36a7b779865250","modified":1551009012444},{"_id":"source/_posts/网络基础协议.md","hash":"27c6321b62b2e4e0bb9d9aaa72379b74d172057d","modified":1564725300728},{"_id":"source/_posts/老博新开.md","hash":"61f575afdbb954aa2e30bc252f4a49426da87937","modified":1550992674388},{"_id":"source/_posts/计算机Unicode编码终结.md","hash":"05e16a186fca4361724aaf3a41fb67e80fdfba40","modified":1558430263995},{"_id":"source/_posts/谈谈事件驱动.md","hash":"669547fa7737eedbc7ad91c7d61ddd76d077ed5f","modified":1551187711433},{"_id":"source/categories/index.md","hash":"a733e404903433a7c8bf376858bdc12c65c7da08","modified":1545058177848},{"_id":"source/tags/index.md","hash":"561c75b84fd33763dcc0130c7bf784b472f00ef8","modified":1545058177848},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1545058878577},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1545058878577},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1545058878577},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1545058878578},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1545058878581},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1545058878581},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1545058878581},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1545058878582},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1545058878582},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1545058878582},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1545058878582},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1545058878582},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1545058878583},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1545058878583},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1545058878583},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1545058878583},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1545058878583},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1545058878584},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1545058878584},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1545058878584},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1545058878585},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1545058878599},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1545058878600},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1545058878600},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1545058878600},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1545058878600},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1545058878600},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1545058878601},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1545058878601},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1545058878602},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1545058878665},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1545058878665},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1545058878665},{"_id":"source/images/努力和天赋.JPG","hash":"0f5beec68afad8ba93755975e74306adba96fd69","modified":1551004912000},{"_id":"themes/next/layout/_custom/header.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551620017809},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545058878628},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"d38c39b56a6bc992cc564e391dbf47bf8eae6c25","modified":1551835869557},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1545058878586},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1545058878586},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1545058878586},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1545058878587},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1545058878587},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1545058878587},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1545058878588},{"_id":"themes/next/layout/_partials/footer.swig","hash":"44f495723f55955815fc3e4fafad490763edba77","modified":1551002119946},{"_id":"themes/next/layout/_partials/head.swig","hash":"c067ebff3346bd4d3fed2b387c44869a88c1ff3f","modified":1545058878588},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1545058878589},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1545058878590},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1545058878590},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1545058878590},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1545058878592},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1545058878592},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1545058878593},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1545058878597},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1545058878597},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1545058878597},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1545058878598},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1545058878598},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1545058878598},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1545058878598},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1545058878602},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1545058878602},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1545058878602},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1545058878602},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1545058878603},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1545058878603},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1545058878603},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1545058878603},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1545058878603},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1545058878627},{"_id":"themes/next/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1551001010848},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1545058878628},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1545058878628},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1545058878628},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1545058878629},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1545058878628},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1545058878629},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1545058878629},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1545058878629},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1545058878629},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"0e7671e0402d86f8874ae3f5742a263d9ded1a9c","modified":1551001001289},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"c03df1ab70f7d9f9abbf965bbec44bab8f175adf","modified":1551000983098},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545058878630},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1551009572919},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545058878630},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1545058878630},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1545058878630},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1545058878630},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545058878593},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545058878593},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545058878627},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545058878627},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545058878618},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545058878618},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545058878619},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"85723d1d81a844d22222ca37c500ece6c0211457","modified":1551002274750},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1551835817598},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1545058878589},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1545058878591},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1545058878591},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1545058878591},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1545058878591},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1545058878592},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1545058878592},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1545058878592},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1545058878593},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1545058878593},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1545058878593},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1545058878594},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1545058878594},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1545058878594},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1545058878594},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1545058878594},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1545058878594},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1545058878595},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1545058878595},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1545058878595},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1545058878595},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1545058878595},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1545058878595},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1545058878596},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1545058878596},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1545058878596},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1545058878596},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1545058878596},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1545058878596},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1545058878597},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1545058878597},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1545058878597},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1545058878597},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1545058878599},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1545058878599},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1545058878599},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1545058878599},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1545058878627},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1545058878627},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1545058878627},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1545058878627},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1545058878631},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1545058878631},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1545058878631},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1545058878631},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1545058878631},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1545058878631},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1545058878632},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1545058878632},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1545058878632},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1545058878632},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1545058878632},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1545058878618},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1545058878619},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1545058878619},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1545058878617},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1545058878636},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1545058878638},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1545058878639},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1545058878639},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1545058878639},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1545058878654},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1545058878643},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1545058878644},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1545058878644},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1545058878644},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1545058878644},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1545058878642},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1545058878642},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1545058878643},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1545058878643},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1545058878656},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1545058878656},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1545058878656},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1545058878657},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1545058878657},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1545058878657},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1545058878657},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1545058878657},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1545058878657},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1545058878658},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1545058878658},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1545058878658},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1545058878658},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1545058878658},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1545058878658},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1545058878658},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1545058878659},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1545058878659},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1545058878659},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1545058878660},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1545058878655},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1545058878655},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1545058878655},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1545058878655},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1545058878655},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1545058878656},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1545058878663},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1545058878663},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1545058878665},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1545058878665},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1545058878665},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1545058878655},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1545058878598},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1545058878599},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1545058878604},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1545058878604},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1545058878604},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1545058878604},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1545058878604},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1545058878607},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1545058878611},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1545058878615},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1545058878616},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1545058878616},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1545058878616},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1545058878616},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1545058878617},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1545058878617},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1545058878632},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1545058878620},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1545058878620},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1545058878621},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1545058878621},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1545058878621},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1545058878622},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1545058878622},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1545058878622},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1545058878623},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1545058878624},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1545058878624},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1545058878624},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1545058878625},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1545058878626},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1545058878626},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1545058878626},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1545058878626},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1545058878626},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1545058878626},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1545058878634},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1545058878636},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1545058878635},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1545058878639},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1545058878640},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1545058878640},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1545058878640},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1545058878640},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1545058878640},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1545058878641},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1545058878642},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1545058878642},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1545058878644},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1545058878645},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1545058878645},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1545058878643},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1545058878643},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1545058878662},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1545058878663},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1545058878635},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545058878653},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545058878654},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1545058878664},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1545058878604},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1545058878605},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1545058878605},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1545058878605},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1545058878605},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1545058878605},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1545058878605},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1545058878606},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1545058878606},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1545058878606},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1545058878606},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1545058878606},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1545058878606},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1545058878607},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1545058878607},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1545058878607},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1545058878607},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1545058878607},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1545058878608},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1545058878608},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1545058878608},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1545058878608},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1545058878608},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1545058878608},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1545058878608},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1545058878609},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1545058878609},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1545058878609},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1545058878609},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1545058878612},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1545058878613},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1545058878613},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1545058878613},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1545058878613},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1545058878614},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1545058878614},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1545058878614},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1545058878614},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1545058878611},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1545058878615},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1545058878611},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1545058878611},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1545058878611},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1545058878611},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1545058878611},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1545058878612},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1545058878612},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1545058878612},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1545058878609},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1545058878609},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1545058878609},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1545058878610},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1545058878610},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1545058878610},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1545058878610},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1545058878610},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1545058878610},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1545058878610},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1545058878622},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1545058878623},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1545058878625},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1545058878633},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1545058878633},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1545058878633},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1545058878634},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1545058878634},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1545058878640},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1545058878641},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1545058878641},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1545058878641},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1545058878641},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1545058878641},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1545058878646},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1545058878652},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545058878648},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1545058878638},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1545058878662},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1545058878651},{"_id":"public/baidusitemap.xml","hash":"b6c5fde12a6f70eef7fd306af5dedad48f8c7948","modified":1564731787631},{"_id":"public/sitemap.xml","hash":"53425961682fcc6e64d8be77097e35e00a49a2fd","modified":1564731787632},{"_id":"public/about/index.html","hash":"23254185b0ec8298d40773ed291ee1395a259515","modified":1564731787648},{"_id":"public/categories/index.html","hash":"9d756a04a1cbbbc7314c8b6688609504eee533c3","modified":1564731787648},{"_id":"public/tags/index.html","hash":"33479fc7c4edfc40b34a858a594a48caf1303e10","modified":1564731787648},{"_id":"public/archives/page/2/index.html","hash":"d257b32a4d576d56603d700045daa517d00da829","modified":1564731787648},{"_id":"public/archives/2018/index.html","hash":"de60274dc04229e303b6370b6d9555c22b2e70e5","modified":1564731787648},{"_id":"public/archives/2018/10/index.html","hash":"fc60aac8ea5962f1a803a984ffeb2764ffe99b1d","modified":1564731787648},{"_id":"public/archives/2018/11/index.html","hash":"25e706a3a1b4924b5cfa473da48b6ba1f9e7942d","modified":1564731787648},{"_id":"public/archives/2018/12/index.html","hash":"5865418fde9bb8990824d14f4e1c2450dbc04c48","modified":1564731787648},{"_id":"public/archives/2019/01/index.html","hash":"62342444149b6a3c2c9682087d08b0a132cfea4a","modified":1564731787648},{"_id":"public/archives/2019/02/index.html","hash":"9162cc6e43e7128099542b6c9af1cea20156c758","modified":1564731787648},{"_id":"public/archives/2019/03/index.html","hash":"a5c1a6f6b901b39bb37552a633e9d07dee9b1d24","modified":1564731787648},{"_id":"public/archives/2019/04/index.html","hash":"795b90398eb94cfda28f87f9d0b37268216ca6b6","modified":1564731787648},{"_id":"public/archives/2019/05/index.html","hash":"1f55b5bbb0fde57985256bf49bb65e3370b71511","modified":1564731787648},{"_id":"public/categories/观点/index.html","hash":"8f5daccf553d937fa76023630fc499a4a8981d61","modified":1564731787648},{"_id":"public/categories/琐事/index.html","hash":"43f62b48580b1e8dd44168da48b65d95e2daa29a","modified":1564731787648},{"_id":"public/tags/iOS/index.html","hash":"ffd11e492f4c8b10fa9ca1862267966fcb8d4397","modified":1564731787648},{"_id":"public/tags/计算机原理/index.html","hash":"8aff4491eaee8b54f18119f20bf59051e5641e31","modified":1564731787649},{"_id":"public/tags/网络/index.html","hash":"6034e1c8994ce406d41c99f7cca1d520e922db49","modified":1564731787649},{"_id":"public/tags/Life/index.html","hash":"20e260e04c4fee6169f9d08f8896466aec104bed","modified":1564731787649},{"_id":"public/tags/Python/index.html","hash":"04a82055bec5b9db2001822c846ec1b91b884eb9","modified":1564731787649},{"_id":"public/tags/Node-js/index.html","hash":"c8be031ea1c3736d763bf4c7ab1e1eb0f0d48d0a","modified":1564731787649},{"_id":"public/tags/C/index.html","hash":"9da06e7e0f1188f7d87bc9f8a94606f3ee29f7a0","modified":1564731787649},{"_id":"public/2019/05/25/互联网网络传输协议理解坑点/index.html","hash":"fbd0f352f94ece9ef8c97199e707363d45a77ffe","modified":1564731787649},{"_id":"public/2019/05/21/计算机Unicode编码终结/index.html","hash":"5a80572a67e35a12c998279f70b82dcc7e02be18","modified":1564731787649},{"_id":"public/2019/04/11/CPU的制作/index.html","hash":"d3836e3eb0ee40f89e26ce3db0e5dee37fd437dd","modified":1564731787649},{"_id":"public/2019/03/28/我心里一直有一个念想/index.html","hash":"ce48b339ff93740f739fd03f9c0bdde1bd6492f0","modified":1564731787649},{"_id":"public/2019/03/01/网络基础协议/index.html","hash":"674ade5785c70589de342e56e99cbb0b8467c4c5","modified":1564731787649},{"_id":"public/2019/02/26/内存分配详解-由底到高/index.html","hash":"3371660b52c24400d5eefff8781a7f49644ab20f","modified":1564731787649},{"_id":"public/2019/02/24/努力和天赋/index.html","hash":"6fdb4d3779f5807dfbd79a198c717aca807a153e","modified":1564731787649},{"_id":"public/2019/02/23/洗牙/index.html","hash":"8eb5a75a70905e0a9dd38a014dd743cc5f13a009","modified":1564731787649},{"_id":"public/2019/01/15/RAC-Api-Summer/index.html","hash":"3ad033fd6e4dbf3266076d3f61f6303a0b2aaa5c","modified":1564731787649},{"_id":"public/2019/01/06/iOS内存原理/index.html","hash":"bd85461091b99b7f8ebd651ad9ad472354f684a6","modified":1564731787649},{"_id":"public/2018/12/31/游戏人生/index.html","hash":"f0681a0d94a975ce4162f33e9fb87c9f1927d8a3","modified":1564731787649},{"_id":"public/2018/11/24/Block闭包简查记录/index.html","hash":"e32a580b6e730acb712b729632b80023f96635e0","modified":1564731787649},{"_id":"public/2018/11/08/谈谈事件驱动/index.html","hash":"85378b02bf81957dbb6bc9b25b3911563924ea98","modified":1564731787649},{"_id":"public/2018/10/31/折腾/index.html","hash":"cdbe54f08eddac9e49ce14de4a51220e6cad8f94","modified":1564731787649},{"_id":"public/2018/10/15/老博新开/index.html","hash":"0392fdeddfc85a68bd18d161ef02e048c7c34a62","modified":1564731787649},{"_id":"public/archives/index.html","hash":"46650de80cf4f723781735767d3efd0bbb8a680f","modified":1564731787649},{"_id":"public/archives/2019/index.html","hash":"d42792d95dd3a4307f4019df35c83acfd1b20fa5","modified":1564731787650},{"_id":"public/index.html","hash":"12a6b6332f54f5c40b65e0ffa0b28cfa8958057e","modified":1564731787650},{"_id":"public/page/2/index.html","hash":"ef3c3f6bf258d55067bee5ee7ee8f557f913f204","modified":1564731787650},{"_id":"public/categories/技术/index.html","hash":"ff81ec464c3e816daec5719164e794a6cab1a44a","modified":1564731787650},{"_id":"public/404.html","hash":"6bd2fa293ef3dde478fbd582b372fe957f31ecd0","modified":1564731787655},{"_id":"public/CNAME","hash":"b3d2bd99ffd7e2911454e8dfda42399ee0755d1b","modified":1564731787655},{"_id":"public/baidu_verify_UbpiI2UtZR.html","hash":"44ad571bd34404112bfecb450bd04f5113108c92","modified":1564731787655},{"_id":"public/favicon.ico","hash":"4ef6c17d21de64f3757da66a0a97e896401a3a05","modified":1564731787655},{"_id":"public/googleaac6ec34022a82d2.html","hash":"79804248297903f52f14b9dbb7950cb291b69432","modified":1564731787655},{"_id":"public/rose.html","hash":"f5701b9608c7f1c113a0d2d7bad178cf0e0797dc","modified":1564731787655},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1564731787655},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1564731787655},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1564731787655},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1564731787655},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1564731787655},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1564731787656},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1564731787656},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1564731787656},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1564731787656},{"_id":"public/images/favicon-32x32-next.png","hash":"c03df1ab70f7d9f9abbf965bbec44bab8f175adf","modified":1564731787656},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1564731787656},{"_id":"public/images/favicon-16x16-next.png","hash":"0e7671e0402d86f8874ae3f5742a263d9ded1a9c","modified":1564731787656},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1564731787656},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1564731787656},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1564731787656},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1564731787656},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1564731787656},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1564731787656},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1564731787656},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1564731787656},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1564731787656},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1564731787656},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1564731787656},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1564731787656},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1564731787656},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1564731787656},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1564731787656},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1564731787656},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1564731787656},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1564731787656},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1564731787657},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1564731787657},{"_id":"public/images/apple-touch-icon-next.png","hash":"85723d1d81a844d22222ca37c500ece6c0211457","modified":1564731787972},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1564731787974},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1564731787975},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1564731787982},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1564731787982},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1564731787982},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1564731787982},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1564731787983},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1564731787983},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1564731787983},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1564731787983},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1564731787983},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1564731787983},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1564731787983},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1564731787983},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1564731787983},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1564731787983},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1564731787983},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1564731787983},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1564731787983},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1564731787983},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1564731787983},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1564731787983},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1564731787983},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1564731787983},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1564731787983},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1564731787983},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1564731787983},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1564731787983},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1564731787983},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1564731787983},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1564731787983},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1564731787983},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1564731787983},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1564731787983},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1564731787983},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1564731787983},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1564731787984},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1564731787984},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1564731787984},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1564731787984},{"_id":"public/lib/fastclick/README.html","hash":"e25da2e29e6947b704b43611b325e8ad65134e42","modified":1564731787984},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"81057e5b518b8ab60474e1ad027e868b558f15b7","modified":1564731787984},{"_id":"public/lib/jquery_lazyload/README.html","hash":"14c63ba441fb49b26032e72e9cb67c67c8df19f1","modified":1564731787984},{"_id":"public/css/main.css","hash":"e28fc55f6b52687693ee3cc810ce0e62a62a7ed8","modified":1564731787984},{"_id":"public/images/努力和天赋.JPG","hash":"0f5beec68afad8ba93755975e74306adba96fd69","modified":1564731787984},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1564731787984},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1564731787984},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1564731787987},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1564731787987},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1564731787987},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1564731787987},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1564731787987},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1564731787987},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1564731787987},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1564731787987},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1564731787987},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1564731787989},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1564731787989},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1564731787991},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1564731787992},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1564731787995},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1564731787995},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1564731787996},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1564731787996},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1564731787996},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1564731787996},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1564731787996},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1564731787999},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1564731787999},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1564731788000},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1564731788003},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1564731788006},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1564731788009},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1564731788011},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1564731788013},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1564731788020},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1564731788026}],"Category":[{"name":"技术","_id":"cjytswkyu0004odgpibv2hr3m"},{"name":"观点","_id":"cjytswkza000lodgp39b011pe"},{"name":"琐事","_id":"cjytswkzd000sodgpicypwqpa"}],"Data":[],"Page":[{"title":"一个工匠","date":"2018-10-16T05:32:11.000Z","type":"about","_content":"\n\n我是一个在IT行业奋战多年的一线码工，  \n经历过多家公司，有大有小。  \n经历过多个产品，有成有败。  \n有幸与很多优秀同事共事。\n也对很多经验教训观点保持客观及怀疑。  \n跌打碰撞好几年，所幸在技术、管理、思想、态度、人生观等方面都有所进展，不至于一事无成回首叹息。\n\n**我希望自己永远保持一颗工匠精神，严谨认真，如履薄冰。不管对人还是对事，不管是工作还是生活。**  \n我把我到想法，我的认知，写在人类的里程碑-互联网上。  \n如你读到后，产生些许共鸣，陌生人我也感到三生有幸。 \n人生苦短，但也精彩绝伦，与各位共勉。\n\n> 工匠精神：\n> 严谨认真，如履薄冰，跋山涉水，走心为匠。\n\n","source":"about/index.md","raw":"---\ntitle: 一个工匠\ndate: 2018-10-16 13:32:11\ntype: \"about\"\n---\n\n\n我是一个在IT行业奋战多年的一线码工，  \n经历过多家公司，有大有小。  \n经历过多个产品，有成有败。  \n有幸与很多优秀同事共事。\n也对很多经验教训观点保持客观及怀疑。  \n跌打碰撞好几年，所幸在技术、管理、思想、态度、人生观等方面都有所进展，不至于一事无成回首叹息。\n\n**我希望自己永远保持一颗工匠精神，严谨认真，如履薄冰。不管对人还是对事，不管是工作还是生活。**  \n我把我到想法，我的认知，写在人类的里程碑-互联网上。  \n如你读到后，产生些许共鸣，陌生人我也感到三生有幸。 \n人生苦短，但也精彩绝伦，与各位共勉。\n\n> 工匠精神：\n> 严谨认真，如履薄冰，跋山涉水，走心为匠。\n\n","updated":"2019-02-23T10:07:44.511Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjytswkyn0000odgpf1eic2gw","content":"<p>我是一个在IT行业奋战多年的一线码工，<br>经历过多家公司，有大有小。<br>经历过多个产品，有成有败。<br>有幸与很多优秀同事共事。<br>也对很多经验教训观点保持客观及怀疑。<br>跌打碰撞好几年，所幸在技术、管理、思想、态度、人生观等方面都有所进展，不至于一事无成回首叹息。</p>\n<p><strong>我希望自己永远保持一颗工匠精神，严谨认真，如履薄冰。不管对人还是对事，不管是工作还是生活。</strong><br>我把我到想法，我的认知，写在人类的里程碑-互联网上。<br>如你读到后，产生些许共鸣，陌生人我也感到三生有幸。<br>人生苦短，但也精彩绝伦，与各位共勉。</p>\n<blockquote>\n<p>工匠精神：<br>严谨认真，如履薄冰，跋山涉水，走心为匠。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>我是一个在IT行业奋战多年的一线码工，<br>经历过多家公司，有大有小。<br>经历过多个产品，有成有败。<br>有幸与很多优秀同事共事。<br>也对很多经验教训观点保持客观及怀疑。<br>跌打碰撞好几年，所幸在技术、管理、思想、态度、人生观等方面都有所进展，不至于一事无成回首叹息。</p>\n<p><strong>我希望自己永远保持一颗工匠精神，严谨认真，如履薄冰。不管对人还是对事，不管是工作还是生活。</strong><br>我把我到想法，我的认知，写在人类的里程碑-互联网上。<br>如你读到后，产生些许共鸣，陌生人我也感到三生有幸。<br>人生苦短，但也精彩绝伦，与各位共勉。</p>\n<blockquote>\n<p>工匠精神：<br>严谨认真，如履薄冰，跋山涉水，走心为匠。</p>\n</blockquote>\n"},{"title":"categories","date":"2018-10-16T05:34:14.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-10-16 13:34:14\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-12-17T14:49:37.848Z","path":"categories/index.html","layout":"page","_id":"cjytswkys0002odgpp21onyi1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-10-16T05:12:32.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-10-16 13:12:32\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-12-17T14:49:37.848Z","path":"tags/index.html","layout":"page","_id":"cjytswl3d001todgppb2dtgw9","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Block闭包简查记录","date":"2018-11-24T09:00:08.000Z","keywords":"Block,闭包","_content":"\n像Block这种闭包，就是怎么用怎么爽，怎么用怎么喜欢的编码方式了。\n\n闭包很伟大，也是各个语言都实现了的基础语法。我这边对闭包的理解，就是：**内部函数持有外部变量**。\n\n但是各个语言都有需要注意的点，如iOS里面的循环引用，Swift里面的逃逸闭包，Python里面的闭包变量延迟定义等。\n\n<!-- more -->\n\n```\nAs a local variable:\n\treturnType (^blockName)(parameterTypes) = ^returnType(parameters) {...};\n\nAs a property:\n\t@property (nonatomic, copy, nullability) returnType (^blockName)(parameterTypes);\n\nAs a method parameter:\n\t- (void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;\n\nAs an argument to a method call:\n\t[someObject someMethodThatTakesABlock:^returnType (parameters) {...}];\n\nAs a typedef:\n\ttypedef returnType (^TypeName)(parameterTypes);\n\tTypeName blockName = ^returnType(parameters) {...};\n\n```\n\n","source":"_posts/Block闭包简查记录.md","raw":"---\ntitle: Block闭包简查记录\ndate: 2018-11-24 17:00:08\ncategories:\n- 技术\ntags:\n- iOS\nkeywords: Block,闭包\n---\n\n像Block这种闭包，就是怎么用怎么爽，怎么用怎么喜欢的编码方式了。\n\n闭包很伟大，也是各个语言都实现了的基础语法。我这边对闭包的理解，就是：**内部函数持有外部变量**。\n\n但是各个语言都有需要注意的点，如iOS里面的循环引用，Swift里面的逃逸闭包，Python里面的闭包变量延迟定义等。\n\n<!-- more -->\n\n```\nAs a local variable:\n\treturnType (^blockName)(parameterTypes) = ^returnType(parameters) {...};\n\nAs a property:\n\t@property (nonatomic, copy, nullability) returnType (^blockName)(parameterTypes);\n\nAs a method parameter:\n\t- (void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;\n\nAs an argument to a method call:\n\t[someObject someMethodThatTakesABlock:^returnType (parameters) {...}];\n\nAs a typedef:\n\ttypedef returnType (^TypeName)(parameterTypes);\n\tTypeName blockName = ^returnType(parameters) {...};\n\n```\n\n","slug":"Block闭包简查记录","published":1,"updated":"2019-03-06T13:29:00.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjytswkyo0001odgpan58d5hj","content":"<p>像Block这种闭包，就是怎么用怎么爽，怎么用怎么喜欢的编码方式了。</p>\n<p>闭包很伟大，也是各个语言都实现了的基础语法。我这边对闭包的理解，就是：<strong>内部函数持有外部变量</strong>。</p>\n<p>但是各个语言都有需要注意的点，如iOS里面的循环引用，Swift里面的逃逸闭包，Python里面的闭包变量延迟定义等。</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">As a local variable:</span><br><span class=\"line\">\treturnType (^blockName)(parameterTypes) = ^returnType(parameters) &#123;...&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">As a property:</span><br><span class=\"line\">\t@property (nonatomic, copy, nullability) returnType (^blockName)(parameterTypes);</span><br><span class=\"line\"></span><br><span class=\"line\">As a method parameter:</span><br><span class=\"line\">\t- (void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;</span><br><span class=\"line\"></span><br><span class=\"line\">As an argument to a method call:</span><br><span class=\"line\">\t[someObject someMethodThatTakesABlock:^returnType (parameters) &#123;...&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">As a typedef:</span><br><span class=\"line\">\ttypedef returnType (^TypeName)(parameterTypes);</span><br><span class=\"line\">\tTypeName blockName = ^returnType(parameters) &#123;...&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>像Block这种闭包，就是怎么用怎么爽，怎么用怎么喜欢的编码方式了。</p>\n<p>闭包很伟大，也是各个语言都实现了的基础语法。我这边对闭包的理解，就是：<strong>内部函数持有外部变量</strong>。</p>\n<p>但是各个语言都有需要注意的点，如iOS里面的循环引用，Swift里面的逃逸闭包，Python里面的闭包变量延迟定义等。</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">As a local variable:</span><br><span class=\"line\">\treturnType (^blockName)(parameterTypes) = ^returnType(parameters) &#123;...&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">As a property:</span><br><span class=\"line\">\t@property (nonatomic, copy, nullability) returnType (^blockName)(parameterTypes);</span><br><span class=\"line\"></span><br><span class=\"line\">As a method parameter:</span><br><span class=\"line\">\t- (void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;</span><br><span class=\"line\"></span><br><span class=\"line\">As an argument to a method call:</span><br><span class=\"line\">\t[someObject someMethodThatTakesABlock:^returnType (parameters) &#123;...&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">As a typedef:</span><br><span class=\"line\">\ttypedef returnType (^TypeName)(parameterTypes);</span><br><span class=\"line\">\tTypeName blockName = ^returnType(parameters) &#123;...&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"CPU的制作","date":"2019-04-11T12:14:43.000Z","keywords":"CPU,晶圆,光刻,内存,晶体管","_content":"\n如果你能看到这篇文章，我想你一定查阅了很多相关资料了。\n如果你是对CPU的制作有一些模糊，或者希望通过其他博文来验证你的想法，那么下面一些认知或许对你有一些帮助。\n大到宇宙飞船，小到PC、手机、冰箱，无一没有芯片的影子。\n各位一定都对芯片有很多认知了，我们不需要多做说明，总之，没有芯片，就没有新社会吧。集成电路的创造，说第三次工业革命，反对的人应该不会多吧。\n\n### 集成电路的制作\n\n#### 理解一：硅=>晶圆\n原材料首当其冲的是高纯度硅。通过把高纯度的硅融化，用一个引子伸入容器，不断的让硅附着生长在引子上面。我们可以想象明矾的制作过程。\n引子不断的往上提，最后一个很重的圆柱形硅淀就形成了。\n这个圆柱形直径有10厘米+。\n然后通过机器切割，从上往下，切割一个豁口或者一个边，这个豁口或者边，是为了客户进行晶圆制作的时候辨认方向用的。因为最终晶圆不是100%利用的，这个豁口或者边，是肯定不会用到的。\n然后，对整个圆柱形硅切割成晶圆。每个晶圆对直径也还是10厘米+，但是厚度只有3毫米左右。这样的一片片晶圆，就是后面集成电路的原材料了。\n所以，**晶圆其实是很大的一个圆盘，比普通人的一张脸，还是要大一些的**。\n\n<!-- more -->\n\n#### 理解二：晶圆光刻腐蚀\n这个比较复杂，网上都有详细的说明。Intel和AMD也有公开视频说到一系列的复杂过程。\n我不懂，我不做更多说明。大家可以自行查看。网上都是图，还是很方便理解和查看的。\n\n#### 理解三：晶体管数量\n很多人看了光刻腐蚀的图文甚至视频，认同CPU里面真的好复杂。为什么呢？很多人想，这样的操作，里面有好多好多个晶体管了吧。\n其实，很多人都不敢放大自己的想象。那不是好多好多个，也不是几百万或者几千万甚至几亿个，而是几百亿个。\n现在的技术，已经达到**300亿个晶体管**，在一个**指甲盖大小的CPU**里面了。\n这些晶体管，就组合成了集成电路，不同数量的晶体管，组合成不同用途的寄存器等。他们各司其职，为CPU的使命保驾护航。\n\n#### 理解四：晶圆良率\n请大家一定理解，一个晶圆，可不仅仅只能光刻腐蚀出来一个Die，而是很多个Die。不然这个芯片得多大啊。\n我有个同事有次和我说，一个晶圆只能制作一个芯片，这个晶圆利用率为什么不能提高？\n其实，我同事就没有理解晶圆的大小。一个比脸还大的盘子，怎么可能只能做一个指甲盖大小的芯片啊！\n所以，一个芯片，可以做很多个Die，每个Die，经过测试包装后，就成了CPU。\n所以，这里有一个良率的问题。为什么会有良率？因为几百亿个晶体管里面，有一部分的晶体管是不能使用的，而不是全部能正常工作。\n很少有晶圆，上面光刻腐蚀的几十个Die都是完好的。\n良率有一个现象，越靠近中心的位置，Die的良率越高。同时，越偏离中心，Die的良率越低。（中心，即晶圆的中心）\n那每个晶圆里面，肯定有一些Die里面的晶体管是损坏的。是不是这些Die就不能用了呢？\n不是的。**同一批次的Die，那些晶体管损坏的产品，就相应的把这些损坏晶体管封死，变成低配的CPU。**\n比如，同一批次的I7处理器，可能有些Die里面有两个Core（核心）损坏了。那么在后面测试的时候，就封死这两个核，变成I5处理器。\n商人都是无利不起早的，他们为什么要这么做？因为这样做一来商家可以赚更多钱，不然那么多Die不都是扔了嘛。二来降低了用户的价格，东西多一些价格总归会将一些的。\n网上有人提到过，那么有没有一个晶圆只做一个Die的呢？\n有的。只是这个成本太高的。因为良率的问题，这个Die得多么精密的仪器才能够保障其晶体管不受损坏。因为这个Die占据一整个晶圆，面积大了，坏点几率也相应增加了无数倍。几乎100%。\n哪些情况下会使用这样的超大Die？宇宙飞船啊。高级东西当然需要高级的配件。\n\n#### 理解五：晶体管数量为什么目前保持300亿多一些，再也上不去了\n晶体管数量越多，计算能力也就越强，电脑的处理速度也就越快。那晶体管还能不能提升到上千亿？\n不是技术上上不去了，技术上一直在突破。\n而是**散热上不去了**。晶体管需要通电才能工作，能量总归是守恒的。CPU内部几百亿个晶体管，总归要散热的。\n因为散热真的不能那么有效，晶体管数量再多下去，就不能工作了。晶体管的工作环境温度太高了。\n散热有很多计算方式，比如降低电压等方案都可以有效的降低散热量。但是目前的确已经到瓶颈了，好多年没有前进了。\n\n#### 理解六：内存是不是也有很多晶体管？\n不仅仅内存有，显卡啥的都有。\n而且他们都有很多很多的晶体管。\n像内存，也是使用晶圆做的。\n只不过晶圆做的CPU，里面的晶体管更多用来处理数据运算数据做控制使用。\n而晶圆做的内存，里面的晶体管更多用来存储数据。\n显卡？显卡里面有GPU啊。GPU和CPU本质上都是一样的，就是里面的运算处理单元因为工作模式不同，量级不同而已。\n所以啊，他们里面都是有亿级单位的晶体管存在。\n\n#### 理解七：手机都比电脑还强劲了感觉，手机为什么那么小？手机里面有CPU吗？\n手机里面岂止有CPU，手机里面有和PC配件一样的东西。什么CPU、GPU、内存、磁盘、驱动等等，都是齐的。\n手机就是缩小版的PC。\n那问题又来了，为什么手机可以非常小？\n说实话，这也是我的知识盲区。\n我了解到的，因为AMD它们的CPU能耗相对手机来说还是太大了，像Apple的手机芯片就是走的新的架构，为ARM架构。\nCPU的架构是CPU性能非常大的制约因素。而Intel的架构就听说比AMD优秀非常多。\n手机里面的CPU呢，还不是单独存在的。手机厂商，会把内存、显卡、驱动、CPU等等，全部封装在一个大的芯片里面。他们是非常集中的一体，不像PC上面想换内存条了，再买一个就好了。\n\n我是写代码的，一年前研究CPU运行原理的时候，看到了CPU的制作过程。\n开始很以为惊奇，科技真的伟大。\n后面对CPU运行了解的多了一些，了解了代码运行的原理，了解了二进制指令在集成电路里面的实现。\n才发现，了解CPU的制作原理，多了解一些晶体管，对理解代码，理解计算机，作用是非常大的。\n想象中不可能的事情，都是这些基石铺垫起来的。\n\n___\n\n一个人的思维，决定了一个人的高度。\n一举一动，笑或者哭，走或者跳，都是通过大脑发出指令，身体才能够执行。\n哪些主观行动，是不通过人的思维控制的呢？神经反射之类的我们除外，它不属于主观行动。\n一个人如何学习，如何赚钱，如何理财，如何钱生钱命转命。都是他的思维驱动他的行动的。\n所以，努力的提升思维吧！\n很多人说的，努力比不上选择，其实努力很廉价的。人只要主观愿意，随时可以很努力。你努力了，更多的人可以比你更努力。努力决定的仅仅是下限！\n思维的提升，才能有效的不让努力白费，才能更好的实现人生价值。\n都是行人。","source":"_posts/CPU的制作.md","raw":"---\ntitle: CPU的制作\ndate: 2019-04-11 20:14:43\ncategories:\n- 技术\ntags:\n- 计算机原理\nkeywords: CPU,晶圆,光刻,内存,晶体管\n---\n\n如果你能看到这篇文章，我想你一定查阅了很多相关资料了。\n如果你是对CPU的制作有一些模糊，或者希望通过其他博文来验证你的想法，那么下面一些认知或许对你有一些帮助。\n大到宇宙飞船，小到PC、手机、冰箱，无一没有芯片的影子。\n各位一定都对芯片有很多认知了，我们不需要多做说明，总之，没有芯片，就没有新社会吧。集成电路的创造，说第三次工业革命，反对的人应该不会多吧。\n\n### 集成电路的制作\n\n#### 理解一：硅=>晶圆\n原材料首当其冲的是高纯度硅。通过把高纯度的硅融化，用一个引子伸入容器，不断的让硅附着生长在引子上面。我们可以想象明矾的制作过程。\n引子不断的往上提，最后一个很重的圆柱形硅淀就形成了。\n这个圆柱形直径有10厘米+。\n然后通过机器切割，从上往下，切割一个豁口或者一个边，这个豁口或者边，是为了客户进行晶圆制作的时候辨认方向用的。因为最终晶圆不是100%利用的，这个豁口或者边，是肯定不会用到的。\n然后，对整个圆柱形硅切割成晶圆。每个晶圆对直径也还是10厘米+，但是厚度只有3毫米左右。这样的一片片晶圆，就是后面集成电路的原材料了。\n所以，**晶圆其实是很大的一个圆盘，比普通人的一张脸，还是要大一些的**。\n\n<!-- more -->\n\n#### 理解二：晶圆光刻腐蚀\n这个比较复杂，网上都有详细的说明。Intel和AMD也有公开视频说到一系列的复杂过程。\n我不懂，我不做更多说明。大家可以自行查看。网上都是图，还是很方便理解和查看的。\n\n#### 理解三：晶体管数量\n很多人看了光刻腐蚀的图文甚至视频，认同CPU里面真的好复杂。为什么呢？很多人想，这样的操作，里面有好多好多个晶体管了吧。\n其实，很多人都不敢放大自己的想象。那不是好多好多个，也不是几百万或者几千万甚至几亿个，而是几百亿个。\n现在的技术，已经达到**300亿个晶体管**，在一个**指甲盖大小的CPU**里面了。\n这些晶体管，就组合成了集成电路，不同数量的晶体管，组合成不同用途的寄存器等。他们各司其职，为CPU的使命保驾护航。\n\n#### 理解四：晶圆良率\n请大家一定理解，一个晶圆，可不仅仅只能光刻腐蚀出来一个Die，而是很多个Die。不然这个芯片得多大啊。\n我有个同事有次和我说，一个晶圆只能制作一个芯片，这个晶圆利用率为什么不能提高？\n其实，我同事就没有理解晶圆的大小。一个比脸还大的盘子，怎么可能只能做一个指甲盖大小的芯片啊！\n所以，一个芯片，可以做很多个Die，每个Die，经过测试包装后，就成了CPU。\n所以，这里有一个良率的问题。为什么会有良率？因为几百亿个晶体管里面，有一部分的晶体管是不能使用的，而不是全部能正常工作。\n很少有晶圆，上面光刻腐蚀的几十个Die都是完好的。\n良率有一个现象，越靠近中心的位置，Die的良率越高。同时，越偏离中心，Die的良率越低。（中心，即晶圆的中心）\n那每个晶圆里面，肯定有一些Die里面的晶体管是损坏的。是不是这些Die就不能用了呢？\n不是的。**同一批次的Die，那些晶体管损坏的产品，就相应的把这些损坏晶体管封死，变成低配的CPU。**\n比如，同一批次的I7处理器，可能有些Die里面有两个Core（核心）损坏了。那么在后面测试的时候，就封死这两个核，变成I5处理器。\n商人都是无利不起早的，他们为什么要这么做？因为这样做一来商家可以赚更多钱，不然那么多Die不都是扔了嘛。二来降低了用户的价格，东西多一些价格总归会将一些的。\n网上有人提到过，那么有没有一个晶圆只做一个Die的呢？\n有的。只是这个成本太高的。因为良率的问题，这个Die得多么精密的仪器才能够保障其晶体管不受损坏。因为这个Die占据一整个晶圆，面积大了，坏点几率也相应增加了无数倍。几乎100%。\n哪些情况下会使用这样的超大Die？宇宙飞船啊。高级东西当然需要高级的配件。\n\n#### 理解五：晶体管数量为什么目前保持300亿多一些，再也上不去了\n晶体管数量越多，计算能力也就越强，电脑的处理速度也就越快。那晶体管还能不能提升到上千亿？\n不是技术上上不去了，技术上一直在突破。\n而是**散热上不去了**。晶体管需要通电才能工作，能量总归是守恒的。CPU内部几百亿个晶体管，总归要散热的。\n因为散热真的不能那么有效，晶体管数量再多下去，就不能工作了。晶体管的工作环境温度太高了。\n散热有很多计算方式，比如降低电压等方案都可以有效的降低散热量。但是目前的确已经到瓶颈了，好多年没有前进了。\n\n#### 理解六：内存是不是也有很多晶体管？\n不仅仅内存有，显卡啥的都有。\n而且他们都有很多很多的晶体管。\n像内存，也是使用晶圆做的。\n只不过晶圆做的CPU，里面的晶体管更多用来处理数据运算数据做控制使用。\n而晶圆做的内存，里面的晶体管更多用来存储数据。\n显卡？显卡里面有GPU啊。GPU和CPU本质上都是一样的，就是里面的运算处理单元因为工作模式不同，量级不同而已。\n所以啊，他们里面都是有亿级单位的晶体管存在。\n\n#### 理解七：手机都比电脑还强劲了感觉，手机为什么那么小？手机里面有CPU吗？\n手机里面岂止有CPU，手机里面有和PC配件一样的东西。什么CPU、GPU、内存、磁盘、驱动等等，都是齐的。\n手机就是缩小版的PC。\n那问题又来了，为什么手机可以非常小？\n说实话，这也是我的知识盲区。\n我了解到的，因为AMD它们的CPU能耗相对手机来说还是太大了，像Apple的手机芯片就是走的新的架构，为ARM架构。\nCPU的架构是CPU性能非常大的制约因素。而Intel的架构就听说比AMD优秀非常多。\n手机里面的CPU呢，还不是单独存在的。手机厂商，会把内存、显卡、驱动、CPU等等，全部封装在一个大的芯片里面。他们是非常集中的一体，不像PC上面想换内存条了，再买一个就好了。\n\n我是写代码的，一年前研究CPU运行原理的时候，看到了CPU的制作过程。\n开始很以为惊奇，科技真的伟大。\n后面对CPU运行了解的多了一些，了解了代码运行的原理，了解了二进制指令在集成电路里面的实现。\n才发现，了解CPU的制作原理，多了解一些晶体管，对理解代码，理解计算机，作用是非常大的。\n想象中不可能的事情，都是这些基石铺垫起来的。\n\n___\n\n一个人的思维，决定了一个人的高度。\n一举一动，笑或者哭，走或者跳，都是通过大脑发出指令，身体才能够执行。\n哪些主观行动，是不通过人的思维控制的呢？神经反射之类的我们除外，它不属于主观行动。\n一个人如何学习，如何赚钱，如何理财，如何钱生钱命转命。都是他的思维驱动他的行动的。\n所以，努力的提升思维吧！\n很多人说的，努力比不上选择，其实努力很廉价的。人只要主观愿意，随时可以很努力。你努力了，更多的人可以比你更努力。努力决定的仅仅是下限！\n思维的提升，才能有效的不让努力白费，才能更好的实现人生价值。\n都是行人。","slug":"CPU的制作","published":1,"updated":"2019-05-26T13:49:38.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjytswkyt0003odgp2we4a7ri","content":"<p>如果你能看到这篇文章，我想你一定查阅了很多相关资料了。<br>如果你是对CPU的制作有一些模糊，或者希望通过其他博文来验证你的想法，那么下面一些认知或许对你有一些帮助。<br>大到宇宙飞船，小到PC、手机、冰箱，无一没有芯片的影子。<br>各位一定都对芯片有很多认知了，我们不需要多做说明，总之，没有芯片，就没有新社会吧。集成电路的创造，说第三次工业革命，反对的人应该不会多吧。</p>\n<h3 id=\"集成电路的制作\"><a href=\"#集成电路的制作\" class=\"headerlink\" title=\"集成电路的制作\"></a>集成电路的制作</h3><h4 id=\"理解一：硅-gt-晶圆\"><a href=\"#理解一：硅-gt-晶圆\" class=\"headerlink\" title=\"理解一：硅=&gt;晶圆\"></a>理解一：硅=&gt;晶圆</h4><p>原材料首当其冲的是高纯度硅。通过把高纯度的硅融化，用一个引子伸入容器，不断的让硅附着生长在引子上面。我们可以想象明矾的制作过程。<br>引子不断的往上提，最后一个很重的圆柱形硅淀就形成了。<br>这个圆柱形直径有10厘米+。<br>然后通过机器切割，从上往下，切割一个豁口或者一个边，这个豁口或者边，是为了客户进行晶圆制作的时候辨认方向用的。因为最终晶圆不是100%利用的，这个豁口或者边，是肯定不会用到的。<br>然后，对整个圆柱形硅切割成晶圆。每个晶圆对直径也还是10厘米+，但是厚度只有3毫米左右。这样的一片片晶圆，就是后面集成电路的原材料了。<br>所以，<strong>晶圆其实是很大的一个圆盘，比普通人的一张脸，还是要大一些的</strong>。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"理解二：晶圆光刻腐蚀\"><a href=\"#理解二：晶圆光刻腐蚀\" class=\"headerlink\" title=\"理解二：晶圆光刻腐蚀\"></a>理解二：晶圆光刻腐蚀</h4><p>这个比较复杂，网上都有详细的说明。Intel和AMD也有公开视频说到一系列的复杂过程。<br>我不懂，我不做更多说明。大家可以自行查看。网上都是图，还是很方便理解和查看的。</p>\n<h4 id=\"理解三：晶体管数量\"><a href=\"#理解三：晶体管数量\" class=\"headerlink\" title=\"理解三：晶体管数量\"></a>理解三：晶体管数量</h4><p>很多人看了光刻腐蚀的图文甚至视频，认同CPU里面真的好复杂。为什么呢？很多人想，这样的操作，里面有好多好多个晶体管了吧。<br>其实，很多人都不敢放大自己的想象。那不是好多好多个，也不是几百万或者几千万甚至几亿个，而是几百亿个。<br>现在的技术，已经达到<strong>300亿个晶体管</strong>，在一个<strong>指甲盖大小的CPU</strong>里面了。<br>这些晶体管，就组合成了集成电路，不同数量的晶体管，组合成不同用途的寄存器等。他们各司其职，为CPU的使命保驾护航。</p>\n<h4 id=\"理解四：晶圆良率\"><a href=\"#理解四：晶圆良率\" class=\"headerlink\" title=\"理解四：晶圆良率\"></a>理解四：晶圆良率</h4><p>请大家一定理解，一个晶圆，可不仅仅只能光刻腐蚀出来一个Die，而是很多个Die。不然这个芯片得多大啊。<br>我有个同事有次和我说，一个晶圆只能制作一个芯片，这个晶圆利用率为什么不能提高？<br>其实，我同事就没有理解晶圆的大小。一个比脸还大的盘子，怎么可能只能做一个指甲盖大小的芯片啊！<br>所以，一个芯片，可以做很多个Die，每个Die，经过测试包装后，就成了CPU。<br>所以，这里有一个良率的问题。为什么会有良率？因为几百亿个晶体管里面，有一部分的晶体管是不能使用的，而不是全部能正常工作。<br>很少有晶圆，上面光刻腐蚀的几十个Die都是完好的。<br>良率有一个现象，越靠近中心的位置，Die的良率越高。同时，越偏离中心，Die的良率越低。（中心，即晶圆的中心）<br>那每个晶圆里面，肯定有一些Die里面的晶体管是损坏的。是不是这些Die就不能用了呢？<br>不是的。<strong>同一批次的Die，那些晶体管损坏的产品，就相应的把这些损坏晶体管封死，变成低配的CPU。</strong><br>比如，同一批次的I7处理器，可能有些Die里面有两个Core（核心）损坏了。那么在后面测试的时候，就封死这两个核，变成I5处理器。<br>商人都是无利不起早的，他们为什么要这么做？因为这样做一来商家可以赚更多钱，不然那么多Die不都是扔了嘛。二来降低了用户的价格，东西多一些价格总归会将一些的。<br>网上有人提到过，那么有没有一个晶圆只做一个Die的呢？<br>有的。只是这个成本太高的。因为良率的问题，这个Die得多么精密的仪器才能够保障其晶体管不受损坏。因为这个Die占据一整个晶圆，面积大了，坏点几率也相应增加了无数倍。几乎100%。<br>哪些情况下会使用这样的超大Die？宇宙飞船啊。高级东西当然需要高级的配件。</p>\n<h4 id=\"理解五：晶体管数量为什么目前保持300亿多一些，再也上不去了\"><a href=\"#理解五：晶体管数量为什么目前保持300亿多一些，再也上不去了\" class=\"headerlink\" title=\"理解五：晶体管数量为什么目前保持300亿多一些，再也上不去了\"></a>理解五：晶体管数量为什么目前保持300亿多一些，再也上不去了</h4><p>晶体管数量越多，计算能力也就越强，电脑的处理速度也就越快。那晶体管还能不能提升到上千亿？<br>不是技术上上不去了，技术上一直在突破。<br>而是<strong>散热上不去了</strong>。晶体管需要通电才能工作，能量总归是守恒的。CPU内部几百亿个晶体管，总归要散热的。<br>因为散热真的不能那么有效，晶体管数量再多下去，就不能工作了。晶体管的工作环境温度太高了。<br>散热有很多计算方式，比如降低电压等方案都可以有效的降低散热量。但是目前的确已经到瓶颈了，好多年没有前进了。</p>\n<h4 id=\"理解六：内存是不是也有很多晶体管？\"><a href=\"#理解六：内存是不是也有很多晶体管？\" class=\"headerlink\" title=\"理解六：内存是不是也有很多晶体管？\"></a>理解六：内存是不是也有很多晶体管？</h4><p>不仅仅内存有，显卡啥的都有。<br>而且他们都有很多很多的晶体管。<br>像内存，也是使用晶圆做的。<br>只不过晶圆做的CPU，里面的晶体管更多用来处理数据运算数据做控制使用。<br>而晶圆做的内存，里面的晶体管更多用来存储数据。<br>显卡？显卡里面有GPU啊。GPU和CPU本质上都是一样的，就是里面的运算处理单元因为工作模式不同，量级不同而已。<br>所以啊，他们里面都是有亿级单位的晶体管存在。</p>\n<h4 id=\"理解七：手机都比电脑还强劲了感觉，手机为什么那么小？手机里面有CPU吗？\"><a href=\"#理解七：手机都比电脑还强劲了感觉，手机为什么那么小？手机里面有CPU吗？\" class=\"headerlink\" title=\"理解七：手机都比电脑还强劲了感觉，手机为什么那么小？手机里面有CPU吗？\"></a>理解七：手机都比电脑还强劲了感觉，手机为什么那么小？手机里面有CPU吗？</h4><p>手机里面岂止有CPU，手机里面有和PC配件一样的东西。什么CPU、GPU、内存、磁盘、驱动等等，都是齐的。<br>手机就是缩小版的PC。<br>那问题又来了，为什么手机可以非常小？<br>说实话，这也是我的知识盲区。<br>我了解到的，因为AMD它们的CPU能耗相对手机来说还是太大了，像Apple的手机芯片就是走的新的架构，为ARM架构。<br>CPU的架构是CPU性能非常大的制约因素。而Intel的架构就听说比AMD优秀非常多。<br>手机里面的CPU呢，还不是单独存在的。手机厂商，会把内存、显卡、驱动、CPU等等，全部封装在一个大的芯片里面。他们是非常集中的一体，不像PC上面想换内存条了，再买一个就好了。</p>\n<p>我是写代码的，一年前研究CPU运行原理的时候，看到了CPU的制作过程。<br>开始很以为惊奇，科技真的伟大。<br>后面对CPU运行了解的多了一些，了解了代码运行的原理，了解了二进制指令在集成电路里面的实现。<br>才发现，了解CPU的制作原理，多了解一些晶体管，对理解代码，理解计算机，作用是非常大的。<br>想象中不可能的事情，都是这些基石铺垫起来的。</p>\n<hr>\n<p>一个人的思维，决定了一个人的高度。<br>一举一动，笑或者哭，走或者跳，都是通过大脑发出指令，身体才能够执行。<br>哪些主观行动，是不通过人的思维控制的呢？神经反射之类的我们除外，它不属于主观行动。<br>一个人如何学习，如何赚钱，如何理财，如何钱生钱命转命。都是他的思维驱动他的行动的。<br>所以，努力的提升思维吧！<br>很多人说的，努力比不上选择，其实努力很廉价的。人只要主观愿意，随时可以很努力。你努力了，更多的人可以比你更努力。努力决定的仅仅是下限！<br>思维的提升，才能有效的不让努力白费，才能更好的实现人生价值。<br>都是行人。</p>\n","site":{"data":{}},"excerpt":"<p>如果你能看到这篇文章，我想你一定查阅了很多相关资料了。<br>如果你是对CPU的制作有一些模糊，或者希望通过其他博文来验证你的想法，那么下面一些认知或许对你有一些帮助。<br>大到宇宙飞船，小到PC、手机、冰箱，无一没有芯片的影子。<br>各位一定都对芯片有很多认知了，我们不需要多做说明，总之，没有芯片，就没有新社会吧。集成电路的创造，说第三次工业革命，反对的人应该不会多吧。</p>\n<h3 id=\"集成电路的制作\"><a href=\"#集成电路的制作\" class=\"headerlink\" title=\"集成电路的制作\"></a>集成电路的制作</h3><h4 id=\"理解一：硅-gt-晶圆\"><a href=\"#理解一：硅-gt-晶圆\" class=\"headerlink\" title=\"理解一：硅=&gt;晶圆\"></a>理解一：硅=&gt;晶圆</h4><p>原材料首当其冲的是高纯度硅。通过把高纯度的硅融化，用一个引子伸入容器，不断的让硅附着生长在引子上面。我们可以想象明矾的制作过程。<br>引子不断的往上提，最后一个很重的圆柱形硅淀就形成了。<br>这个圆柱形直径有10厘米+。<br>然后通过机器切割，从上往下，切割一个豁口或者一个边，这个豁口或者边，是为了客户进行晶圆制作的时候辨认方向用的。因为最终晶圆不是100%利用的，这个豁口或者边，是肯定不会用到的。<br>然后，对整个圆柱形硅切割成晶圆。每个晶圆对直径也还是10厘米+，但是厚度只有3毫米左右。这样的一片片晶圆，就是后面集成电路的原材料了。<br>所以，<strong>晶圆其实是很大的一个圆盘，比普通人的一张脸，还是要大一些的</strong>。</p>","more":"<h4 id=\"理解二：晶圆光刻腐蚀\"><a href=\"#理解二：晶圆光刻腐蚀\" class=\"headerlink\" title=\"理解二：晶圆光刻腐蚀\"></a>理解二：晶圆光刻腐蚀</h4><p>这个比较复杂，网上都有详细的说明。Intel和AMD也有公开视频说到一系列的复杂过程。<br>我不懂，我不做更多说明。大家可以自行查看。网上都是图，还是很方便理解和查看的。</p>\n<h4 id=\"理解三：晶体管数量\"><a href=\"#理解三：晶体管数量\" class=\"headerlink\" title=\"理解三：晶体管数量\"></a>理解三：晶体管数量</h4><p>很多人看了光刻腐蚀的图文甚至视频，认同CPU里面真的好复杂。为什么呢？很多人想，这样的操作，里面有好多好多个晶体管了吧。<br>其实，很多人都不敢放大自己的想象。那不是好多好多个，也不是几百万或者几千万甚至几亿个，而是几百亿个。<br>现在的技术，已经达到<strong>300亿个晶体管</strong>，在一个<strong>指甲盖大小的CPU</strong>里面了。<br>这些晶体管，就组合成了集成电路，不同数量的晶体管，组合成不同用途的寄存器等。他们各司其职，为CPU的使命保驾护航。</p>\n<h4 id=\"理解四：晶圆良率\"><a href=\"#理解四：晶圆良率\" class=\"headerlink\" title=\"理解四：晶圆良率\"></a>理解四：晶圆良率</h4><p>请大家一定理解，一个晶圆，可不仅仅只能光刻腐蚀出来一个Die，而是很多个Die。不然这个芯片得多大啊。<br>我有个同事有次和我说，一个晶圆只能制作一个芯片，这个晶圆利用率为什么不能提高？<br>其实，我同事就没有理解晶圆的大小。一个比脸还大的盘子，怎么可能只能做一个指甲盖大小的芯片啊！<br>所以，一个芯片，可以做很多个Die，每个Die，经过测试包装后，就成了CPU。<br>所以，这里有一个良率的问题。为什么会有良率？因为几百亿个晶体管里面，有一部分的晶体管是不能使用的，而不是全部能正常工作。<br>很少有晶圆，上面光刻腐蚀的几十个Die都是完好的。<br>良率有一个现象，越靠近中心的位置，Die的良率越高。同时，越偏离中心，Die的良率越低。（中心，即晶圆的中心）<br>那每个晶圆里面，肯定有一些Die里面的晶体管是损坏的。是不是这些Die就不能用了呢？<br>不是的。<strong>同一批次的Die，那些晶体管损坏的产品，就相应的把这些损坏晶体管封死，变成低配的CPU。</strong><br>比如，同一批次的I7处理器，可能有些Die里面有两个Core（核心）损坏了。那么在后面测试的时候，就封死这两个核，变成I5处理器。<br>商人都是无利不起早的，他们为什么要这么做？因为这样做一来商家可以赚更多钱，不然那么多Die不都是扔了嘛。二来降低了用户的价格，东西多一些价格总归会将一些的。<br>网上有人提到过，那么有没有一个晶圆只做一个Die的呢？<br>有的。只是这个成本太高的。因为良率的问题，这个Die得多么精密的仪器才能够保障其晶体管不受损坏。因为这个Die占据一整个晶圆，面积大了，坏点几率也相应增加了无数倍。几乎100%。<br>哪些情况下会使用这样的超大Die？宇宙飞船啊。高级东西当然需要高级的配件。</p>\n<h4 id=\"理解五：晶体管数量为什么目前保持300亿多一些，再也上不去了\"><a href=\"#理解五：晶体管数量为什么目前保持300亿多一些，再也上不去了\" class=\"headerlink\" title=\"理解五：晶体管数量为什么目前保持300亿多一些，再也上不去了\"></a>理解五：晶体管数量为什么目前保持300亿多一些，再也上不去了</h4><p>晶体管数量越多，计算能力也就越强，电脑的处理速度也就越快。那晶体管还能不能提升到上千亿？<br>不是技术上上不去了，技术上一直在突破。<br>而是<strong>散热上不去了</strong>。晶体管需要通电才能工作，能量总归是守恒的。CPU内部几百亿个晶体管，总归要散热的。<br>因为散热真的不能那么有效，晶体管数量再多下去，就不能工作了。晶体管的工作环境温度太高了。<br>散热有很多计算方式，比如降低电压等方案都可以有效的降低散热量。但是目前的确已经到瓶颈了，好多年没有前进了。</p>\n<h4 id=\"理解六：内存是不是也有很多晶体管？\"><a href=\"#理解六：内存是不是也有很多晶体管？\" class=\"headerlink\" title=\"理解六：内存是不是也有很多晶体管？\"></a>理解六：内存是不是也有很多晶体管？</h4><p>不仅仅内存有，显卡啥的都有。<br>而且他们都有很多很多的晶体管。<br>像内存，也是使用晶圆做的。<br>只不过晶圆做的CPU，里面的晶体管更多用来处理数据运算数据做控制使用。<br>而晶圆做的内存，里面的晶体管更多用来存储数据。<br>显卡？显卡里面有GPU啊。GPU和CPU本质上都是一样的，就是里面的运算处理单元因为工作模式不同，量级不同而已。<br>所以啊，他们里面都是有亿级单位的晶体管存在。</p>\n<h4 id=\"理解七：手机都比电脑还强劲了感觉，手机为什么那么小？手机里面有CPU吗？\"><a href=\"#理解七：手机都比电脑还强劲了感觉，手机为什么那么小？手机里面有CPU吗？\" class=\"headerlink\" title=\"理解七：手机都比电脑还强劲了感觉，手机为什么那么小？手机里面有CPU吗？\"></a>理解七：手机都比电脑还强劲了感觉，手机为什么那么小？手机里面有CPU吗？</h4><p>手机里面岂止有CPU，手机里面有和PC配件一样的东西。什么CPU、GPU、内存、磁盘、驱动等等，都是齐的。<br>手机就是缩小版的PC。<br>那问题又来了，为什么手机可以非常小？<br>说实话，这也是我的知识盲区。<br>我了解到的，因为AMD它们的CPU能耗相对手机来说还是太大了，像Apple的手机芯片就是走的新的架构，为ARM架构。<br>CPU的架构是CPU性能非常大的制约因素。而Intel的架构就听说比AMD优秀非常多。<br>手机里面的CPU呢，还不是单独存在的。手机厂商，会把内存、显卡、驱动、CPU等等，全部封装在一个大的芯片里面。他们是非常集中的一体，不像PC上面想换内存条了，再买一个就好了。</p>\n<p>我是写代码的，一年前研究CPU运行原理的时候，看到了CPU的制作过程。<br>开始很以为惊奇，科技真的伟大。<br>后面对CPU运行了解的多了一些，了解了代码运行的原理，了解了二进制指令在集成电路里面的实现。<br>才发现，了解CPU的制作原理，多了解一些晶体管，对理解代码，理解计算机，作用是非常大的。<br>想象中不可能的事情，都是这些基石铺垫起来的。</p>\n<hr>\n<p>一个人的思维，决定了一个人的高度。<br>一举一动，笑或者哭，走或者跳，都是通过大脑发出指令，身体才能够执行。<br>哪些主观行动，是不通过人的思维控制的呢？神经反射之类的我们除外，它不属于主观行动。<br>一个人如何学习，如何赚钱，如何理财，如何钱生钱命转命。都是他的思维驱动他的行动的。<br>所以，努力的提升思维吧！<br>很多人说的，努力比不上选择，其实努力很廉价的。人只要主观愿意，随时可以很努力。你努力了，更多的人可以比你更努力。努力决定的仅仅是下限！<br>思维的提升，才能有效的不让努力白费，才能更好的实现人生价值。<br>都是行人。</p>"},{"title":"iOS内存原理","date":"2019-01-06T03:30:48.000Z","keywords":"内存管理、内存释放、ARC、ARC内存原理","_content":"\niOS的内存管理，绝对是很多很多iOSer人的误区。\n因为最近几年的iOS开发人员，都没有经历过MRC年代了。\nMRC年代的内存总是不好管理，所以ARC帮我们做了很多事情。ARC做了很多事情让内存管理更加精准优秀外，却使得iOS开发人员不知道内存是怎么管理的了。\n真正的内存管理，一定需要回到MRC下面去理解，根本思想是：**谁创建、谁释放、谁引用、谁释放**。\n**内存释放的唯一途径是：引用计数=0**\n自动释放池仅仅做了“谁创建谁释放”里面的一部分。\n**ARC帮我们做了“谁创建、谁释放、谁引用、谁释放”四个部分。**\n**ARC帮我们写了很多管理内存的代码，包括autolease、retain、release等。如果不理解MRC下面他们的含义，是不可能理解iOS内存管理的。**\n**网络上面大多介绍的autolease、autoleasepool、autoleasepoolpage，只是自动释放池部分，只是iOS内存管理的一个面。**\n内存不是绝对安全释放的，还牵涉到内存区，如果字符串定义到了堆区，释放是及时的，定义到了栈区和常量区，就不那么及时了（虽然引用计数=0，代码也不能在调用，但是真实内存还在）。","source":"_posts/iOS内存原理.md","raw":"---\ntitle: iOS内存原理\ndate: 2019-01-06 11:30:48\ncategories:\n- 技术\ntags:\n- iOS\nkeywords: 内存管理、内存释放、ARC、ARC内存原理\n---\n\niOS的内存管理，绝对是很多很多iOSer人的误区。\n因为最近几年的iOS开发人员，都没有经历过MRC年代了。\nMRC年代的内存总是不好管理，所以ARC帮我们做了很多事情。ARC做了很多事情让内存管理更加精准优秀外，却使得iOS开发人员不知道内存是怎么管理的了。\n真正的内存管理，一定需要回到MRC下面去理解，根本思想是：**谁创建、谁释放、谁引用、谁释放**。\n**内存释放的唯一途径是：引用计数=0**\n自动释放池仅仅做了“谁创建谁释放”里面的一部分。\n**ARC帮我们做了“谁创建、谁释放、谁引用、谁释放”四个部分。**\n**ARC帮我们写了很多管理内存的代码，包括autolease、retain、release等。如果不理解MRC下面他们的含义，是不可能理解iOS内存管理的。**\n**网络上面大多介绍的autolease、autoleasepool、autoleasepoolpage，只是自动释放池部分，只是iOS内存管理的一个面。**\n内存不是绝对安全释放的，还牵涉到内存区，如果字符串定义到了堆区，释放是及时的，定义到了栈区和常量区，就不那么及时了（虽然引用计数=0，代码也不能在调用，但是真实内存还在）。","slug":"iOS内存原理","published":1,"updated":"2019-03-06T03:42:40.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjytswkyw0006odgpw1n8p5i4","content":"<p>iOS的内存管理，绝对是很多很多iOSer人的误区。<br>因为最近几年的iOS开发人员，都没有经历过MRC年代了。<br>MRC年代的内存总是不好管理，所以ARC帮我们做了很多事情。ARC做了很多事情让内存管理更加精准优秀外，却使得iOS开发人员不知道内存是怎么管理的了。<br>真正的内存管理，一定需要回到MRC下面去理解，根本思想是：<strong>谁创建、谁释放、谁引用、谁释放</strong>。<br><strong>内存释放的唯一途径是：引用计数=0</strong><br>自动释放池仅仅做了“谁创建谁释放”里面的一部分。<br><strong>ARC帮我们做了“谁创建、谁释放、谁引用、谁释放”四个部分。</strong><br><strong>ARC帮我们写了很多管理内存的代码，包括autolease、retain、release等。如果不理解MRC下面他们的含义，是不可能理解iOS内存管理的。</strong><br><strong>网络上面大多介绍的autolease、autoleasepool、autoleasepoolpage，只是自动释放池部分，只是iOS内存管理的一个面。</strong><br>内存不是绝对安全释放的，还牵涉到内存区，如果字符串定义到了堆区，释放是及时的，定义到了栈区和常量区，就不那么及时了（虽然引用计数=0，代码也不能在调用，但是真实内存还在）。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>iOS的内存管理，绝对是很多很多iOSer人的误区。<br>因为最近几年的iOS开发人员，都没有经历过MRC年代了。<br>MRC年代的内存总是不好管理，所以ARC帮我们做了很多事情。ARC做了很多事情让内存管理更加精准优秀外，却使得iOS开发人员不知道内存是怎么管理的了。<br>真正的内存管理，一定需要回到MRC下面去理解，根本思想是：<strong>谁创建、谁释放、谁引用、谁释放</strong>。<br><strong>内存释放的唯一途径是：引用计数=0</strong><br>自动释放池仅仅做了“谁创建谁释放”里面的一部分。<br><strong>ARC帮我们做了“谁创建、谁释放、谁引用、谁释放”四个部分。</strong><br><strong>ARC帮我们写了很多管理内存的代码，包括autolease、retain、release等。如果不理解MRC下面他们的含义，是不可能理解iOS内存管理的。</strong><br><strong>网络上面大多介绍的autolease、autoleasepool、autoleasepoolpage，只是自动释放池部分，只是iOS内存管理的一个面。</strong><br>内存不是绝对安全释放的，还牵涉到内存区，如果字符串定义到了堆区，释放是及时的，定义到了栈区和常量区，就不那么及时了（虽然引用计数=0，代码也不能在调用，但是真实内存还在）。</p>\n"},{"title":"互联网网络传输协议理解坑点","date":"2019-05-25T11:53:48.000Z","keywords":"网络,计算机原理,HTTP,HTTPS,TCP,UDP,Socket,套接字,IP,NAT","_content":"\n写技术分析点费事费力，尤其配图，牺牲太大。我也就是一个懒人，都是文字说明，毕竟文字的穿透力还是更强些的。\n\n备注：网络协议博大精深，是整个互联网的根基。不是伟大的工程师，都不敢妄语，更何况我这小虾。我写的有错的，希望看到的人留言指正，我会随时更正。\n\n#### 理解网络协议，怎么才算初步入门？\n\n网络分层是什么样的？你能说明7层和5层网络模型，并且能够闭着眼睛说出这些分层名字和对应的协议名称。\nTCP的三次握手，是怎么进行的？你能说明三次消息通话的流程，并且知道客户端在第二次握手的时候已经确定连接并且可以发送数据。\nTCP三次握手的时候，有没有网络层参与？你能说明不仅仅有参与，并且理解网络分层的真实含义。知道可以有下层没上层，但是决定不可能有上层没下层。\nTCP和UDP相比，有哪些特性？你能说明通道连接、丢包控制、流量控制、顺序控制、拥堵控制五个关键词，并且知道其中或者全部的简单原理。\n传输层、网络层、Mac层各自填补了哪些重要信息？你能说明端口、ip、mac地址，并且知道他们为什么是非缺不可的原因。\nHTTP和TCP的关系？你能说明他们是巴基斯坦和卡巴斯基的关系，并且听说过他们二者之间的Socket纽扣。\nIP的用途和原理？你能说明根据DNS解析IP的过程及原理，知道公网IP和私有IP的联系，知道网络号、主机号、子网掩码，听说及了解IP在网络传输过程中的重要性。\n如果上面问题，你能回答到后面解释的部分，那也就是初步入门了。因为你知道网络这一块浅显层面上是怎么玩的了。\n\n<!-- more -->\n#### 理解网络协议，怎么才算基本入门？\n\n知道一个网络请求的生命周期，从DNS多层解析拿到IP地址，到申请套接字，到三次握手连接套接字通道，到网络五层协议分层原理，到网卡进行二进制包传输，到网卡发出光信号传输数据，到集线器进行以太网数据传输，到交换机进行以太网数据传输，到路由器根据IP地址进行跨子网数据传输，到中继器进行光信号的增强防止波形消耗，到经历多个路由器节点的NAT规则，到防火墙根据包的包头进行的各种控制处理，到服务器的网卡收到数据包，到服务器的五层协议数据解析，到服务器套接字，到数据缓冲区，到应用程序处理，然后一个大折回通过网络返回用户请求数据。\n\n上面每一个知识点，都是一个学科了，一个产业链，甚至一个专家可能需要多年进行研究的点。\n\n如果上面流程，你能清晰的或者近似清晰的在大脑里描述出来，那就是基本入门了。精通算不上，能够和别人简单的撕逼就差不多了。\n这时你已经能够通过网络知识，分析或者解决一些网络问题了。\n\n#### 理解网络协议，怎么才算正式入门？\n\n说实话，网络协议博大精深，自我感觉我还没有正式入门。So，我也不知道。因为我不知道后面还有多少路要走，所以我不知道正式入门的门槛在哪。\n\n#### TCP和UDP到底是什么关系？\n\n\n\n#### HTTP/S和TCP又是什么关系？\n\n\n#### 套接字是什么东西？\n\n\n\n\n#### IM里面的Socket通信指的是什么？","source":"_posts/互联网网络传输协议理解坑点.md","raw":"---\ntitle: 互联网网络传输协议理解坑点\ndate: 2019-05-25 19:53:48\ncategories:\n- 技术\ntags:\n- 网络\n- 计算机原理\nkeywords: 网络,计算机原理,HTTP,HTTPS,TCP,UDP,Socket,套接字,IP,NAT\n---\n\n写技术分析点费事费力，尤其配图，牺牲太大。我也就是一个懒人，都是文字说明，毕竟文字的穿透力还是更强些的。\n\n备注：网络协议博大精深，是整个互联网的根基。不是伟大的工程师，都不敢妄语，更何况我这小虾。我写的有错的，希望看到的人留言指正，我会随时更正。\n\n#### 理解网络协议，怎么才算初步入门？\n\n网络分层是什么样的？你能说明7层和5层网络模型，并且能够闭着眼睛说出这些分层名字和对应的协议名称。\nTCP的三次握手，是怎么进行的？你能说明三次消息通话的流程，并且知道客户端在第二次握手的时候已经确定连接并且可以发送数据。\nTCP三次握手的时候，有没有网络层参与？你能说明不仅仅有参与，并且理解网络分层的真实含义。知道可以有下层没上层，但是决定不可能有上层没下层。\nTCP和UDP相比，有哪些特性？你能说明通道连接、丢包控制、流量控制、顺序控制、拥堵控制五个关键词，并且知道其中或者全部的简单原理。\n传输层、网络层、Mac层各自填补了哪些重要信息？你能说明端口、ip、mac地址，并且知道他们为什么是非缺不可的原因。\nHTTP和TCP的关系？你能说明他们是巴基斯坦和卡巴斯基的关系，并且听说过他们二者之间的Socket纽扣。\nIP的用途和原理？你能说明根据DNS解析IP的过程及原理，知道公网IP和私有IP的联系，知道网络号、主机号、子网掩码，听说及了解IP在网络传输过程中的重要性。\n如果上面问题，你能回答到后面解释的部分，那也就是初步入门了。因为你知道网络这一块浅显层面上是怎么玩的了。\n\n<!-- more -->\n#### 理解网络协议，怎么才算基本入门？\n\n知道一个网络请求的生命周期，从DNS多层解析拿到IP地址，到申请套接字，到三次握手连接套接字通道，到网络五层协议分层原理，到网卡进行二进制包传输，到网卡发出光信号传输数据，到集线器进行以太网数据传输，到交换机进行以太网数据传输，到路由器根据IP地址进行跨子网数据传输，到中继器进行光信号的增强防止波形消耗，到经历多个路由器节点的NAT规则，到防火墙根据包的包头进行的各种控制处理，到服务器的网卡收到数据包，到服务器的五层协议数据解析，到服务器套接字，到数据缓冲区，到应用程序处理，然后一个大折回通过网络返回用户请求数据。\n\n上面每一个知识点，都是一个学科了，一个产业链，甚至一个专家可能需要多年进行研究的点。\n\n如果上面流程，你能清晰的或者近似清晰的在大脑里描述出来，那就是基本入门了。精通算不上，能够和别人简单的撕逼就差不多了。\n这时你已经能够通过网络知识，分析或者解决一些网络问题了。\n\n#### 理解网络协议，怎么才算正式入门？\n\n说实话，网络协议博大精深，自我感觉我还没有正式入门。So，我也不知道。因为我不知道后面还有多少路要走，所以我不知道正式入门的门槛在哪。\n\n#### TCP和UDP到底是什么关系？\n\n\n\n#### HTTP/S和TCP又是什么关系？\n\n\n#### 套接字是什么东西？\n\n\n\n\n#### IM里面的Socket通信指的是什么？","slug":"互联网网络传输协议理解坑点","published":1,"updated":"2019-05-26T14:05:20.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjytswkyy0007odgp5qohotkx","content":"<p>写技术分析点费事费力，尤其配图，牺牲太大。我也就是一个懒人，都是文字说明，毕竟文字的穿透力还是更强些的。</p>\n<p>备注：网络协议博大精深，是整个互联网的根基。不是伟大的工程师，都不敢妄语，更何况我这小虾。我写的有错的，希望看到的人留言指正，我会随时更正。</p>\n<h4 id=\"理解网络协议，怎么才算初步入门？\"><a href=\"#理解网络协议，怎么才算初步入门？\" class=\"headerlink\" title=\"理解网络协议，怎么才算初步入门？\"></a>理解网络协议，怎么才算初步入门？</h4><p>网络分层是什么样的？你能说明7层和5层网络模型，并且能够闭着眼睛说出这些分层名字和对应的协议名称。<br>TCP的三次握手，是怎么进行的？你能说明三次消息通话的流程，并且知道客户端在第二次握手的时候已经确定连接并且可以发送数据。<br>TCP三次握手的时候，有没有网络层参与？你能说明不仅仅有参与，并且理解网络分层的真实含义。知道可以有下层没上层，但是决定不可能有上层没下层。<br>TCP和UDP相比，有哪些特性？你能说明通道连接、丢包控制、流量控制、顺序控制、拥堵控制五个关键词，并且知道其中或者全部的简单原理。<br>传输层、网络层、Mac层各自填补了哪些重要信息？你能说明端口、ip、mac地址，并且知道他们为什么是非缺不可的原因。<br>HTTP和TCP的关系？你能说明他们是巴基斯坦和卡巴斯基的关系，并且听说过他们二者之间的Socket纽扣。<br>IP的用途和原理？你能说明根据DNS解析IP的过程及原理，知道公网IP和私有IP的联系，知道网络号、主机号、子网掩码，听说及了解IP在网络传输过程中的重要性。<br>如果上面问题，你能回答到后面解释的部分，那也就是初步入门了。因为你知道网络这一块浅显层面上是怎么玩的了。</p>\n<a id=\"more\"></a>\n<h4 id=\"理解网络协议，怎么才算基本入门？\"><a href=\"#理解网络协议，怎么才算基本入门？\" class=\"headerlink\" title=\"理解网络协议，怎么才算基本入门？\"></a>理解网络协议，怎么才算基本入门？</h4><p>知道一个网络请求的生命周期，从DNS多层解析拿到IP地址，到申请套接字，到三次握手连接套接字通道，到网络五层协议分层原理，到网卡进行二进制包传输，到网卡发出光信号传输数据，到集线器进行以太网数据传输，到交换机进行以太网数据传输，到路由器根据IP地址进行跨子网数据传输，到中继器进行光信号的增强防止波形消耗，到经历多个路由器节点的NAT规则，到防火墙根据包的包头进行的各种控制处理，到服务器的网卡收到数据包，到服务器的五层协议数据解析，到服务器套接字，到数据缓冲区，到应用程序处理，然后一个大折回通过网络返回用户请求数据。</p>\n<p>上面每一个知识点，都是一个学科了，一个产业链，甚至一个专家可能需要多年进行研究的点。</p>\n<p>如果上面流程，你能清晰的或者近似清晰的在大脑里描述出来，那就是基本入门了。精通算不上，能够和别人简单的撕逼就差不多了。<br>这时你已经能够通过网络知识，分析或者解决一些网络问题了。</p>\n<h4 id=\"理解网络协议，怎么才算正式入门？\"><a href=\"#理解网络协议，怎么才算正式入门？\" class=\"headerlink\" title=\"理解网络协议，怎么才算正式入门？\"></a>理解网络协议，怎么才算正式入门？</h4><p>说实话，网络协议博大精深，自我感觉我还没有正式入门。So，我也不知道。因为我不知道后面还有多少路要走，所以我不知道正式入门的门槛在哪。</p>\n<h4 id=\"TCP和UDP到底是什么关系？\"><a href=\"#TCP和UDP到底是什么关系？\" class=\"headerlink\" title=\"TCP和UDP到底是什么关系？\"></a>TCP和UDP到底是什么关系？</h4><h4 id=\"HTTP-S和TCP又是什么关系？\"><a href=\"#HTTP-S和TCP又是什么关系？\" class=\"headerlink\" title=\"HTTP/S和TCP又是什么关系？\"></a>HTTP/S和TCP又是什么关系？</h4><h4 id=\"套接字是什么东西？\"><a href=\"#套接字是什么东西？\" class=\"headerlink\" title=\"套接字是什么东西？\"></a>套接字是什么东西？</h4><h4 id=\"IM里面的Socket通信指的是什么？\"><a href=\"#IM里面的Socket通信指的是什么？\" class=\"headerlink\" title=\"IM里面的Socket通信指的是什么？\"></a>IM里面的Socket通信指的是什么？</h4>","site":{"data":{}},"excerpt":"<p>写技术分析点费事费力，尤其配图，牺牲太大。我也就是一个懒人，都是文字说明，毕竟文字的穿透力还是更强些的。</p>\n<p>备注：网络协议博大精深，是整个互联网的根基。不是伟大的工程师，都不敢妄语，更何况我这小虾。我写的有错的，希望看到的人留言指正，我会随时更正。</p>\n<h4 id=\"理解网络协议，怎么才算初步入门？\"><a href=\"#理解网络协议，怎么才算初步入门？\" class=\"headerlink\" title=\"理解网络协议，怎么才算初步入门？\"></a>理解网络协议，怎么才算初步入门？</h4><p>网络分层是什么样的？你能说明7层和5层网络模型，并且能够闭着眼睛说出这些分层名字和对应的协议名称。<br>TCP的三次握手，是怎么进行的？你能说明三次消息通话的流程，并且知道客户端在第二次握手的时候已经确定连接并且可以发送数据。<br>TCP三次握手的时候，有没有网络层参与？你能说明不仅仅有参与，并且理解网络分层的真实含义。知道可以有下层没上层，但是决定不可能有上层没下层。<br>TCP和UDP相比，有哪些特性？你能说明通道连接、丢包控制、流量控制、顺序控制、拥堵控制五个关键词，并且知道其中或者全部的简单原理。<br>传输层、网络层、Mac层各自填补了哪些重要信息？你能说明端口、ip、mac地址，并且知道他们为什么是非缺不可的原因。<br>HTTP和TCP的关系？你能说明他们是巴基斯坦和卡巴斯基的关系，并且听说过他们二者之间的Socket纽扣。<br>IP的用途和原理？你能说明根据DNS解析IP的过程及原理，知道公网IP和私有IP的联系，知道网络号、主机号、子网掩码，听说及了解IP在网络传输过程中的重要性。<br>如果上面问题，你能回答到后面解释的部分，那也就是初步入门了。因为你知道网络这一块浅显层面上是怎么玩的了。</p>","more":"<h4 id=\"理解网络协议，怎么才算基本入门？\"><a href=\"#理解网络协议，怎么才算基本入门？\" class=\"headerlink\" title=\"理解网络协议，怎么才算基本入门？\"></a>理解网络协议，怎么才算基本入门？</h4><p>知道一个网络请求的生命周期，从DNS多层解析拿到IP地址，到申请套接字，到三次握手连接套接字通道，到网络五层协议分层原理，到网卡进行二进制包传输，到网卡发出光信号传输数据，到集线器进行以太网数据传输，到交换机进行以太网数据传输，到路由器根据IP地址进行跨子网数据传输，到中继器进行光信号的增强防止波形消耗，到经历多个路由器节点的NAT规则，到防火墙根据包的包头进行的各种控制处理，到服务器的网卡收到数据包，到服务器的五层协议数据解析，到服务器套接字，到数据缓冲区，到应用程序处理，然后一个大折回通过网络返回用户请求数据。</p>\n<p>上面每一个知识点，都是一个学科了，一个产业链，甚至一个专家可能需要多年进行研究的点。</p>\n<p>如果上面流程，你能清晰的或者近似清晰的在大脑里描述出来，那就是基本入门了。精通算不上，能够和别人简单的撕逼就差不多了。<br>这时你已经能够通过网络知识，分析或者解决一些网络问题了。</p>\n<h4 id=\"理解网络协议，怎么才算正式入门？\"><a href=\"#理解网络协议，怎么才算正式入门？\" class=\"headerlink\" title=\"理解网络协议，怎么才算正式入门？\"></a>理解网络协议，怎么才算正式入门？</h4><p>说实话，网络协议博大精深，自我感觉我还没有正式入门。So，我也不知道。因为我不知道后面还有多少路要走，所以我不知道正式入门的门槛在哪。</p>\n<h4 id=\"TCP和UDP到底是什么关系？\"><a href=\"#TCP和UDP到底是什么关系？\" class=\"headerlink\" title=\"TCP和UDP到底是什么关系？\"></a>TCP和UDP到底是什么关系？</h4><h4 id=\"HTTP-S和TCP又是什么关系？\"><a href=\"#HTTP-S和TCP又是什么关系？\" class=\"headerlink\" title=\"HTTP/S和TCP又是什么关系？\"></a>HTTP/S和TCP又是什么关系？</h4><h4 id=\"套接字是什么东西？\"><a href=\"#套接字是什么东西？\" class=\"headerlink\" title=\"套接字是什么东西？\"></a>套接字是什么东西？</h4><h4 id=\"IM里面的Socket通信指的是什么？\"><a href=\"#IM里面的Socket通信指的是什么？\" class=\"headerlink\" title=\"IM里面的Socket通信指的是什么？\"></a>IM里面的Socket通信指的是什么？</h4>"},{"title":"努力和天赋","date":"2019-02-24T10:43:21.000Z","keywords":"努力,天赋","_content":"\n今天，在公司卫生间里面，看到了这个“每天努力0.01”和“每天懈怠0.01”一年后的差距，颇为感触。\n不过我不是因为这两个差距的比较产生心里的鸡汤，而是引发了一些关于努力的思考。\n什么算是努力？好人一定要好报吗？\n\n<!-- more -->\n\n我看到的差距如下图所示：\n![](/images/努力和天赋.JPG)\n\n首先，我产生了下面几点思考：\n1. 每天的0.01，在365年后的差距计算里面，为什么是累乘？而不是累加或者其他计算方式？\n2. 比较两者的差距，是否应该用除法表示他们之间的倍数？这样对于比较差距是否合理？\n3. 什么才算是努力？努力必然和方式、时间、付出、天赋等因素相互参杂，而努力后的结果是否可以评判一个人的努力程度？\n4. 一个人在某方面的成功，和努力的关联有多大？\n\n### 不要被鸡汤迷失了方向\n\n努力，可以上升到一个民族的方向。中国民族努力奋斗这么多年，在世界上有声望，没有入侵和战乱，大大部分国民吃喝满足。这是几代中国人民共同努力的结果。\n努力，也是每个人应该准守的人生基本原则。不努力的人才，苟活有何意义？很多人虚度时光，你也无需指责，他的人生里没有你，你何须指手画脚？\n\n但是图中的努力，有些误导人。为什么365天的0.01努力，不是加法，而是乘法？\n为了鸡汤而可以制造的假象就迷惑人了。`1.01*365/0.99*365`，也就是`1.02020202`这样子，远远没有`1480`这么大。\n\n所以我想说，这个鸡汤太过分了，努力固然重要，但是绝没有天地距离这么夸张。努力和结果，有“方式、时间、付出、天赋”等条件约束，不是简单的两个字。\n\n### 何为努力？\n\n万事皆有方式，如学习方式、工作方式。如果你在努力的过程中脑子里昏昏的始终没有清晰过，那你的努力只能是虚度时光并假装自己在辛苦，你欺骗了别人，也欺骗了自己。\n这样的努力是廉价可耻的，当然我们局外人没有权利指责，那或许是你刻意制造的生活呢？\n\n努力，需要方法。找到一个适合自己的有效果的方法，就已经是走了大捷径，跑了快速道。而且这个方法可以便随你各个方面，时间上或许就是一生。\n没有方法在努力的人，始终在埋冤，在怨天尤人，说自己累，不相信技巧。\n有方法在努力的人，都说这个方法好，努力原来有捷径可走。\n方法不是固定的，每个人都会有自己的方法，我们都要找到它。\n比如：与人沟通会增加见识产生灵感获得额外消息，站在巨人的肩膀上会走的更快更高，寻找合适的资源工具可以节省大量的时间等。\n\n### 努力一定有好的回报？\n\n是的。努力一定有好的回报。\n\n你的努力，一定会在潜移默化里改变你一些什么，最直接等影响或许就是你成功了，财富自由，家庭辛福。\n但是努力，绝对不会让你登上人生巅峰，这个是一定要摆正好的心态问题。\n人，努力到一个点后，就开始怀疑自己了。为什么我的努力没有达到我的预期？我耗费了自己这么多的精力，却没有达到我想要的，我死了算了。\n这个时候，一定要摆正心态，是不是你的目标太高了，以至于你的努力弥补不了这个高度的空白，需要`天赋`来支撑了。\n\n天赋这玩意就很奇妙了，不管你同意不同意这个观点，它就摆在那里，甚至是真真实实的摆在那里。\n某个方向的天赋可以让你脑壳在这个方向上高速运转，得天独厚的优越感。\n从小时候和你一起学习的同学，到长大后和你一起工作的同事，甚至很多你认识的创业老板们，我们大家都会见过或者听过有一些有天赋的朋友。\n如果你把那些人的卓越，当作努力，那不是对自己付出的努力的唾弃和践踏吗？不要不尊重自己，那就是人家的天赋，可惜不在你身上而已。\n\n摆正好心态，努力过好自己的一生，就是对自己的不辜负，对自己生命的尊重。\n如果你是某个方向的天赋，请一定继续努力，用这个天赋，帮助更多需要帮助的人。\n如果你没有那个天赋，请一定继续努力，在这个方向上超过更多人，首先让自己和家人幸福，有条件了一定帮助更多需要帮助的人。\n\n### 努力 PK 天赋\n\n某个方向上的天赋人才，没有想象的那么多，金字塔的顶端就那么大。\n你自认为有天赋的那些同学或者朋友，或许仅仅是努力的方式比你好一些，努力的时间比你多一些。人家比你更努力。\n不要低估了自己的努力，也不要高估了周围人的天赋。\n\n天赋决定了你的上限，\n努力决定了你的下限。\n\n___\n\n最近听到一个可怕的消息，\n你的努力方式，也是由你的基因决定的。\n从你出生的那刻起，95%的命运已经确定了。\n我不看鸡汤就是因为幸存者法则，\n但是没想到命是这么的严酷。\n加油努力吧，不然就是一个废人了！","source":"_posts/努力和天赋.md","raw":"---\ntitle: 努力和天赋\ndate: 2019-02-24 18:43:21\ncategories:\n- 观点\ntags:\n- Life\nkeywords: 努力,天赋\n---\n\n今天，在公司卫生间里面，看到了这个“每天努力0.01”和“每天懈怠0.01”一年后的差距，颇为感触。\n不过我不是因为这两个差距的比较产生心里的鸡汤，而是引发了一些关于努力的思考。\n什么算是努力？好人一定要好报吗？\n\n<!-- more -->\n\n我看到的差距如下图所示：\n![](/images/努力和天赋.JPG)\n\n首先，我产生了下面几点思考：\n1. 每天的0.01，在365年后的差距计算里面，为什么是累乘？而不是累加或者其他计算方式？\n2. 比较两者的差距，是否应该用除法表示他们之间的倍数？这样对于比较差距是否合理？\n3. 什么才算是努力？努力必然和方式、时间、付出、天赋等因素相互参杂，而努力后的结果是否可以评判一个人的努力程度？\n4. 一个人在某方面的成功，和努力的关联有多大？\n\n### 不要被鸡汤迷失了方向\n\n努力，可以上升到一个民族的方向。中国民族努力奋斗这么多年，在世界上有声望，没有入侵和战乱，大大部分国民吃喝满足。这是几代中国人民共同努力的结果。\n努力，也是每个人应该准守的人生基本原则。不努力的人才，苟活有何意义？很多人虚度时光，你也无需指责，他的人生里没有你，你何须指手画脚？\n\n但是图中的努力，有些误导人。为什么365天的0.01努力，不是加法，而是乘法？\n为了鸡汤而可以制造的假象就迷惑人了。`1.01*365/0.99*365`，也就是`1.02020202`这样子，远远没有`1480`这么大。\n\n所以我想说，这个鸡汤太过分了，努力固然重要，但是绝没有天地距离这么夸张。努力和结果，有“方式、时间、付出、天赋”等条件约束，不是简单的两个字。\n\n### 何为努力？\n\n万事皆有方式，如学习方式、工作方式。如果你在努力的过程中脑子里昏昏的始终没有清晰过，那你的努力只能是虚度时光并假装自己在辛苦，你欺骗了别人，也欺骗了自己。\n这样的努力是廉价可耻的，当然我们局外人没有权利指责，那或许是你刻意制造的生活呢？\n\n努力，需要方法。找到一个适合自己的有效果的方法，就已经是走了大捷径，跑了快速道。而且这个方法可以便随你各个方面，时间上或许就是一生。\n没有方法在努力的人，始终在埋冤，在怨天尤人，说自己累，不相信技巧。\n有方法在努力的人，都说这个方法好，努力原来有捷径可走。\n方法不是固定的，每个人都会有自己的方法，我们都要找到它。\n比如：与人沟通会增加见识产生灵感获得额外消息，站在巨人的肩膀上会走的更快更高，寻找合适的资源工具可以节省大量的时间等。\n\n### 努力一定有好的回报？\n\n是的。努力一定有好的回报。\n\n你的努力，一定会在潜移默化里改变你一些什么，最直接等影响或许就是你成功了，财富自由，家庭辛福。\n但是努力，绝对不会让你登上人生巅峰，这个是一定要摆正好的心态问题。\n人，努力到一个点后，就开始怀疑自己了。为什么我的努力没有达到我的预期？我耗费了自己这么多的精力，却没有达到我想要的，我死了算了。\n这个时候，一定要摆正心态，是不是你的目标太高了，以至于你的努力弥补不了这个高度的空白，需要`天赋`来支撑了。\n\n天赋这玩意就很奇妙了，不管你同意不同意这个观点，它就摆在那里，甚至是真真实实的摆在那里。\n某个方向的天赋可以让你脑壳在这个方向上高速运转，得天独厚的优越感。\n从小时候和你一起学习的同学，到长大后和你一起工作的同事，甚至很多你认识的创业老板们，我们大家都会见过或者听过有一些有天赋的朋友。\n如果你把那些人的卓越，当作努力，那不是对自己付出的努力的唾弃和践踏吗？不要不尊重自己，那就是人家的天赋，可惜不在你身上而已。\n\n摆正好心态，努力过好自己的一生，就是对自己的不辜负，对自己生命的尊重。\n如果你是某个方向的天赋，请一定继续努力，用这个天赋，帮助更多需要帮助的人。\n如果你没有那个天赋，请一定继续努力，在这个方向上超过更多人，首先让自己和家人幸福，有条件了一定帮助更多需要帮助的人。\n\n### 努力 PK 天赋\n\n某个方向上的天赋人才，没有想象的那么多，金字塔的顶端就那么大。\n你自认为有天赋的那些同学或者朋友，或许仅仅是努力的方式比你好一些，努力的时间比你多一些。人家比你更努力。\n不要低估了自己的努力，也不要高估了周围人的天赋。\n\n天赋决定了你的上限，\n努力决定了你的下限。\n\n___\n\n最近听到一个可怕的消息，\n你的努力方式，也是由你的基因决定的。\n从你出生的那刻起，95%的命运已经确定了。\n我不看鸡汤就是因为幸存者法则，\n但是没想到命是这么的严酷。\n加油努力吧，不然就是一个废人了！","slug":"努力和天赋","published":1,"updated":"2019-05-21T05:14:11.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjytswkyz0008odgp7u1ffdy9","content":"<p>今天，在公司卫生间里面，看到了这个“每天努力0.01”和“每天懈怠0.01”一年后的差距，颇为感触。<br>不过我不是因为这两个差距的比较产生心里的鸡汤，而是引发了一些关于努力的思考。<br>什么算是努力？好人一定要好报吗？</p>\n<a id=\"more\"></a>\n\n<p>我看到的差距如下图所示：<br><img src=\"/images/%E5%8A%AA%E5%8A%9B%E5%92%8C%E5%A4%A9%E8%B5%8B.JPG\" alt></p>\n<p>首先，我产生了下面几点思考：</p>\n<ol>\n<li>每天的0.01，在365年后的差距计算里面，为什么是累乘？而不是累加或者其他计算方式？</li>\n<li>比较两者的差距，是否应该用除法表示他们之间的倍数？这样对于比较差距是否合理？</li>\n<li>什么才算是努力？努力必然和方式、时间、付出、天赋等因素相互参杂，而努力后的结果是否可以评判一个人的努力程度？</li>\n<li>一个人在某方面的成功，和努力的关联有多大？</li>\n</ol>\n<h3 id=\"不要被鸡汤迷失了方向\"><a href=\"#不要被鸡汤迷失了方向\" class=\"headerlink\" title=\"不要被鸡汤迷失了方向\"></a>不要被鸡汤迷失了方向</h3><p>努力，可以上升到一个民族的方向。中国民族努力奋斗这么多年，在世界上有声望，没有入侵和战乱，大大部分国民吃喝满足。这是几代中国人民共同努力的结果。<br>努力，也是每个人应该准守的人生基本原则。不努力的人才，苟活有何意义？很多人虚度时光，你也无需指责，他的人生里没有你，你何须指手画脚？</p>\n<p>但是图中的努力，有些误导人。为什么365天的0.01努力，不是加法，而是乘法？<br>为了鸡汤而可以制造的假象就迷惑人了。<code>1.01*365/0.99*365</code>，也就是<code>1.02020202</code>这样子，远远没有<code>1480</code>这么大。</p>\n<p>所以我想说，这个鸡汤太过分了，努力固然重要，但是绝没有天地距离这么夸张。努力和结果，有“方式、时间、付出、天赋”等条件约束，不是简单的两个字。</p>\n<h3 id=\"何为努力？\"><a href=\"#何为努力？\" class=\"headerlink\" title=\"何为努力？\"></a>何为努力？</h3><p>万事皆有方式，如学习方式、工作方式。如果你在努力的过程中脑子里昏昏的始终没有清晰过，那你的努力只能是虚度时光并假装自己在辛苦，你欺骗了别人，也欺骗了自己。<br>这样的努力是廉价可耻的，当然我们局外人没有权利指责，那或许是你刻意制造的生活呢？</p>\n<p>努力，需要方法。找到一个适合自己的有效果的方法，就已经是走了大捷径，跑了快速道。而且这个方法可以便随你各个方面，时间上或许就是一生。<br>没有方法在努力的人，始终在埋冤，在怨天尤人，说自己累，不相信技巧。<br>有方法在努力的人，都说这个方法好，努力原来有捷径可走。<br>方法不是固定的，每个人都会有自己的方法，我们都要找到它。<br>比如：与人沟通会增加见识产生灵感获得额外消息，站在巨人的肩膀上会走的更快更高，寻找合适的资源工具可以节省大量的时间等。</p>\n<h3 id=\"努力一定有好的回报？\"><a href=\"#努力一定有好的回报？\" class=\"headerlink\" title=\"努力一定有好的回报？\"></a>努力一定有好的回报？</h3><p>是的。努力一定有好的回报。</p>\n<p>你的努力，一定会在潜移默化里改变你一些什么，最直接等影响或许就是你成功了，财富自由，家庭辛福。<br>但是努力，绝对不会让你登上人生巅峰，这个是一定要摆正好的心态问题。<br>人，努力到一个点后，就开始怀疑自己了。为什么我的努力没有达到我的预期？我耗费了自己这么多的精力，却没有达到我想要的，我死了算了。<br>这个时候，一定要摆正心态，是不是你的目标太高了，以至于你的努力弥补不了这个高度的空白，需要<code>天赋</code>来支撑了。</p>\n<p>天赋这玩意就很奇妙了，不管你同意不同意这个观点，它就摆在那里，甚至是真真实实的摆在那里。<br>某个方向的天赋可以让你脑壳在这个方向上高速运转，得天独厚的优越感。<br>从小时候和你一起学习的同学，到长大后和你一起工作的同事，甚至很多你认识的创业老板们，我们大家都会见过或者听过有一些有天赋的朋友。<br>如果你把那些人的卓越，当作努力，那不是对自己付出的努力的唾弃和践踏吗？不要不尊重自己，那就是人家的天赋，可惜不在你身上而已。</p>\n<p>摆正好心态，努力过好自己的一生，就是对自己的不辜负，对自己生命的尊重。<br>如果你是某个方向的天赋，请一定继续努力，用这个天赋，帮助更多需要帮助的人。<br>如果你没有那个天赋，请一定继续努力，在这个方向上超过更多人，首先让自己和家人幸福，有条件了一定帮助更多需要帮助的人。</p>\n<h3 id=\"努力-PK-天赋\"><a href=\"#努力-PK-天赋\" class=\"headerlink\" title=\"努力 PK 天赋\"></a>努力 PK 天赋</h3><p>某个方向上的天赋人才，没有想象的那么多，金字塔的顶端就那么大。<br>你自认为有天赋的那些同学或者朋友，或许仅仅是努力的方式比你好一些，努力的时间比你多一些。人家比你更努力。<br>不要低估了自己的努力，也不要高估了周围人的天赋。</p>\n<p>天赋决定了你的上限，<br>努力决定了你的下限。</p>\n<hr>\n<p>最近听到一个可怕的消息，<br>你的努力方式，也是由你的基因决定的。<br>从你出生的那刻起，95%的命运已经确定了。<br>我不看鸡汤就是因为幸存者法则，<br>但是没想到命是这么的严酷。<br>加油努力吧，不然就是一个废人了！</p>\n","site":{"data":{}},"excerpt":"<p>今天，在公司卫生间里面，看到了这个“每天努力0.01”和“每天懈怠0.01”一年后的差距，颇为感触。<br>不过我不是因为这两个差距的比较产生心里的鸡汤，而是引发了一些关于努力的思考。<br>什么算是努力？好人一定要好报吗？</p>","more":"<p>我看到的差距如下图所示：<br><img src=\"/images/%E5%8A%AA%E5%8A%9B%E5%92%8C%E5%A4%A9%E8%B5%8B.JPG\" alt></p>\n<p>首先，我产生了下面几点思考：</p>\n<ol>\n<li>每天的0.01，在365年后的差距计算里面，为什么是累乘？而不是累加或者其他计算方式？</li>\n<li>比较两者的差距，是否应该用除法表示他们之间的倍数？这样对于比较差距是否合理？</li>\n<li>什么才算是努力？努力必然和方式、时间、付出、天赋等因素相互参杂，而努力后的结果是否可以评判一个人的努力程度？</li>\n<li>一个人在某方面的成功，和努力的关联有多大？</li>\n</ol>\n<h3 id=\"不要被鸡汤迷失了方向\"><a href=\"#不要被鸡汤迷失了方向\" class=\"headerlink\" title=\"不要被鸡汤迷失了方向\"></a>不要被鸡汤迷失了方向</h3><p>努力，可以上升到一个民族的方向。中国民族努力奋斗这么多年，在世界上有声望，没有入侵和战乱，大大部分国民吃喝满足。这是几代中国人民共同努力的结果。<br>努力，也是每个人应该准守的人生基本原则。不努力的人才，苟活有何意义？很多人虚度时光，你也无需指责，他的人生里没有你，你何须指手画脚？</p>\n<p>但是图中的努力，有些误导人。为什么365天的0.01努力，不是加法，而是乘法？<br>为了鸡汤而可以制造的假象就迷惑人了。<code>1.01*365/0.99*365</code>，也就是<code>1.02020202</code>这样子，远远没有<code>1480</code>这么大。</p>\n<p>所以我想说，这个鸡汤太过分了，努力固然重要，但是绝没有天地距离这么夸张。努力和结果，有“方式、时间、付出、天赋”等条件约束，不是简单的两个字。</p>\n<h3 id=\"何为努力？\"><a href=\"#何为努力？\" class=\"headerlink\" title=\"何为努力？\"></a>何为努力？</h3><p>万事皆有方式，如学习方式、工作方式。如果你在努力的过程中脑子里昏昏的始终没有清晰过，那你的努力只能是虚度时光并假装自己在辛苦，你欺骗了别人，也欺骗了自己。<br>这样的努力是廉价可耻的，当然我们局外人没有权利指责，那或许是你刻意制造的生活呢？</p>\n<p>努力，需要方法。找到一个适合自己的有效果的方法，就已经是走了大捷径，跑了快速道。而且这个方法可以便随你各个方面，时间上或许就是一生。<br>没有方法在努力的人，始终在埋冤，在怨天尤人，说自己累，不相信技巧。<br>有方法在努力的人，都说这个方法好，努力原来有捷径可走。<br>方法不是固定的，每个人都会有自己的方法，我们都要找到它。<br>比如：与人沟通会增加见识产生灵感获得额外消息，站在巨人的肩膀上会走的更快更高，寻找合适的资源工具可以节省大量的时间等。</p>\n<h3 id=\"努力一定有好的回报？\"><a href=\"#努力一定有好的回报？\" class=\"headerlink\" title=\"努力一定有好的回报？\"></a>努力一定有好的回报？</h3><p>是的。努力一定有好的回报。</p>\n<p>你的努力，一定会在潜移默化里改变你一些什么，最直接等影响或许就是你成功了，财富自由，家庭辛福。<br>但是努力，绝对不会让你登上人生巅峰，这个是一定要摆正好的心态问题。<br>人，努力到一个点后，就开始怀疑自己了。为什么我的努力没有达到我的预期？我耗费了自己这么多的精力，却没有达到我想要的，我死了算了。<br>这个时候，一定要摆正心态，是不是你的目标太高了，以至于你的努力弥补不了这个高度的空白，需要<code>天赋</code>来支撑了。</p>\n<p>天赋这玩意就很奇妙了，不管你同意不同意这个观点，它就摆在那里，甚至是真真实实的摆在那里。<br>某个方向的天赋可以让你脑壳在这个方向上高速运转，得天独厚的优越感。<br>从小时候和你一起学习的同学，到长大后和你一起工作的同事，甚至很多你认识的创业老板们，我们大家都会见过或者听过有一些有天赋的朋友。<br>如果你把那些人的卓越，当作努力，那不是对自己付出的努力的唾弃和践踏吗？不要不尊重自己，那就是人家的天赋，可惜不在你身上而已。</p>\n<p>摆正好心态，努力过好自己的一生，就是对自己的不辜负，对自己生命的尊重。<br>如果你是某个方向的天赋，请一定继续努力，用这个天赋，帮助更多需要帮助的人。<br>如果你没有那个天赋，请一定继续努力，在这个方向上超过更多人，首先让自己和家人幸福，有条件了一定帮助更多需要帮助的人。</p>\n<h3 id=\"努力-PK-天赋\"><a href=\"#努力-PK-天赋\" class=\"headerlink\" title=\"努力 PK 天赋\"></a>努力 PK 天赋</h3><p>某个方向上的天赋人才，没有想象的那么多，金字塔的顶端就那么大。<br>你自认为有天赋的那些同学或者朋友，或许仅仅是努力的方式比你好一些，努力的时间比你多一些。人家比你更努力。<br>不要低估了自己的努力，也不要高估了周围人的天赋。</p>\n<p>天赋决定了你的上限，<br>努力决定了你的下限。</p>\n<hr>\n<p>最近听到一个可怕的消息，<br>你的努力方式，也是由你的基因决定的。<br>从你出生的那刻起，95%的命运已经确定了。<br>我不看鸡汤就是因为幸存者法则，<br>但是没想到命是这么的严酷。<br>加油努力吧，不然就是一个废人了！</p>"},{"title":"我心里一直有一个念想","date":"2019-03-27T16:13:43.000Z","keywords":"理想,阶层,人生价值","_content":"\n我有一个梦想，因为这个梦想，我也产生过心里的孤独。\n今天我索性大胆的把自己的念想写出来，也把自己孤独的过程表达出来。\n如果屏幕前的你看完心里也会产生一些奇思妙想，那我们或许可能很好的沟通下去。如果有共鸣，如果旅途方向再一直，陌生人我也愿意为你背负行囊。\n\n<!--more -->\n\n我这个人呢，代码写久了，很多时候开始怀疑人生了。\n代码总是有规律可循的，可是人生总是计划赶不上变化，很多时候我找不到人生的意义。\n有一段时间，我一直在听一首歌，“黑暗中最亮的星”。我这人记不住歌词，前两年我很喜欢听歌，也是网易云音乐的第一批用户。有一首歌网易云音乐年度总结里面说，我听了1000多遍，但是我连歌词都记不住，我听的更多的是旋律。很多歌，歌词改变，依旧会很好听。“黑暗中最亮的星”也是一样，更多听的还是调子，但是里面有一段歌词，我念念叨叨很久，“每当我找不到存在的意义，每当我迷失在黑夜里，夜空中最亮的星，请指引我靠近你”。\n人生苦短，绝对不是瞎说。时代总是年轻人的，这个大家都是心知肚明。就像你街上看到一个50-70岁的中老人，和30-40岁的年轻人中年人对比，你的内心更愿意交往哪一个？或者直接点你认为哪个更有能力？(人都是利益的个体，更倾向交往对自己利益价值更大的一方。)年龄大了，能力再大，也不过是在消耗仅剩的几年可消耗时光。后面自然有杂七杂八的老年琐事满足生活上的空虚。\n我很多时候在想，时间真的不多了，而我，能产生什么有价值的人生意义呢？对自己，对家人，对朋友，对更多的陌生人。\n我这人吧，对于生活质量没有想象中的那么高，比如对于车，我没有很高的渴望度，甚至有点排斥。不过我很喜欢摩托车，骑起来带风的那种，但是城市里禁摩托车。我对衣服啊，吃喝啊，甚至房子啊，都没有太多的渴望。\n但是我喜欢钱。这些年一直都喜欢。和有些朋友聊天，他们说钱财挣不完，说开心生活最重要，说要那么多钱干嘛，说够花就好。我相信你身边也有很多这样的朋友。我不认同这些朋友的观点，我也会提出自己的认知，但是也不刻意要求改变谁。我认为很多人，都大大小小的认识到了钱难挣这么一个事实，因为过程中的辛苦，都潜意识的把头埋在了沙子里。谁会不喜欢钱呢？就事论事客观说，没有人不喜欢钱吧，在这个货币通行的时代。很多人说自己渴望平静的生活，说很多著名的人在很多场合也这样公开的表达过。可是人家已经经历了人生的风风雨雨，经历了辉煌。经历不一样，千万不要乱套用。\n我渴望有一定的资金，可以满足自己的生活开销，可以让我的家人有好的生活质量，可以让家人不因为普通的中大型疾病而感到绝望。\n这就是我的初期念想。\n直白来说，满足家人的生活开销，提高家人的生活质量，让家人有吃有住有养老，让家人不因为常见疾病而愁眉苦脸。这或许不是我个人的想法吧，这也是每个人的基本想法吧？但很多人在生命的旅途中，都达不到初步的财务自由，我也只是希望。\n我希望有一天，我可以每月拿出5W元，以慈善的名义，和三三两两个大学生，去偏远地区说道，讲述人生的意义，让很多没有机会接触更大世界的人，更好的认识自己，认识这个世界，增强自己思维的高度。\n这是我的终极念想。\n我之所以有这个念想，因为从自己的实际情况分析，我觉得应该有很多很多非常优秀非常厉害的人，他们因为家庭地域等客观原因，没有办法成为本应该成为的样子。这些人，不管对于他个人，还是社会这么一个大的种族部落，都是可惜的。\n我自己生活在安徽一个并不怎么偏僻的乡村。但是在18岁之前，我对这个世界知道的寥寥。在上大学后，我才知道城市里面有公交车这个东西，很方便城市居民的位置流动。上大学很久后，我才有机会做过另一个城市的地铁，地下原来还有这么神奇的东西。甚至后面的高铁等等。计算机是改变我人生的硬件和软件，我目前也依靠这玩意为生。我那个并不怎么偏僻的乡村，我却对世界认知寥寥。这里面有很多原因。但很多都不是主观原因。比如说：家庭条件不允许，父母见识面不宽，家庭教育方向有偏离等等，但是对于一个还没有形成自主意识形态的未成年人来说，他们在很长一段时间并不能决定自己的命运。那成年后呢？会改变吗？我感谢我的父母，让我有机会接触大学教育。每每想到这个，我就觉得我的父母在应试教育这条路上走了对的也是唯一的一条路。教育可能是低级阶层向上跨步的最快方式了，寒门再难出贵子，这已经是定律，但是每一代人或许都可以向上跨步1-2个阶层，再多就难了。\n一个人生活幸福度的高低，可以说绝大部分取决与思维的高度。我不敢说满，因为有很多土豪依靠巨额家产的确有优质的幸福度，幸福不幸福，很大方面取决与个人的想法和态度。但是，阶层的高低，就是思维层度的高低，这个是毋庸置疑的。想法不一样，态度不一样，导致工作方式和生活方式也不一样，反过来又互相推进。所以很多时候，一个人的想法是片面的有局限的，就是因为人和人之间，阶层和阶层之间，思维的高度都不一样，看待问题的角度更加不一样。\n我很多时候会产生人生价值意义的思考，我觉得这个终极念想，或许是我的出路。我希望更多本有能力改变自己和周围更多人的那些陌生朋友，希望他们能够认识这个世界，发散人生意义的思考，知道这个世界还有不同的玩法和活法。\n___\n不是我喜欢网易云音乐，这玩意也不怎么讨人喜欢。我卸载了很多次。但是人生很多时候总是在一些时间需要一些音乐假装一下情调，没有音乐完全没有问题，但是就像演唱会没有主持人一样，少点东西。听音乐总要有个音乐库吧，我前前后后选了很多个，最后也只有网易云音乐自己相对来说喜欢一些。\n邓丽君、王菲、张学友、香港几大歌星、周杰伦等等，他们也都过了当前年代了，新歌很少出了。我自己私下评价，他们是音乐的开拓者和推广者，现在的音乐人，要么在摸鱼，要么没办法出道。社会总是对有理想的人是残酷的。\n他们过后，再没能改变时代的音乐人了，但新歌倒是连绵不绝，有高有低。偶然有几个爆款出来，也没有后续了。","source":"_posts/我心里一直有一个念想.md","raw":"---\ntitle: 我心里一直有一个念想\ndate: 2019-03-28 00:13:43\ncategories:\n- 琐事\ntags:\n- Life\nkeywords: 理想,阶层,人生价值\n---\n\n我有一个梦想，因为这个梦想，我也产生过心里的孤独。\n今天我索性大胆的把自己的念想写出来，也把自己孤独的过程表达出来。\n如果屏幕前的你看完心里也会产生一些奇思妙想，那我们或许可能很好的沟通下去。如果有共鸣，如果旅途方向再一直，陌生人我也愿意为你背负行囊。\n\n<!--more -->\n\n我这个人呢，代码写久了，很多时候开始怀疑人生了。\n代码总是有规律可循的，可是人生总是计划赶不上变化，很多时候我找不到人生的意义。\n有一段时间，我一直在听一首歌，“黑暗中最亮的星”。我这人记不住歌词，前两年我很喜欢听歌，也是网易云音乐的第一批用户。有一首歌网易云音乐年度总结里面说，我听了1000多遍，但是我连歌词都记不住，我听的更多的是旋律。很多歌，歌词改变，依旧会很好听。“黑暗中最亮的星”也是一样，更多听的还是调子，但是里面有一段歌词，我念念叨叨很久，“每当我找不到存在的意义，每当我迷失在黑夜里，夜空中最亮的星，请指引我靠近你”。\n人生苦短，绝对不是瞎说。时代总是年轻人的，这个大家都是心知肚明。就像你街上看到一个50-70岁的中老人，和30-40岁的年轻人中年人对比，你的内心更愿意交往哪一个？或者直接点你认为哪个更有能力？(人都是利益的个体，更倾向交往对自己利益价值更大的一方。)年龄大了，能力再大，也不过是在消耗仅剩的几年可消耗时光。后面自然有杂七杂八的老年琐事满足生活上的空虚。\n我很多时候在想，时间真的不多了，而我，能产生什么有价值的人生意义呢？对自己，对家人，对朋友，对更多的陌生人。\n我这人吧，对于生活质量没有想象中的那么高，比如对于车，我没有很高的渴望度，甚至有点排斥。不过我很喜欢摩托车，骑起来带风的那种，但是城市里禁摩托车。我对衣服啊，吃喝啊，甚至房子啊，都没有太多的渴望。\n但是我喜欢钱。这些年一直都喜欢。和有些朋友聊天，他们说钱财挣不完，说开心生活最重要，说要那么多钱干嘛，说够花就好。我相信你身边也有很多这样的朋友。我不认同这些朋友的观点，我也会提出自己的认知，但是也不刻意要求改变谁。我认为很多人，都大大小小的认识到了钱难挣这么一个事实，因为过程中的辛苦，都潜意识的把头埋在了沙子里。谁会不喜欢钱呢？就事论事客观说，没有人不喜欢钱吧，在这个货币通行的时代。很多人说自己渴望平静的生活，说很多著名的人在很多场合也这样公开的表达过。可是人家已经经历了人生的风风雨雨，经历了辉煌。经历不一样，千万不要乱套用。\n我渴望有一定的资金，可以满足自己的生活开销，可以让我的家人有好的生活质量，可以让家人不因为普通的中大型疾病而感到绝望。\n这就是我的初期念想。\n直白来说，满足家人的生活开销，提高家人的生活质量，让家人有吃有住有养老，让家人不因为常见疾病而愁眉苦脸。这或许不是我个人的想法吧，这也是每个人的基本想法吧？但很多人在生命的旅途中，都达不到初步的财务自由，我也只是希望。\n我希望有一天，我可以每月拿出5W元，以慈善的名义，和三三两两个大学生，去偏远地区说道，讲述人生的意义，让很多没有机会接触更大世界的人，更好的认识自己，认识这个世界，增强自己思维的高度。\n这是我的终极念想。\n我之所以有这个念想，因为从自己的实际情况分析，我觉得应该有很多很多非常优秀非常厉害的人，他们因为家庭地域等客观原因，没有办法成为本应该成为的样子。这些人，不管对于他个人，还是社会这么一个大的种族部落，都是可惜的。\n我自己生活在安徽一个并不怎么偏僻的乡村。但是在18岁之前，我对这个世界知道的寥寥。在上大学后，我才知道城市里面有公交车这个东西，很方便城市居民的位置流动。上大学很久后，我才有机会做过另一个城市的地铁，地下原来还有这么神奇的东西。甚至后面的高铁等等。计算机是改变我人生的硬件和软件，我目前也依靠这玩意为生。我那个并不怎么偏僻的乡村，我却对世界认知寥寥。这里面有很多原因。但很多都不是主观原因。比如说：家庭条件不允许，父母见识面不宽，家庭教育方向有偏离等等，但是对于一个还没有形成自主意识形态的未成年人来说，他们在很长一段时间并不能决定自己的命运。那成年后呢？会改变吗？我感谢我的父母，让我有机会接触大学教育。每每想到这个，我就觉得我的父母在应试教育这条路上走了对的也是唯一的一条路。教育可能是低级阶层向上跨步的最快方式了，寒门再难出贵子，这已经是定律，但是每一代人或许都可以向上跨步1-2个阶层，再多就难了。\n一个人生活幸福度的高低，可以说绝大部分取决与思维的高度。我不敢说满，因为有很多土豪依靠巨额家产的确有优质的幸福度，幸福不幸福，很大方面取决与个人的想法和态度。但是，阶层的高低，就是思维层度的高低，这个是毋庸置疑的。想法不一样，态度不一样，导致工作方式和生活方式也不一样，反过来又互相推进。所以很多时候，一个人的想法是片面的有局限的，就是因为人和人之间，阶层和阶层之间，思维的高度都不一样，看待问题的角度更加不一样。\n我很多时候会产生人生价值意义的思考，我觉得这个终极念想，或许是我的出路。我希望更多本有能力改变自己和周围更多人的那些陌生朋友，希望他们能够认识这个世界，发散人生意义的思考，知道这个世界还有不同的玩法和活法。\n___\n不是我喜欢网易云音乐，这玩意也不怎么讨人喜欢。我卸载了很多次。但是人生很多时候总是在一些时间需要一些音乐假装一下情调，没有音乐完全没有问题，但是就像演唱会没有主持人一样，少点东西。听音乐总要有个音乐库吧，我前前后后选了很多个，最后也只有网易云音乐自己相对来说喜欢一些。\n邓丽君、王菲、张学友、香港几大歌星、周杰伦等等，他们也都过了当前年代了，新歌很少出了。我自己私下评价，他们是音乐的开拓者和推广者，现在的音乐人，要么在摸鱼，要么没办法出道。社会总是对有理想的人是残酷的。\n他们过后，再没能改变时代的音乐人了，但新歌倒是连绵不绝，有高有低。偶然有几个爆款出来，也没有后续了。","slug":"我心里一直有一个念想","published":1,"updated":"2019-05-21T13:40:26.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjytswkz2000codgpwkukkz7v","content":"<p>我有一个梦想，因为这个梦想，我也产生过心里的孤独。<br>今天我索性大胆的把自己的念想写出来，也把自己孤独的过程表达出来。<br>如果屏幕前的你看完心里也会产生一些奇思妙想，那我们或许可能很好的沟通下去。如果有共鸣，如果旅途方向再一直，陌生人我也愿意为你背负行囊。</p>\n<a id=\"more\"></a>\n\n<p>我这个人呢，代码写久了，很多时候开始怀疑人生了。<br>代码总是有规律可循的，可是人生总是计划赶不上变化，很多时候我找不到人生的意义。<br>有一段时间，我一直在听一首歌，“黑暗中最亮的星”。我这人记不住歌词，前两年我很喜欢听歌，也是网易云音乐的第一批用户。有一首歌网易云音乐年度总结里面说，我听了1000多遍，但是我连歌词都记不住，我听的更多的是旋律。很多歌，歌词改变，依旧会很好听。“黑暗中最亮的星”也是一样，更多听的还是调子，但是里面有一段歌词，我念念叨叨很久，“每当我找不到存在的意义，每当我迷失在黑夜里，夜空中最亮的星，请指引我靠近你”。<br>人生苦短，绝对不是瞎说。时代总是年轻人的，这个大家都是心知肚明。就像你街上看到一个50-70岁的中老人，和30-40岁的年轻人中年人对比，你的内心更愿意交往哪一个？或者直接点你认为哪个更有能力？(人都是利益的个体，更倾向交往对自己利益价值更大的一方。)年龄大了，能力再大，也不过是在消耗仅剩的几年可消耗时光。后面自然有杂七杂八的老年琐事满足生活上的空虚。<br>我很多时候在想，时间真的不多了，而我，能产生什么有价值的人生意义呢？对自己，对家人，对朋友，对更多的陌生人。<br>我这人吧，对于生活质量没有想象中的那么高，比如对于车，我没有很高的渴望度，甚至有点排斥。不过我很喜欢摩托车，骑起来带风的那种，但是城市里禁摩托车。我对衣服啊，吃喝啊，甚至房子啊，都没有太多的渴望。<br>但是我喜欢钱。这些年一直都喜欢。和有些朋友聊天，他们说钱财挣不完，说开心生活最重要，说要那么多钱干嘛，说够花就好。我相信你身边也有很多这样的朋友。我不认同这些朋友的观点，我也会提出自己的认知，但是也不刻意要求改变谁。我认为很多人，都大大小小的认识到了钱难挣这么一个事实，因为过程中的辛苦，都潜意识的把头埋在了沙子里。谁会不喜欢钱呢？就事论事客观说，没有人不喜欢钱吧，在这个货币通行的时代。很多人说自己渴望平静的生活，说很多著名的人在很多场合也这样公开的表达过。可是人家已经经历了人生的风风雨雨，经历了辉煌。经历不一样，千万不要乱套用。<br>我渴望有一定的资金，可以满足自己的生活开销，可以让我的家人有好的生活质量，可以让家人不因为普通的中大型疾病而感到绝望。<br>这就是我的初期念想。<br>直白来说，满足家人的生活开销，提高家人的生活质量，让家人有吃有住有养老，让家人不因为常见疾病而愁眉苦脸。这或许不是我个人的想法吧，这也是每个人的基本想法吧？但很多人在生命的旅途中，都达不到初步的财务自由，我也只是希望。<br>我希望有一天，我可以每月拿出5W元，以慈善的名义，和三三两两个大学生，去偏远地区说道，讲述人生的意义，让很多没有机会接触更大世界的人，更好的认识自己，认识这个世界，增强自己思维的高度。<br>这是我的终极念想。<br>我之所以有这个念想，因为从自己的实际情况分析，我觉得应该有很多很多非常优秀非常厉害的人，他们因为家庭地域等客观原因，没有办法成为本应该成为的样子。这些人，不管对于他个人，还是社会这么一个大的种族部落，都是可惜的。<br>我自己生活在安徽一个并不怎么偏僻的乡村。但是在18岁之前，我对这个世界知道的寥寥。在上大学后，我才知道城市里面有公交车这个东西，很方便城市居民的位置流动。上大学很久后，我才有机会做过另一个城市的地铁，地下原来还有这么神奇的东西。甚至后面的高铁等等。计算机是改变我人生的硬件和软件，我目前也依靠这玩意为生。我那个并不怎么偏僻的乡村，我却对世界认知寥寥。这里面有很多原因。但很多都不是主观原因。比如说：家庭条件不允许，父母见识面不宽，家庭教育方向有偏离等等，但是对于一个还没有形成自主意识形态的未成年人来说，他们在很长一段时间并不能决定自己的命运。那成年后呢？会改变吗？我感谢我的父母，让我有机会接触大学教育。每每想到这个，我就觉得我的父母在应试教育这条路上走了对的也是唯一的一条路。教育可能是低级阶层向上跨步的最快方式了，寒门再难出贵子，这已经是定律，但是每一代人或许都可以向上跨步1-2个阶层，再多就难了。<br>一个人生活幸福度的高低，可以说绝大部分取决与思维的高度。我不敢说满，因为有很多土豪依靠巨额家产的确有优质的幸福度，幸福不幸福，很大方面取决与个人的想法和态度。但是，阶层的高低，就是思维层度的高低，这个是毋庸置疑的。想法不一样，态度不一样，导致工作方式和生活方式也不一样，反过来又互相推进。所以很多时候，一个人的想法是片面的有局限的，就是因为人和人之间，阶层和阶层之间，思维的高度都不一样，看待问题的角度更加不一样。<br>我很多时候会产生人生价值意义的思考，我觉得这个终极念想，或许是我的出路。我希望更多本有能力改变自己和周围更多人的那些陌生朋友，希望他们能够认识这个世界，发散人生意义的思考，知道这个世界还有不同的玩法和活法。</p>\n<hr>\n<p>不是我喜欢网易云音乐，这玩意也不怎么讨人喜欢。我卸载了很多次。但是人生很多时候总是在一些时间需要一些音乐假装一下情调，没有音乐完全没有问题，但是就像演唱会没有主持人一样，少点东西。听音乐总要有个音乐库吧，我前前后后选了很多个，最后也只有网易云音乐自己相对来说喜欢一些。<br>邓丽君、王菲、张学友、香港几大歌星、周杰伦等等，他们也都过了当前年代了，新歌很少出了。我自己私下评价，他们是音乐的开拓者和推广者，现在的音乐人，要么在摸鱼，要么没办法出道。社会总是对有理想的人是残酷的。<br>他们过后，再没能改变时代的音乐人了，但新歌倒是连绵不绝，有高有低。偶然有几个爆款出来，也没有后续了。</p>\n","site":{"data":{}},"excerpt":"<p>我有一个梦想，因为这个梦想，我也产生过心里的孤独。<br>今天我索性大胆的把自己的念想写出来，也把自己孤独的过程表达出来。<br>如果屏幕前的你看完心里也会产生一些奇思妙想，那我们或许可能很好的沟通下去。如果有共鸣，如果旅途方向再一直，陌生人我也愿意为你背负行囊。</p>","more":"<p>我这个人呢，代码写久了，很多时候开始怀疑人生了。<br>代码总是有规律可循的，可是人生总是计划赶不上变化，很多时候我找不到人生的意义。<br>有一段时间，我一直在听一首歌，“黑暗中最亮的星”。我这人记不住歌词，前两年我很喜欢听歌，也是网易云音乐的第一批用户。有一首歌网易云音乐年度总结里面说，我听了1000多遍，但是我连歌词都记不住，我听的更多的是旋律。很多歌，歌词改变，依旧会很好听。“黑暗中最亮的星”也是一样，更多听的还是调子，但是里面有一段歌词，我念念叨叨很久，“每当我找不到存在的意义，每当我迷失在黑夜里，夜空中最亮的星，请指引我靠近你”。<br>人生苦短，绝对不是瞎说。时代总是年轻人的，这个大家都是心知肚明。就像你街上看到一个50-70岁的中老人，和30-40岁的年轻人中年人对比，你的内心更愿意交往哪一个？或者直接点你认为哪个更有能力？(人都是利益的个体，更倾向交往对自己利益价值更大的一方。)年龄大了，能力再大，也不过是在消耗仅剩的几年可消耗时光。后面自然有杂七杂八的老年琐事满足生活上的空虚。<br>我很多时候在想，时间真的不多了，而我，能产生什么有价值的人生意义呢？对自己，对家人，对朋友，对更多的陌生人。<br>我这人吧，对于生活质量没有想象中的那么高，比如对于车，我没有很高的渴望度，甚至有点排斥。不过我很喜欢摩托车，骑起来带风的那种，但是城市里禁摩托车。我对衣服啊，吃喝啊，甚至房子啊，都没有太多的渴望。<br>但是我喜欢钱。这些年一直都喜欢。和有些朋友聊天，他们说钱财挣不完，说开心生活最重要，说要那么多钱干嘛，说够花就好。我相信你身边也有很多这样的朋友。我不认同这些朋友的观点，我也会提出自己的认知，但是也不刻意要求改变谁。我认为很多人，都大大小小的认识到了钱难挣这么一个事实，因为过程中的辛苦，都潜意识的把头埋在了沙子里。谁会不喜欢钱呢？就事论事客观说，没有人不喜欢钱吧，在这个货币通行的时代。很多人说自己渴望平静的生活，说很多著名的人在很多场合也这样公开的表达过。可是人家已经经历了人生的风风雨雨，经历了辉煌。经历不一样，千万不要乱套用。<br>我渴望有一定的资金，可以满足自己的生活开销，可以让我的家人有好的生活质量，可以让家人不因为普通的中大型疾病而感到绝望。<br>这就是我的初期念想。<br>直白来说，满足家人的生活开销，提高家人的生活质量，让家人有吃有住有养老，让家人不因为常见疾病而愁眉苦脸。这或许不是我个人的想法吧，这也是每个人的基本想法吧？但很多人在生命的旅途中，都达不到初步的财务自由，我也只是希望。<br>我希望有一天，我可以每月拿出5W元，以慈善的名义，和三三两两个大学生，去偏远地区说道，讲述人生的意义，让很多没有机会接触更大世界的人，更好的认识自己，认识这个世界，增强自己思维的高度。<br>这是我的终极念想。<br>我之所以有这个念想，因为从自己的实际情况分析，我觉得应该有很多很多非常优秀非常厉害的人，他们因为家庭地域等客观原因，没有办法成为本应该成为的样子。这些人，不管对于他个人，还是社会这么一个大的种族部落，都是可惜的。<br>我自己生活在安徽一个并不怎么偏僻的乡村。但是在18岁之前，我对这个世界知道的寥寥。在上大学后，我才知道城市里面有公交车这个东西，很方便城市居民的位置流动。上大学很久后，我才有机会做过另一个城市的地铁，地下原来还有这么神奇的东西。甚至后面的高铁等等。计算机是改变我人生的硬件和软件，我目前也依靠这玩意为生。我那个并不怎么偏僻的乡村，我却对世界认知寥寥。这里面有很多原因。但很多都不是主观原因。比如说：家庭条件不允许，父母见识面不宽，家庭教育方向有偏离等等，但是对于一个还没有形成自主意识形态的未成年人来说，他们在很长一段时间并不能决定自己的命运。那成年后呢？会改变吗？我感谢我的父母，让我有机会接触大学教育。每每想到这个，我就觉得我的父母在应试教育这条路上走了对的也是唯一的一条路。教育可能是低级阶层向上跨步的最快方式了，寒门再难出贵子，这已经是定律，但是每一代人或许都可以向上跨步1-2个阶层，再多就难了。<br>一个人生活幸福度的高低，可以说绝大部分取决与思维的高度。我不敢说满，因为有很多土豪依靠巨额家产的确有优质的幸福度，幸福不幸福，很大方面取决与个人的想法和态度。但是，阶层的高低，就是思维层度的高低，这个是毋庸置疑的。想法不一样，态度不一样，导致工作方式和生活方式也不一样，反过来又互相推进。所以很多时候，一个人的想法是片面的有局限的，就是因为人和人之间，阶层和阶层之间，思维的高度都不一样，看待问题的角度更加不一样。<br>我很多时候会产生人生价值意义的思考，我觉得这个终极念想，或许是我的出路。我希望更多本有能力改变自己和周围更多人的那些陌生朋友，希望他们能够认识这个世界，发散人生意义的思考，知道这个世界还有不同的玩法和活法。</p>\n<hr>\n<p>不是我喜欢网易云音乐，这玩意也不怎么讨人喜欢。我卸载了很多次。但是人生很多时候总是在一些时间需要一些音乐假装一下情调，没有音乐完全没有问题，但是就像演唱会没有主持人一样，少点东西。听音乐总要有个音乐库吧，我前前后后选了很多个，最后也只有网易云音乐自己相对来说喜欢一些。<br>邓丽君、王菲、张学友、香港几大歌星、周杰伦等等，他们也都过了当前年代了，新歌很少出了。我自己私下评价，他们是音乐的开拓者和推广者，现在的音乐人，要么在摸鱼，要么没办法出道。社会总是对有理想的人是残酷的。<br>他们过后，再没能改变时代的音乐人了，但新歌倒是连绵不绝，有高有低。偶然有几个爆款出来，也没有后续了。</p>"},{"title":"折腾","date":"2018-10-31T04:43:52.000Z","keywords":null,"_content":"\n这次又折腾了一把。原因是我想有一个能够宣传出去的名字了。我希望以后，这个名字所生产的内容，可以指导或者引导一些人，也希望这个名字可以成就自己。\n\n这个名字，其实想了很久了，但是一直没有想好。因为一开始，我想找一个英文名。找了许久许久，找到了几个试用了一段时间，发现并不合我心。终于几天前，我想到，或许那些写小说的人，他们的笔名就很有意思呢？比如南派三叔，唐家三少啥的。没有必要局限在英文名字里面走不出去。中国的文字可真是博大精深，不多久，我确定了响当当的**\"一个工匠\"**。\n\n> 一个工匠。跋山涉水，走心为匠。\n\n<!-- more -->\n\n我觉得很合适我，就gmail邮箱也申请了。申请后，也越发喜欢，以后我就自叫“一个工匠”了。\n\n这两天在切账号。首先把国外的一些账号都切到这个了，其他的还没有动手。实不相瞒，这真是一个累活。\n\n顺带发现了facebook的一个想不到的恶心。我注册了一个新脸谱账号，注册成功后故意引导我去输入手机号和自己的照片。照片上传后，就是一直审核了。本来以为几分钟就好了，可这一个审核，用了一两天，期间无法登陆账号。简直无法想象。后来我注册了一个新的，避开了手机号上传和照片上传，使用没有任何影响。好恶心！\n\n因为寻找“一个工匠”这个名字，我总耗时应该在2天。经历各种名字后，试用并通过。说来也好笑，之前选定的英文名，试用了几个月，最后还是无疾而终。这个名字，试用了几天，就落锤了。所以说，喜欢一个人并有幸在一起，那真的有无限的未来。而不喜欢并强加在一起，那就是一场悲戏。\n\n为了一个名字，我自觉用时过多了。这也是我的过失，没有在学习生活中巧妙的寻找发现。但是我还是将自己的这段寻找合适名字的经历，归类为**折腾**。\n\n爱折腾的人生，总归会和普通的人生不一样。但哪样才是普通的人生，哪样才是不一样的人生，终归没有一个固定的公式用来计算。人各不同，不敢妄语。但是每个人，都应该做到对自己十分了解清楚。清楚自己的人，也会爱惜自己的宝贵一生。但说起来又可能是个笑话，对自己还能不了解？实然，就是如此。很多人对自己都是一个黑盒呢！我对自己也是一脸懵，比如“我的一生应该是什么样的”与“我的一生会是什么样的”。这“应该”和“会”之间，就有一万种可能。所以我不是大师。\n\n___\n\n一直关注ofo\n最近风声不断感觉最后的一场风雪也要到来了\n于是安装app\n想看看里面余额几多\n尽然发现自己也在退款人员行列\n本是火中鸟\n以为隔岸猴","source":"_posts/折腾.md","raw":"---\ntitle: 折腾\ndate: 2018-10-31 12:43:52\ncategories:\n- 琐事\ntags:\n- Life\nkeywords:\n---\n\n这次又折腾了一把。原因是我想有一个能够宣传出去的名字了。我希望以后，这个名字所生产的内容，可以指导或者引导一些人，也希望这个名字可以成就自己。\n\n这个名字，其实想了很久了，但是一直没有想好。因为一开始，我想找一个英文名。找了许久许久，找到了几个试用了一段时间，发现并不合我心。终于几天前，我想到，或许那些写小说的人，他们的笔名就很有意思呢？比如南派三叔，唐家三少啥的。没有必要局限在英文名字里面走不出去。中国的文字可真是博大精深，不多久，我确定了响当当的**\"一个工匠\"**。\n\n> 一个工匠。跋山涉水，走心为匠。\n\n<!-- more -->\n\n我觉得很合适我，就gmail邮箱也申请了。申请后，也越发喜欢，以后我就自叫“一个工匠”了。\n\n这两天在切账号。首先把国外的一些账号都切到这个了，其他的还没有动手。实不相瞒，这真是一个累活。\n\n顺带发现了facebook的一个想不到的恶心。我注册了一个新脸谱账号，注册成功后故意引导我去输入手机号和自己的照片。照片上传后，就是一直审核了。本来以为几分钟就好了，可这一个审核，用了一两天，期间无法登陆账号。简直无法想象。后来我注册了一个新的，避开了手机号上传和照片上传，使用没有任何影响。好恶心！\n\n因为寻找“一个工匠”这个名字，我总耗时应该在2天。经历各种名字后，试用并通过。说来也好笑，之前选定的英文名，试用了几个月，最后还是无疾而终。这个名字，试用了几天，就落锤了。所以说，喜欢一个人并有幸在一起，那真的有无限的未来。而不喜欢并强加在一起，那就是一场悲戏。\n\n为了一个名字，我自觉用时过多了。这也是我的过失，没有在学习生活中巧妙的寻找发现。但是我还是将自己的这段寻找合适名字的经历，归类为**折腾**。\n\n爱折腾的人生，总归会和普通的人生不一样。但哪样才是普通的人生，哪样才是不一样的人生，终归没有一个固定的公式用来计算。人各不同，不敢妄语。但是每个人，都应该做到对自己十分了解清楚。清楚自己的人，也会爱惜自己的宝贵一生。但说起来又可能是个笑话，对自己还能不了解？实然，就是如此。很多人对自己都是一个黑盒呢！我对自己也是一脸懵，比如“我的一生应该是什么样的”与“我的一生会是什么样的”。这“应该”和“会”之间，就有一万种可能。所以我不是大师。\n\n___\n\n一直关注ofo\n最近风声不断感觉最后的一场风雪也要到来了\n于是安装app\n想看看里面余额几多\n尽然发现自己也在退款人员行列\n本是火中鸟\n以为隔岸猴","slug":"折腾","published":1,"updated":"2019-02-24T09:30:23.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjytswkz3000dodgps8k5o2wt","content":"<p>这次又折腾了一把。原因是我想有一个能够宣传出去的名字了。我希望以后，这个名字所生产的内容，可以指导或者引导一些人，也希望这个名字可以成就自己。</p>\n<p>这个名字，其实想了很久了，但是一直没有想好。因为一开始，我想找一个英文名。找了许久许久，找到了几个试用了一段时间，发现并不合我心。终于几天前，我想到，或许那些写小说的人，他们的笔名就很有意思呢？比如南派三叔，唐家三少啥的。没有必要局限在英文名字里面走不出去。中国的文字可真是博大精深，不多久，我确定了响当当的<strong>“一个工匠”</strong>。</p>\n<blockquote>\n<p>一个工匠。跋山涉水，走心为匠。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>我觉得很合适我，就gmail邮箱也申请了。申请后，也越发喜欢，以后我就自叫“一个工匠”了。</p>\n<p>这两天在切账号。首先把国外的一些账号都切到这个了，其他的还没有动手。实不相瞒，这真是一个累活。</p>\n<p>顺带发现了facebook的一个想不到的恶心。我注册了一个新脸谱账号，注册成功后故意引导我去输入手机号和自己的照片。照片上传后，就是一直审核了。本来以为几分钟就好了，可这一个审核，用了一两天，期间无法登陆账号。简直无法想象。后来我注册了一个新的，避开了手机号上传和照片上传，使用没有任何影响。好恶心！</p>\n<p>因为寻找“一个工匠”这个名字，我总耗时应该在2天。经历各种名字后，试用并通过。说来也好笑，之前选定的英文名，试用了几个月，最后还是无疾而终。这个名字，试用了几天，就落锤了。所以说，喜欢一个人并有幸在一起，那真的有无限的未来。而不喜欢并强加在一起，那就是一场悲戏。</p>\n<p>为了一个名字，我自觉用时过多了。这也是我的过失，没有在学习生活中巧妙的寻找发现。但是我还是将自己的这段寻找合适名字的经历，归类为<strong>折腾</strong>。</p>\n<p>爱折腾的人生，总归会和普通的人生不一样。但哪样才是普通的人生，哪样才是不一样的人生，终归没有一个固定的公式用来计算。人各不同，不敢妄语。但是每个人，都应该做到对自己十分了解清楚。清楚自己的人，也会爱惜自己的宝贵一生。但说起来又可能是个笑话，对自己还能不了解？实然，就是如此。很多人对自己都是一个黑盒呢！我对自己也是一脸懵，比如“我的一生应该是什么样的”与“我的一生会是什么样的”。这“应该”和“会”之间，就有一万种可能。所以我不是大师。</p>\n<hr>\n<p>一直关注ofo<br>最近风声不断感觉最后的一场风雪也要到来了<br>于是安装app<br>想看看里面余额几多<br>尽然发现自己也在退款人员行列<br>本是火中鸟<br>以为隔岸猴</p>\n","site":{"data":{}},"excerpt":"<p>这次又折腾了一把。原因是我想有一个能够宣传出去的名字了。我希望以后，这个名字所生产的内容，可以指导或者引导一些人，也希望这个名字可以成就自己。</p>\n<p>这个名字，其实想了很久了，但是一直没有想好。因为一开始，我想找一个英文名。找了许久许久，找到了几个试用了一段时间，发现并不合我心。终于几天前，我想到，或许那些写小说的人，他们的笔名就很有意思呢？比如南派三叔，唐家三少啥的。没有必要局限在英文名字里面走不出去。中国的文字可真是博大精深，不多久，我确定了响当当的<strong>“一个工匠”</strong>。</p>\n<blockquote>\n<p>一个工匠。跋山涉水，走心为匠。</p>\n</blockquote>","more":"<p>我觉得很合适我，就gmail邮箱也申请了。申请后，也越发喜欢，以后我就自叫“一个工匠”了。</p>\n<p>这两天在切账号。首先把国外的一些账号都切到这个了，其他的还没有动手。实不相瞒，这真是一个累活。</p>\n<p>顺带发现了facebook的一个想不到的恶心。我注册了一个新脸谱账号，注册成功后故意引导我去输入手机号和自己的照片。照片上传后，就是一直审核了。本来以为几分钟就好了，可这一个审核，用了一两天，期间无法登陆账号。简直无法想象。后来我注册了一个新的，避开了手机号上传和照片上传，使用没有任何影响。好恶心！</p>\n<p>因为寻找“一个工匠”这个名字，我总耗时应该在2天。经历各种名字后，试用并通过。说来也好笑，之前选定的英文名，试用了几个月，最后还是无疾而终。这个名字，试用了几天，就落锤了。所以说，喜欢一个人并有幸在一起，那真的有无限的未来。而不喜欢并强加在一起，那就是一场悲戏。</p>\n<p>为了一个名字，我自觉用时过多了。这也是我的过失，没有在学习生活中巧妙的寻找发现。但是我还是将自己的这段寻找合适名字的经历，归类为<strong>折腾</strong>。</p>\n<p>爱折腾的人生，总归会和普通的人生不一样。但哪样才是普通的人生，哪样才是不一样的人生，终归没有一个固定的公式用来计算。人各不同，不敢妄语。但是每个人，都应该做到对自己十分了解清楚。清楚自己的人，也会爱惜自己的宝贵一生。但说起来又可能是个笑话，对自己还能不了解？实然，就是如此。很多人对自己都是一个黑盒呢！我对自己也是一脸懵，比如“我的一生应该是什么样的”与“我的一生会是什么样的”。这“应该”和“会”之间，就有一万种可能。所以我不是大师。</p>\n<hr>\n<p>一直关注ofo<br>最近风声不断感觉最后的一场风雪也要到来了<br>于是安装app<br>想看看里面余额几多<br>尽然发现自己也在退款人员行列<br>本是火中鸟<br>以为隔岸猴</p>"},{"title":"洗牙","date":"2019-02-23T10:14:59.000Z","keywords":null,"_content":"\n今天去社区一个牙科诊所洗牙了。\n\n现在已经洗牙归来，本来不是什么天大的个人事情需要在博客里面说一遍。\n但是我忍不住自己的喜悦，所以一定想要推荐没有洗牙习惯的朋友，一定要去一次。\n这是脱胎换骨的体验。\n\n<!-- more -->\n\n我长这么大，一直排次医院。要不是老婆把洗牙列为18年的目标并且现在到了19年，我可能还要推迟去医院到时间。\n我长这么大，第一次去洗牙。\n因为有抽烟习惯，这满口腔的牙结石我都感到恶心。我也不知道老婆怎么忍受的了。\n我不敢照镜子看口腔，因为会看到那恶心的牙结石。我一直把头埋在沙子里。\n\n我和老婆。双人套餐，总共218，加上周末每人加20，共计258元人民币。我用了30分钟洗牙，老婆大约20分钟。全程无痛（有一点可忽略的牙龈痛）。\n\n现在的我，回到了我没有抽烟时候的口腔感觉，那是近10年前的感觉了。\n舌头转一圈，那种凹凸感，不在是顺滑的了。牙结石已经把我的压床填的满满的，因为严丝合缝，所以滑滑的。\n\n朋友，如果你没有洗过牙，或者没有经常洗牙习惯，一定要去。这是付出和回报严重不成正比的投资。\n为了健康，也为了你的家人。\n\n___\n前两天拿了一个电动超声波牙刷。\n我朋友说，用了电动牙刷，就再也回不到之前的手动刷牙生活了。\n我想试一下，这个神奇的生活质量提升工具。","source":"_posts/洗牙.md","raw":"---\ntitle: 洗牙\ndate: 2019-02-23 18:14:59\ncategories:\n- 琐事\ntags:\n- Life\nkeywords:\n---\n\n今天去社区一个牙科诊所洗牙了。\n\n现在已经洗牙归来，本来不是什么天大的个人事情需要在博客里面说一遍。\n但是我忍不住自己的喜悦，所以一定想要推荐没有洗牙习惯的朋友，一定要去一次。\n这是脱胎换骨的体验。\n\n<!-- more -->\n\n我长这么大，一直排次医院。要不是老婆把洗牙列为18年的目标并且现在到了19年，我可能还要推迟去医院到时间。\n我长这么大，第一次去洗牙。\n因为有抽烟习惯，这满口腔的牙结石我都感到恶心。我也不知道老婆怎么忍受的了。\n我不敢照镜子看口腔，因为会看到那恶心的牙结石。我一直把头埋在沙子里。\n\n我和老婆。双人套餐，总共218，加上周末每人加20，共计258元人民币。我用了30分钟洗牙，老婆大约20分钟。全程无痛（有一点可忽略的牙龈痛）。\n\n现在的我，回到了我没有抽烟时候的口腔感觉，那是近10年前的感觉了。\n舌头转一圈，那种凹凸感，不在是顺滑的了。牙结石已经把我的压床填的满满的，因为严丝合缝，所以滑滑的。\n\n朋友，如果你没有洗过牙，或者没有经常洗牙习惯，一定要去。这是付出和回报严重不成正比的投资。\n为了健康，也为了你的家人。\n\n___\n前两天拿了一个电动超声波牙刷。\n我朋友说，用了电动牙刷，就再也回不到之前的手动刷牙生活了。\n我想试一下，这个神奇的生活质量提升工具。","slug":"洗牙","published":1,"updated":"2019-02-24T08:56:12.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjytswkz6000hodgpo52wmeie","content":"<p>今天去社区一个牙科诊所洗牙了。</p>\n<p>现在已经洗牙归来，本来不是什么天大的个人事情需要在博客里面说一遍。<br>但是我忍不住自己的喜悦，所以一定想要推荐没有洗牙习惯的朋友，一定要去一次。<br>这是脱胎换骨的体验。</p>\n<a id=\"more\"></a>\n\n<p>我长这么大，一直排次医院。要不是老婆把洗牙列为18年的目标并且现在到了19年，我可能还要推迟去医院到时间。<br>我长这么大，第一次去洗牙。<br>因为有抽烟习惯，这满口腔的牙结石我都感到恶心。我也不知道老婆怎么忍受的了。<br>我不敢照镜子看口腔，因为会看到那恶心的牙结石。我一直把头埋在沙子里。</p>\n<p>我和老婆。双人套餐，总共218，加上周末每人加20，共计258元人民币。我用了30分钟洗牙，老婆大约20分钟。全程无痛（有一点可忽略的牙龈痛）。</p>\n<p>现在的我，回到了我没有抽烟时候的口腔感觉，那是近10年前的感觉了。<br>舌头转一圈，那种凹凸感，不在是顺滑的了。牙结石已经把我的压床填的满满的，因为严丝合缝，所以滑滑的。</p>\n<p>朋友，如果你没有洗过牙，或者没有经常洗牙习惯，一定要去。这是付出和回报严重不成正比的投资。<br>为了健康，也为了你的家人。</p>\n<hr>\n<p>前两天拿了一个电动超声波牙刷。<br>我朋友说，用了电动牙刷，就再也回不到之前的手动刷牙生活了。<br>我想试一下，这个神奇的生活质量提升工具。</p>\n","site":{"data":{}},"excerpt":"<p>今天去社区一个牙科诊所洗牙了。</p>\n<p>现在已经洗牙归来，本来不是什么天大的个人事情需要在博客里面说一遍。<br>但是我忍不住自己的喜悦，所以一定想要推荐没有洗牙习惯的朋友，一定要去一次。<br>这是脱胎换骨的体验。</p>","more":"<p>我长这么大，一直排次医院。要不是老婆把洗牙列为18年的目标并且现在到了19年，我可能还要推迟去医院到时间。<br>我长这么大，第一次去洗牙。<br>因为有抽烟习惯，这满口腔的牙结石我都感到恶心。我也不知道老婆怎么忍受的了。<br>我不敢照镜子看口腔，因为会看到那恶心的牙结石。我一直把头埋在沙子里。</p>\n<p>我和老婆。双人套餐，总共218，加上周末每人加20，共计258元人民币。我用了30分钟洗牙，老婆大约20分钟。全程无痛（有一点可忽略的牙龈痛）。</p>\n<p>现在的我，回到了我没有抽烟时候的口腔感觉，那是近10年前的感觉了。<br>舌头转一圈，那种凹凸感，不在是顺滑的了。牙结石已经把我的压床填的满满的，因为严丝合缝，所以滑滑的。</p>\n<p>朋友，如果你没有洗过牙，或者没有经常洗牙习惯，一定要去。这是付出和回报严重不成正比的投资。<br>为了健康，也为了你的家人。</p>\n<hr>\n<p>前两天拿了一个电动超声波牙刷。<br>我朋友说，用了电动牙刷，就再也回不到之前的手动刷牙生活了。<br>我想试一下，这个神奇的生活质量提升工具。</p>"},{"title":"游戏人生","date":"2018-12-31T09:00:23.000Z","keywords":null,"_content":"\n最近一年，试玩了不少几款游戏。\n有下载需要付费的，有内购的，也有免费的。有本机的，也有联网的。有养成类的，也有公平平台的。\n游戏过程是下载了，试玩了，玩了，卸载了。最后连游戏名字也忘了。\n今天，也是在2018年的最后一天，开始卸载最后一批游戏。游戏这段旅程，在我的生命里，初步结束了。\n昨晚，我刚在一个游戏里面付费了30元。接着，我杀死了应用，想着这段时间我的游戏生涯。\n我对于游戏，始终有一条清晰的线，沿着这条线，不迷失。也是这条线，让我知道游戏的本质，看清很low的游戏也日流水过百万的简单操作下的华丽外衣。\n\n<!-- more -->\n\n##### 我所认知的这条线，是游戏制作人的线。\n\n你玩不过制作人，这是我对游戏的总结。制作人所关心的，是对你神经敏感度的把控。任何一款游戏，你在其中的每一个杀怪，每一次升级，乃至每一个按钮的操作，都在可预估可预期的范围内。如果你在一款游戏里面的活动，超过了制作人的预期，那么这可以说是制作人的失职了。我在玩游戏的过程中，很多次都在想，制作人有没有考虑到我这样的玩家？有没有想过我会点这个按钮而不是那个按钮？最后我发现，在游戏里，你的等级再高，你的操作再溜，不过都是制作人给你的。你就是那个狂妄的孙悟空，始终没有脱离佛祖的五指山。我一直惦记着制作人的线，我在玩过的游戏中，都觉得自己不是透明的，我在被监控。这让我很焦虑也很恶心。我不想被控制，更不想自己的每一个操作和决定，都在别人的电脑显示屏下显示。我不想没有隐私。\n如果真的有一款游戏，或者三体里面的那个游戏，你为你的操作负责，没有版本线，你在游戏里的一切，就和你的真实生活一样。每一个决定，都会有不一样的没有被安排的人生。那么，我觉得我会喜欢上这个游戏。虽然我不知道，下一步决定，是不是会导致GameOver。但是我知道，这样的游戏肯定是不会存在的。一个制作人没有预期到的游戏情节，又该如何生成画面呢？毕竟游戏画面，是代码写出来并运行在服务器上的，不可能由玩游戏的人去生成。\n\n##### 游戏的本质和华丽外衣\n\n游戏的本质，是对瞬间肾上腺素的欺骗与压榨。\n\n游戏本身很美丽，华丽的场景，华丽的服装，华丽的技能，华丽的人设。\n这些外衣，让你觉得你让你手里的人设如此华丽。\n因为你的努力，人设升级无限快，因为你的操作，一个个技能才夺目绚烂。\n如果抛开这些后期的引擎渲染，你的人设，其实就是一根竖线。你的技能操作，就是竖线在那左边移动一下，右边移动一下。甚至于，你的人设，就是（x，y）这样的坐标。\n你付出了自己的时间，制片人给你的努力包装了外衣，让你觉得你的付出是值得的。而你在赢得一场比赛后，制片人就开始收割你的肾上腺素，让你激动，让你产生快感。而你如果输了一场比赛，肾上腺素同样也收割你的情绪，让你癫狂。\n制片人要制作的，就是一个个瞬间肾上腺素突涌的点。在这个点，你会产生快感，会癫狂，会进行自认为公平的等价交换。最恐怖的莫过于这个实质上并不等价的交换，在这个交换里，你会通过现金，通过时间，通过自认为能够交换的一切，来和制片人做交易。\n\n为了这肾上腺素突涌的点，制片人大费脑经。所以，中级的游戏，是在游戏里多留你一会是一会，多一些时间，突涌的点就会多一些，你进行交换的概率也大一些。高级的游戏，是让你主动找它，主动找那些突涌的点，时时刻刻牵着你在游戏中找满足。\n\n你觉得的快乐，并不是快乐，只能称作临时的心里满足。而对于你肾上腺素的压榨，更深切来说，可能不仅是压榨，更多的是欺骗。毕竟一次次的交易，谁又能为那个虚拟的戒指进行定价？朋友，制片人欺骗了你，你的肾上腺素，不止那个价。\n\n##### 人生不是游戏。游戏有场景，人生却无制片人。\n\n我写下这篇关于游戏的文章，是我2018年的人生感悟之一。\n\n对于没怎么玩过游戏的朋友来说，我建议你玩玩游戏。游戏本没有对错，它就像食材、电影、戏剧一样可以丰富你的生活。如果在你的人生中没有经历过几场游戏，那么人生里总会缺少点什么。如果非要说这缺少的是什么，我们可以把它理解为你和朋友饭后的谈资。\n\n对于成谜游戏的朋友，我希望你能够了解到，为了你和一群像你一样的朋友，制片人没日没夜的付出，最后他们很可能还要限制你们的游戏时间，虽然对他们来说，这很矛盾。我更希望你能认知到虚拟和现实的不同，认识到捏在手里的一百块人民币和游戏里的一百万金币的区别。每次击杀Boss和英雄升级的激动，那不是快乐，只是用自己的时间不等价交换过来的临时满足。而你的人生中，用来换取临时满足感的肾上腺素并没有那么多，有那么几次，就够了。\n\n游戏内无对错，游戏外有成败。\n\n游戏带来的临时满足并不是快乐，快乐一定来源于真实场景过度。快乐一定是舒缓的持久的心情愉悦的。我抽烟恶习好多年了，每支烟的尼古丁带来的满足感有效期不过2小时。游戏带来的临时满足，或许连百分之一支烟带来的有效期还要少。\n\n我们的人生之所以精妙，就是因为，人生，没有制片人。\n\n___\n\n自从移动互联网发展起来的这几年，每年的这个时候都是资本寒冬。\n今年也和去年、前年、大前年一样，各种公司倒闭，部门裁员。\n不过也许是我又大了一岁，今年的杭州感觉真的冷啊。\n嗯，感觉是比去年冷一些。\n就拿下雪来说，还没有跨年，这都两场雪了。","source":"_posts/游戏人生.md","raw":"---\ntitle: 游戏人生\ndate: 2018-12-31 17:00:23\ncategories:\n- 观点\ntags:\n- Life\nkeywords:\n---\n\n最近一年，试玩了不少几款游戏。\n有下载需要付费的，有内购的，也有免费的。有本机的，也有联网的。有养成类的，也有公平平台的。\n游戏过程是下载了，试玩了，玩了，卸载了。最后连游戏名字也忘了。\n今天，也是在2018年的最后一天，开始卸载最后一批游戏。游戏这段旅程，在我的生命里，初步结束了。\n昨晚，我刚在一个游戏里面付费了30元。接着，我杀死了应用，想着这段时间我的游戏生涯。\n我对于游戏，始终有一条清晰的线，沿着这条线，不迷失。也是这条线，让我知道游戏的本质，看清很low的游戏也日流水过百万的简单操作下的华丽外衣。\n\n<!-- more -->\n\n##### 我所认知的这条线，是游戏制作人的线。\n\n你玩不过制作人，这是我对游戏的总结。制作人所关心的，是对你神经敏感度的把控。任何一款游戏，你在其中的每一个杀怪，每一次升级，乃至每一个按钮的操作，都在可预估可预期的范围内。如果你在一款游戏里面的活动，超过了制作人的预期，那么这可以说是制作人的失职了。我在玩游戏的过程中，很多次都在想，制作人有没有考虑到我这样的玩家？有没有想过我会点这个按钮而不是那个按钮？最后我发现，在游戏里，你的等级再高，你的操作再溜，不过都是制作人给你的。你就是那个狂妄的孙悟空，始终没有脱离佛祖的五指山。我一直惦记着制作人的线，我在玩过的游戏中，都觉得自己不是透明的，我在被监控。这让我很焦虑也很恶心。我不想被控制，更不想自己的每一个操作和决定，都在别人的电脑显示屏下显示。我不想没有隐私。\n如果真的有一款游戏，或者三体里面的那个游戏，你为你的操作负责，没有版本线，你在游戏里的一切，就和你的真实生活一样。每一个决定，都会有不一样的没有被安排的人生。那么，我觉得我会喜欢上这个游戏。虽然我不知道，下一步决定，是不是会导致GameOver。但是我知道，这样的游戏肯定是不会存在的。一个制作人没有预期到的游戏情节，又该如何生成画面呢？毕竟游戏画面，是代码写出来并运行在服务器上的，不可能由玩游戏的人去生成。\n\n##### 游戏的本质和华丽外衣\n\n游戏的本质，是对瞬间肾上腺素的欺骗与压榨。\n\n游戏本身很美丽，华丽的场景，华丽的服装，华丽的技能，华丽的人设。\n这些外衣，让你觉得你让你手里的人设如此华丽。\n因为你的努力，人设升级无限快，因为你的操作，一个个技能才夺目绚烂。\n如果抛开这些后期的引擎渲染，你的人设，其实就是一根竖线。你的技能操作，就是竖线在那左边移动一下，右边移动一下。甚至于，你的人设，就是（x，y）这样的坐标。\n你付出了自己的时间，制片人给你的努力包装了外衣，让你觉得你的付出是值得的。而你在赢得一场比赛后，制片人就开始收割你的肾上腺素，让你激动，让你产生快感。而你如果输了一场比赛，肾上腺素同样也收割你的情绪，让你癫狂。\n制片人要制作的，就是一个个瞬间肾上腺素突涌的点。在这个点，你会产生快感，会癫狂，会进行自认为公平的等价交换。最恐怖的莫过于这个实质上并不等价的交换，在这个交换里，你会通过现金，通过时间，通过自认为能够交换的一切，来和制片人做交易。\n\n为了这肾上腺素突涌的点，制片人大费脑经。所以，中级的游戏，是在游戏里多留你一会是一会，多一些时间，突涌的点就会多一些，你进行交换的概率也大一些。高级的游戏，是让你主动找它，主动找那些突涌的点，时时刻刻牵着你在游戏中找满足。\n\n你觉得的快乐，并不是快乐，只能称作临时的心里满足。而对于你肾上腺素的压榨，更深切来说，可能不仅是压榨，更多的是欺骗。毕竟一次次的交易，谁又能为那个虚拟的戒指进行定价？朋友，制片人欺骗了你，你的肾上腺素，不止那个价。\n\n##### 人生不是游戏。游戏有场景，人生却无制片人。\n\n我写下这篇关于游戏的文章，是我2018年的人生感悟之一。\n\n对于没怎么玩过游戏的朋友来说，我建议你玩玩游戏。游戏本没有对错，它就像食材、电影、戏剧一样可以丰富你的生活。如果在你的人生中没有经历过几场游戏，那么人生里总会缺少点什么。如果非要说这缺少的是什么，我们可以把它理解为你和朋友饭后的谈资。\n\n对于成谜游戏的朋友，我希望你能够了解到，为了你和一群像你一样的朋友，制片人没日没夜的付出，最后他们很可能还要限制你们的游戏时间，虽然对他们来说，这很矛盾。我更希望你能认知到虚拟和现实的不同，认识到捏在手里的一百块人民币和游戏里的一百万金币的区别。每次击杀Boss和英雄升级的激动，那不是快乐，只是用自己的时间不等价交换过来的临时满足。而你的人生中，用来换取临时满足感的肾上腺素并没有那么多，有那么几次，就够了。\n\n游戏内无对错，游戏外有成败。\n\n游戏带来的临时满足并不是快乐，快乐一定来源于真实场景过度。快乐一定是舒缓的持久的心情愉悦的。我抽烟恶习好多年了，每支烟的尼古丁带来的满足感有效期不过2小时。游戏带来的临时满足，或许连百分之一支烟带来的有效期还要少。\n\n我们的人生之所以精妙，就是因为，人生，没有制片人。\n\n___\n\n自从移动互联网发展起来的这几年，每年的这个时候都是资本寒冬。\n今年也和去年、前年、大前年一样，各种公司倒闭，部门裁员。\n不过也许是我又大了一岁，今年的杭州感觉真的冷啊。\n嗯，感觉是比去年冷一些。\n就拿下雪来说，还没有跨年，这都两场雪了。","slug":"游戏人生","published":1,"updated":"2019-02-24T11:50:12.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjytswkz8000kodgp0q6ojbhr","content":"<p>最近一年，试玩了不少几款游戏。<br>有下载需要付费的，有内购的，也有免费的。有本机的，也有联网的。有养成类的，也有公平平台的。<br>游戏过程是下载了，试玩了，玩了，卸载了。最后连游戏名字也忘了。<br>今天，也是在2018年的最后一天，开始卸载最后一批游戏。游戏这段旅程，在我的生命里，初步结束了。<br>昨晚，我刚在一个游戏里面付费了30元。接着，我杀死了应用，想着这段时间我的游戏生涯。<br>我对于游戏，始终有一条清晰的线，沿着这条线，不迷失。也是这条线，让我知道游戏的本质，看清很low的游戏也日流水过百万的简单操作下的华丽外衣。</p>\n<a id=\"more\"></a>\n\n<h5 id=\"我所认知的这条线，是游戏制作人的线。\"><a href=\"#我所认知的这条线，是游戏制作人的线。\" class=\"headerlink\" title=\"我所认知的这条线，是游戏制作人的线。\"></a>我所认知的这条线，是游戏制作人的线。</h5><p>你玩不过制作人，这是我对游戏的总结。制作人所关心的，是对你神经敏感度的把控。任何一款游戏，你在其中的每一个杀怪，每一次升级，乃至每一个按钮的操作，都在可预估可预期的范围内。如果你在一款游戏里面的活动，超过了制作人的预期，那么这可以说是制作人的失职了。我在玩游戏的过程中，很多次都在想，制作人有没有考虑到我这样的玩家？有没有想过我会点这个按钮而不是那个按钮？最后我发现，在游戏里，你的等级再高，你的操作再溜，不过都是制作人给你的。你就是那个狂妄的孙悟空，始终没有脱离佛祖的五指山。我一直惦记着制作人的线，我在玩过的游戏中，都觉得自己不是透明的，我在被监控。这让我很焦虑也很恶心。我不想被控制，更不想自己的每一个操作和决定，都在别人的电脑显示屏下显示。我不想没有隐私。<br>如果真的有一款游戏，或者三体里面的那个游戏，你为你的操作负责，没有版本线，你在游戏里的一切，就和你的真实生活一样。每一个决定，都会有不一样的没有被安排的人生。那么，我觉得我会喜欢上这个游戏。虽然我不知道，下一步决定，是不是会导致GameOver。但是我知道，这样的游戏肯定是不会存在的。一个制作人没有预期到的游戏情节，又该如何生成画面呢？毕竟游戏画面，是代码写出来并运行在服务器上的，不可能由玩游戏的人去生成。</p>\n<h5 id=\"游戏的本质和华丽外衣\"><a href=\"#游戏的本质和华丽外衣\" class=\"headerlink\" title=\"游戏的本质和华丽外衣\"></a>游戏的本质和华丽外衣</h5><p>游戏的本质，是对瞬间肾上腺素的欺骗与压榨。</p>\n<p>游戏本身很美丽，华丽的场景，华丽的服装，华丽的技能，华丽的人设。<br>这些外衣，让你觉得你让你手里的人设如此华丽。<br>因为你的努力，人设升级无限快，因为你的操作，一个个技能才夺目绚烂。<br>如果抛开这些后期的引擎渲染，你的人设，其实就是一根竖线。你的技能操作，就是竖线在那左边移动一下，右边移动一下。甚至于，你的人设，就是（x，y）这样的坐标。<br>你付出了自己的时间，制片人给你的努力包装了外衣，让你觉得你的付出是值得的。而你在赢得一场比赛后，制片人就开始收割你的肾上腺素，让你激动，让你产生快感。而你如果输了一场比赛，肾上腺素同样也收割你的情绪，让你癫狂。<br>制片人要制作的，就是一个个瞬间肾上腺素突涌的点。在这个点，你会产生快感，会癫狂，会进行自认为公平的等价交换。最恐怖的莫过于这个实质上并不等价的交换，在这个交换里，你会通过现金，通过时间，通过自认为能够交换的一切，来和制片人做交易。</p>\n<p>为了这肾上腺素突涌的点，制片人大费脑经。所以，中级的游戏，是在游戏里多留你一会是一会，多一些时间，突涌的点就会多一些，你进行交换的概率也大一些。高级的游戏，是让你主动找它，主动找那些突涌的点，时时刻刻牵着你在游戏中找满足。</p>\n<p>你觉得的快乐，并不是快乐，只能称作临时的心里满足。而对于你肾上腺素的压榨，更深切来说，可能不仅是压榨，更多的是欺骗。毕竟一次次的交易，谁又能为那个虚拟的戒指进行定价？朋友，制片人欺骗了你，你的肾上腺素，不止那个价。</p>\n<h5 id=\"人生不是游戏。游戏有场景，人生却无制片人。\"><a href=\"#人生不是游戏。游戏有场景，人生却无制片人。\" class=\"headerlink\" title=\"人生不是游戏。游戏有场景，人生却无制片人。\"></a>人生不是游戏。游戏有场景，人生却无制片人。</h5><p>我写下这篇关于游戏的文章，是我2018年的人生感悟之一。</p>\n<p>对于没怎么玩过游戏的朋友来说，我建议你玩玩游戏。游戏本没有对错，它就像食材、电影、戏剧一样可以丰富你的生活。如果在你的人生中没有经历过几场游戏，那么人生里总会缺少点什么。如果非要说这缺少的是什么，我们可以把它理解为你和朋友饭后的谈资。</p>\n<p>对于成谜游戏的朋友，我希望你能够了解到，为了你和一群像你一样的朋友，制片人没日没夜的付出，最后他们很可能还要限制你们的游戏时间，虽然对他们来说，这很矛盾。我更希望你能认知到虚拟和现实的不同，认识到捏在手里的一百块人民币和游戏里的一百万金币的区别。每次击杀Boss和英雄升级的激动，那不是快乐，只是用自己的时间不等价交换过来的临时满足。而你的人生中，用来换取临时满足感的肾上腺素并没有那么多，有那么几次，就够了。</p>\n<p>游戏内无对错，游戏外有成败。</p>\n<p>游戏带来的临时满足并不是快乐，快乐一定来源于真实场景过度。快乐一定是舒缓的持久的心情愉悦的。我抽烟恶习好多年了，每支烟的尼古丁带来的满足感有效期不过2小时。游戏带来的临时满足，或许连百分之一支烟带来的有效期还要少。</p>\n<p>我们的人生之所以精妙，就是因为，人生，没有制片人。</p>\n<hr>\n<p>自从移动互联网发展起来的这几年，每年的这个时候都是资本寒冬。<br>今年也和去年、前年、大前年一样，各种公司倒闭，部门裁员。<br>不过也许是我又大了一岁，今年的杭州感觉真的冷啊。<br>嗯，感觉是比去年冷一些。<br>就拿下雪来说，还没有跨年，这都两场雪了。</p>\n","site":{"data":{}},"excerpt":"<p>最近一年，试玩了不少几款游戏。<br>有下载需要付费的，有内购的，也有免费的。有本机的，也有联网的。有养成类的，也有公平平台的。<br>游戏过程是下载了，试玩了，玩了，卸载了。最后连游戏名字也忘了。<br>今天，也是在2018年的最后一天，开始卸载最后一批游戏。游戏这段旅程，在我的生命里，初步结束了。<br>昨晚，我刚在一个游戏里面付费了30元。接着，我杀死了应用，想着这段时间我的游戏生涯。<br>我对于游戏，始终有一条清晰的线，沿着这条线，不迷失。也是这条线，让我知道游戏的本质，看清很low的游戏也日流水过百万的简单操作下的华丽外衣。</p>","more":"<h5 id=\"我所认知的这条线，是游戏制作人的线。\"><a href=\"#我所认知的这条线，是游戏制作人的线。\" class=\"headerlink\" title=\"我所认知的这条线，是游戏制作人的线。\"></a>我所认知的这条线，是游戏制作人的线。</h5><p>你玩不过制作人，这是我对游戏的总结。制作人所关心的，是对你神经敏感度的把控。任何一款游戏，你在其中的每一个杀怪，每一次升级，乃至每一个按钮的操作，都在可预估可预期的范围内。如果你在一款游戏里面的活动，超过了制作人的预期，那么这可以说是制作人的失职了。我在玩游戏的过程中，很多次都在想，制作人有没有考虑到我这样的玩家？有没有想过我会点这个按钮而不是那个按钮？最后我发现，在游戏里，你的等级再高，你的操作再溜，不过都是制作人给你的。你就是那个狂妄的孙悟空，始终没有脱离佛祖的五指山。我一直惦记着制作人的线，我在玩过的游戏中，都觉得自己不是透明的，我在被监控。这让我很焦虑也很恶心。我不想被控制，更不想自己的每一个操作和决定，都在别人的电脑显示屏下显示。我不想没有隐私。<br>如果真的有一款游戏，或者三体里面的那个游戏，你为你的操作负责，没有版本线，你在游戏里的一切，就和你的真实生活一样。每一个决定，都会有不一样的没有被安排的人生。那么，我觉得我会喜欢上这个游戏。虽然我不知道，下一步决定，是不是会导致GameOver。但是我知道，这样的游戏肯定是不会存在的。一个制作人没有预期到的游戏情节，又该如何生成画面呢？毕竟游戏画面，是代码写出来并运行在服务器上的，不可能由玩游戏的人去生成。</p>\n<h5 id=\"游戏的本质和华丽外衣\"><a href=\"#游戏的本质和华丽外衣\" class=\"headerlink\" title=\"游戏的本质和华丽外衣\"></a>游戏的本质和华丽外衣</h5><p>游戏的本质，是对瞬间肾上腺素的欺骗与压榨。</p>\n<p>游戏本身很美丽，华丽的场景，华丽的服装，华丽的技能，华丽的人设。<br>这些外衣，让你觉得你让你手里的人设如此华丽。<br>因为你的努力，人设升级无限快，因为你的操作，一个个技能才夺目绚烂。<br>如果抛开这些后期的引擎渲染，你的人设，其实就是一根竖线。你的技能操作，就是竖线在那左边移动一下，右边移动一下。甚至于，你的人设，就是（x，y）这样的坐标。<br>你付出了自己的时间，制片人给你的努力包装了外衣，让你觉得你的付出是值得的。而你在赢得一场比赛后，制片人就开始收割你的肾上腺素，让你激动，让你产生快感。而你如果输了一场比赛，肾上腺素同样也收割你的情绪，让你癫狂。<br>制片人要制作的，就是一个个瞬间肾上腺素突涌的点。在这个点，你会产生快感，会癫狂，会进行自认为公平的等价交换。最恐怖的莫过于这个实质上并不等价的交换，在这个交换里，你会通过现金，通过时间，通过自认为能够交换的一切，来和制片人做交易。</p>\n<p>为了这肾上腺素突涌的点，制片人大费脑经。所以，中级的游戏，是在游戏里多留你一会是一会，多一些时间，突涌的点就会多一些，你进行交换的概率也大一些。高级的游戏，是让你主动找它，主动找那些突涌的点，时时刻刻牵着你在游戏中找满足。</p>\n<p>你觉得的快乐，并不是快乐，只能称作临时的心里满足。而对于你肾上腺素的压榨，更深切来说，可能不仅是压榨，更多的是欺骗。毕竟一次次的交易，谁又能为那个虚拟的戒指进行定价？朋友，制片人欺骗了你，你的肾上腺素，不止那个价。</p>\n<h5 id=\"人生不是游戏。游戏有场景，人生却无制片人。\"><a href=\"#人生不是游戏。游戏有场景，人生却无制片人。\" class=\"headerlink\" title=\"人生不是游戏。游戏有场景，人生却无制片人。\"></a>人生不是游戏。游戏有场景，人生却无制片人。</h5><p>我写下这篇关于游戏的文章，是我2018年的人生感悟之一。</p>\n<p>对于没怎么玩过游戏的朋友来说，我建议你玩玩游戏。游戏本没有对错，它就像食材、电影、戏剧一样可以丰富你的生活。如果在你的人生中没有经历过几场游戏，那么人生里总会缺少点什么。如果非要说这缺少的是什么，我们可以把它理解为你和朋友饭后的谈资。</p>\n<p>对于成谜游戏的朋友，我希望你能够了解到，为了你和一群像你一样的朋友，制片人没日没夜的付出，最后他们很可能还要限制你们的游戏时间，虽然对他们来说，这很矛盾。我更希望你能认知到虚拟和现实的不同，认识到捏在手里的一百块人民币和游戏里的一百万金币的区别。每次击杀Boss和英雄升级的激动，那不是快乐，只是用自己的时间不等价交换过来的临时满足。而你的人生中，用来换取临时满足感的肾上腺素并没有那么多，有那么几次，就够了。</p>\n<p>游戏内无对错，游戏外有成败。</p>\n<p>游戏带来的临时满足并不是快乐，快乐一定来源于真实场景过度。快乐一定是舒缓的持久的心情愉悦的。我抽烟恶习好多年了，每支烟的尼古丁带来的满足感有效期不过2小时。游戏带来的临时满足，或许连百分之一支烟带来的有效期还要少。</p>\n<p>我们的人生之所以精妙，就是因为，人生，没有制片人。</p>\n<hr>\n<p>自从移动互联网发展起来的这几年，每年的这个时候都是资本寒冬。<br>今年也和去年、前年、大前年一样，各种公司倒闭，部门裁员。<br>不过也许是我又大了一岁，今年的杭州感觉真的冷啊。<br>嗯，感觉是比去年冷一些。<br>就拿下雪来说，还没有跨年，这都两场雪了。</p>"},{"title":"老博新开 祭首","date":"2018-10-15T13:54:03.000Z","_content":"\n好久没有写博客了，猛的一下打字，久旱逢甘霖，突破九重天。\n\n开始的CSDN博，到后面私有博，现在的静态博。虽然都挺方便的，但是变迁中感觉自己原来越懒了，要啥维护，就静态的！\n\n最近几年，养精蓄锐全是瞎扯，不过在我身上发生的一些事情，倒是值得简要回味一下。\n\n<!-- more -->\n\n女儿现在快两岁了，很可爱。我和老婆想了好久都没有起好她的名字，最后朋友来看孩子，帮我们从诗经《九歌》中取了一段`扬枹兮拊鼓，疏缓节兮安歌`。我们给孩子取名`杨安歌`。她走路说话都比较晚，现在可以学着我们咿呀两句了，跑的也比较快，挺闹人，但也开心。\n\n老婆全职带孩子，我们也闹了好几次，最后都回归了现实。老婆想上班，也有大想法。希望我们以后能够实现。和老婆的婚礼是在老家进行的，比较简单。孩子也参加了我们的婚礼。后面打算补上蜜月。\n\n经历了两次稅改，上次多少年前不想去查了，这次就在今年。可是没觉得变好了，什么都在升值，买菜买衣全是稅。想到了捕蛇者说。\n\n房子价格这两年可真的是疯了。如果让我形容，那就像大跃进一样，举国性，大跨度。我在一年前结婚了，现在还没有一个房子。不过我老家的房子倒是挺大的，我也不知道还能不能习惯老家的生活。\n\n经历了一些工作、生活上的细节，对人生也开放乐观老练了很多。比如家庭，朋友，工作，生活。这些可以简单聊聊，放在其他博文里面说，这里不写了，值得回味。\n\n我的记性本来很差，最近感觉越来越差了。我真怕老了一些后，会老年痴呆。知道我记性差的，也就老婆，因为其他人，和他们说，他们都不信。\n\n最近三年吧，工作虽无建树，倒是有了妻儿，思想上也有了很大程度的提升。现在孩子大一些了，想发力了。在思考一下，看看什么时候是出路。\n\n对于工作上，进步最大的一定是处人处事。这玩意，俗称情商。智商不够情商补，这句话本身虽然有点骂人，但绝对是真理。不过最后我思考了这玩意，情商依托的是环境。这里的环境，一是有人指导，二是有练习场所。虽然我理解的很迟，但也在弥补二十年的空白。我也会关注我的孩子。所以说，一代又一代，生活的方式虽然不同，但年轮至少是往前的。\n\n昨晚老婆说，除了和你一起出来转转看看这霓虹大灯，哪里都没有去过了。我说我也是，最近几年，大门不出二门不迈的。\n电影院没有去过，KTV没有去过，更别说旅游了，就是很近的景点，都没怎么去过。\n我们一致把矛头指向了孩子，这坑货，毁了我和老婆的热恋期、蜜月期、独处期。一把屎一把尿的，我虽然没有太出力，倒是辛苦了老婆。\n我和老婆，带着孩子，还有家里的一条狗名叫`闹闹`，简单生活好几年。\n\n___\n\nGoogle的“蜻蜓”，不出意外是肯定要在Google离开中国8年后重新入华了。\n开心也不开心。\n开心大陆人有机会摆脱百度这个坑爹玩意了。\n不开心信息的剪裁与封锁。\n毕竟，媒体的力量，非神力，无法抗拒。\n\n___\n\n`2018.12.18 13:04:00更新`\n几分钟前收到消息，“蜻蜓”项目终止了。\n感慨啊，Google员工的力量的确不小啊。\n虽然该项目的终止肯定不是完全因为员工的反对，但员工的反对肯定引导了项目的终止。\n外界声音：Google你不能这样，“蜻蜓”带来的危害会很大，被人为干预的搜索，肯定会造成使用者信息的不透明和方向的缺失。","source":"_posts/老博新开.md","raw":"---\ntitle: 老博新开 祭首\ndate: 2018-10-15 21:54:03\ncategories:\n- 琐事\ntags:\n- Life\n---\n\n好久没有写博客了，猛的一下打字，久旱逢甘霖，突破九重天。\n\n开始的CSDN博，到后面私有博，现在的静态博。虽然都挺方便的，但是变迁中感觉自己原来越懒了，要啥维护，就静态的！\n\n最近几年，养精蓄锐全是瞎扯，不过在我身上发生的一些事情，倒是值得简要回味一下。\n\n<!-- more -->\n\n女儿现在快两岁了，很可爱。我和老婆想了好久都没有起好她的名字，最后朋友来看孩子，帮我们从诗经《九歌》中取了一段`扬枹兮拊鼓，疏缓节兮安歌`。我们给孩子取名`杨安歌`。她走路说话都比较晚，现在可以学着我们咿呀两句了，跑的也比较快，挺闹人，但也开心。\n\n老婆全职带孩子，我们也闹了好几次，最后都回归了现实。老婆想上班，也有大想法。希望我们以后能够实现。和老婆的婚礼是在老家进行的，比较简单。孩子也参加了我们的婚礼。后面打算补上蜜月。\n\n经历了两次稅改，上次多少年前不想去查了，这次就在今年。可是没觉得变好了，什么都在升值，买菜买衣全是稅。想到了捕蛇者说。\n\n房子价格这两年可真的是疯了。如果让我形容，那就像大跃进一样，举国性，大跨度。我在一年前结婚了，现在还没有一个房子。不过我老家的房子倒是挺大的，我也不知道还能不能习惯老家的生活。\n\n经历了一些工作、生活上的细节，对人生也开放乐观老练了很多。比如家庭，朋友，工作，生活。这些可以简单聊聊，放在其他博文里面说，这里不写了，值得回味。\n\n我的记性本来很差，最近感觉越来越差了。我真怕老了一些后，会老年痴呆。知道我记性差的，也就老婆，因为其他人，和他们说，他们都不信。\n\n最近三年吧，工作虽无建树，倒是有了妻儿，思想上也有了很大程度的提升。现在孩子大一些了，想发力了。在思考一下，看看什么时候是出路。\n\n对于工作上，进步最大的一定是处人处事。这玩意，俗称情商。智商不够情商补，这句话本身虽然有点骂人，但绝对是真理。不过最后我思考了这玩意，情商依托的是环境。这里的环境，一是有人指导，二是有练习场所。虽然我理解的很迟，但也在弥补二十年的空白。我也会关注我的孩子。所以说，一代又一代，生活的方式虽然不同，但年轮至少是往前的。\n\n昨晚老婆说，除了和你一起出来转转看看这霓虹大灯，哪里都没有去过了。我说我也是，最近几年，大门不出二门不迈的。\n电影院没有去过，KTV没有去过，更别说旅游了，就是很近的景点，都没怎么去过。\n我们一致把矛头指向了孩子，这坑货，毁了我和老婆的热恋期、蜜月期、独处期。一把屎一把尿的，我虽然没有太出力，倒是辛苦了老婆。\n我和老婆，带着孩子，还有家里的一条狗名叫`闹闹`，简单生活好几年。\n\n___\n\nGoogle的“蜻蜓”，不出意外是肯定要在Google离开中国8年后重新入华了。\n开心也不开心。\n开心大陆人有机会摆脱百度这个坑爹玩意了。\n不开心信息的剪裁与封锁。\n毕竟，媒体的力量，非神力，无法抗拒。\n\n___\n\n`2018.12.18 13:04:00更新`\n几分钟前收到消息，“蜻蜓”项目终止了。\n感慨啊，Google员工的力量的确不小啊。\n虽然该项目的终止肯定不是完全因为员工的反对，但员工的反对肯定引导了项目的终止。\n外界声音：Google你不能这样，“蜻蜓”带来的危害会很大，被人为干预的搜索，肯定会造成使用者信息的不透明和方向的缺失。","slug":"老博新开","published":1,"updated":"2019-02-24T07:17:54.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjytswkzb000oodgpf3ibytm0","content":"<p>好久没有写博客了，猛的一下打字，久旱逢甘霖，突破九重天。</p>\n<p>开始的CSDN博，到后面私有博，现在的静态博。虽然都挺方便的，但是变迁中感觉自己原来越懒了，要啥维护，就静态的！</p>\n<p>最近几年，养精蓄锐全是瞎扯，不过在我身上发生的一些事情，倒是值得简要回味一下。</p>\n<a id=\"more\"></a>\n\n<p>女儿现在快两岁了，很可爱。我和老婆想了好久都没有起好她的名字，最后朋友来看孩子，帮我们从诗经《九歌》中取了一段<code>扬枹兮拊鼓，疏缓节兮安歌</code>。我们给孩子取名<code>杨安歌</code>。她走路说话都比较晚，现在可以学着我们咿呀两句了，跑的也比较快，挺闹人，但也开心。</p>\n<p>老婆全职带孩子，我们也闹了好几次，最后都回归了现实。老婆想上班，也有大想法。希望我们以后能够实现。和老婆的婚礼是在老家进行的，比较简单。孩子也参加了我们的婚礼。后面打算补上蜜月。</p>\n<p>经历了两次稅改，上次多少年前不想去查了，这次就在今年。可是没觉得变好了，什么都在升值，买菜买衣全是稅。想到了捕蛇者说。</p>\n<p>房子价格这两年可真的是疯了。如果让我形容，那就像大跃进一样，举国性，大跨度。我在一年前结婚了，现在还没有一个房子。不过我老家的房子倒是挺大的，我也不知道还能不能习惯老家的生活。</p>\n<p>经历了一些工作、生活上的细节，对人生也开放乐观老练了很多。比如家庭，朋友，工作，生活。这些可以简单聊聊，放在其他博文里面说，这里不写了，值得回味。</p>\n<p>我的记性本来很差，最近感觉越来越差了。我真怕老了一些后，会老年痴呆。知道我记性差的，也就老婆，因为其他人，和他们说，他们都不信。</p>\n<p>最近三年吧，工作虽无建树，倒是有了妻儿，思想上也有了很大程度的提升。现在孩子大一些了，想发力了。在思考一下，看看什么时候是出路。</p>\n<p>对于工作上，进步最大的一定是处人处事。这玩意，俗称情商。智商不够情商补，这句话本身虽然有点骂人，但绝对是真理。不过最后我思考了这玩意，情商依托的是环境。这里的环境，一是有人指导，二是有练习场所。虽然我理解的很迟，但也在弥补二十年的空白。我也会关注我的孩子。所以说，一代又一代，生活的方式虽然不同，但年轮至少是往前的。</p>\n<p>昨晚老婆说，除了和你一起出来转转看看这霓虹大灯，哪里都没有去过了。我说我也是，最近几年，大门不出二门不迈的。<br>电影院没有去过，KTV没有去过，更别说旅游了，就是很近的景点，都没怎么去过。<br>我们一致把矛头指向了孩子，这坑货，毁了我和老婆的热恋期、蜜月期、独处期。一把屎一把尿的，我虽然没有太出力，倒是辛苦了老婆。<br>我和老婆，带着孩子，还有家里的一条狗名叫<code>闹闹</code>，简单生活好几年。</p>\n<hr>\n<p>Google的“蜻蜓”，不出意外是肯定要在Google离开中国8年后重新入华了。<br>开心也不开心。<br>开心大陆人有机会摆脱百度这个坑爹玩意了。<br>不开心信息的剪裁与封锁。<br>毕竟，媒体的力量，非神力，无法抗拒。</p>\n<hr>\n<p><code>2018.12.18 13:04:00更新</code><br>几分钟前收到消息，“蜻蜓”项目终止了。<br>感慨啊，Google员工的力量的确不小啊。<br>虽然该项目的终止肯定不是完全因为员工的反对，但员工的反对肯定引导了项目的终止。<br>外界声音：Google你不能这样，“蜻蜓”带来的危害会很大，被人为干预的搜索，肯定会造成使用者信息的不透明和方向的缺失。</p>\n","site":{"data":{}},"excerpt":"<p>好久没有写博客了，猛的一下打字，久旱逢甘霖，突破九重天。</p>\n<p>开始的CSDN博，到后面私有博，现在的静态博。虽然都挺方便的，但是变迁中感觉自己原来越懒了，要啥维护，就静态的！</p>\n<p>最近几年，养精蓄锐全是瞎扯，不过在我身上发生的一些事情，倒是值得简要回味一下。</p>","more":"<p>女儿现在快两岁了，很可爱。我和老婆想了好久都没有起好她的名字，最后朋友来看孩子，帮我们从诗经《九歌》中取了一段<code>扬枹兮拊鼓，疏缓节兮安歌</code>。我们给孩子取名<code>杨安歌</code>。她走路说话都比较晚，现在可以学着我们咿呀两句了，跑的也比较快，挺闹人，但也开心。</p>\n<p>老婆全职带孩子，我们也闹了好几次，最后都回归了现实。老婆想上班，也有大想法。希望我们以后能够实现。和老婆的婚礼是在老家进行的，比较简单。孩子也参加了我们的婚礼。后面打算补上蜜月。</p>\n<p>经历了两次稅改，上次多少年前不想去查了，这次就在今年。可是没觉得变好了，什么都在升值，买菜买衣全是稅。想到了捕蛇者说。</p>\n<p>房子价格这两年可真的是疯了。如果让我形容，那就像大跃进一样，举国性，大跨度。我在一年前结婚了，现在还没有一个房子。不过我老家的房子倒是挺大的，我也不知道还能不能习惯老家的生活。</p>\n<p>经历了一些工作、生活上的细节，对人生也开放乐观老练了很多。比如家庭，朋友，工作，生活。这些可以简单聊聊，放在其他博文里面说，这里不写了，值得回味。</p>\n<p>我的记性本来很差，最近感觉越来越差了。我真怕老了一些后，会老年痴呆。知道我记性差的，也就老婆，因为其他人，和他们说，他们都不信。</p>\n<p>最近三年吧，工作虽无建树，倒是有了妻儿，思想上也有了很大程度的提升。现在孩子大一些了，想发力了。在思考一下，看看什么时候是出路。</p>\n<p>对于工作上，进步最大的一定是处人处事。这玩意，俗称情商。智商不够情商补，这句话本身虽然有点骂人，但绝对是真理。不过最后我思考了这玩意，情商依托的是环境。这里的环境，一是有人指导，二是有练习场所。虽然我理解的很迟，但也在弥补二十年的空白。我也会关注我的孩子。所以说，一代又一代，生活的方式虽然不同，但年轮至少是往前的。</p>\n<p>昨晚老婆说，除了和你一起出来转转看看这霓虹大灯，哪里都没有去过了。我说我也是，最近几年，大门不出二门不迈的。<br>电影院没有去过，KTV没有去过，更别说旅游了，就是很近的景点，都没怎么去过。<br>我们一致把矛头指向了孩子，这坑货，毁了我和老婆的热恋期、蜜月期、独处期。一把屎一把尿的，我虽然没有太出力，倒是辛苦了老婆。<br>我和老婆，带着孩子，还有家里的一条狗名叫<code>闹闹</code>，简单生活好几年。</p>\n<hr>\n<p>Google的“蜻蜓”，不出意外是肯定要在Google离开中国8年后重新入华了。<br>开心也不开心。<br>开心大陆人有机会摆脱百度这个坑爹玩意了。<br>不开心信息的剪裁与封锁。<br>毕竟，媒体的力量，非神力，无法抗拒。</p>\n<hr>\n<p><code>2018.12.18 13:04:00更新</code><br>几分钟前收到消息，“蜻蜓”项目终止了。<br>感慨啊，Google员工的力量的确不小啊。<br>虽然该项目的终止肯定不是完全因为员工的反对，但员工的反对肯定引导了项目的终止。<br>外界声音：Google你不能这样，“蜻蜓”带来的危害会很大，被人为干预的搜索，肯定会造成使用者信息的不透明和方向的缺失。</p>"},{"title":"网络基础协议","date":"2019-03-01T03:47:37.000Z","keywords":"网络协议、Get、Post、路由器、交换机、HTTPS、RTMP、TCP、UDP、SSL","_content":"\n### 互联网规则\n\n1. 互联网本质，就是数据在一定的协议基础上，在多台主机之间，进行数据的流动共享。\n2. 网络传输协议非常多，不是简简单单的HTTP/HTTPS协议，我们App看的直播就有RTMP、私有UDP协议、DNS(+CDN加速)等等。\n3. 数据在网络上基于二进制包进行传输，传输规则基于7层网络协议，4/5层网络协议便于理解\n4. 数据包在传输过程中几个关键不可缺少的字段：端口、MAC地址、IP地址。可以没有应用层的HTTP等协议，但是绝对不可能没有网络层、Mac层和物理层。没有这三层，数据是不可能找到对应接收方的，甚至这个数据包都出不了你的电脑端口。可以没有应用层等，如ping一个主机使用的ICMP就是网络层协议，就没有应用层。\n\n### HTTP/HTTPS规则\n\n1. HTTP协议是无状态的协议，所以需要Session、Cookie\n2. HTTP没有三次握手，握手的是TCP。应用层只要通过TCP必定会有三次握手。握手并不是C-S之间有一条网络管道进行连接，而是两端各自维护相应的状态，当双方状态都处于runing的时候(双方套接字处于完成状态，本质是Socket套接字，UDP也适用该规则)，代表双方连接建立\n3. HTTPS的公私钥认证，很多情况下只发生一次，公私钥认证的用途仅仅是为C-S之间的后续通讯建立对称密钥。后续的网络请求不出问题是不会重新公私钥认证的。因为服务器会在第一次公私钥认证的时候，生成Session ID，该Session ID指向对称密钥并保存。客户端一般也会保存这个Session ID和对称密钥，后面客户端提交Session ID到服务器就可以建立起来安全通信。HTTP1.0就可以支持keep alive，多个网络请求可以复用建立的连接，这个时候更加不需要公私钥认证了。\n4. HTTPS的公私钥认证，生成的对称密钥是由C生成一个随机数、S生成一个随机数、C再生成一个随机数这三个数完成的。公私钥认证的开始，是没有加密的，因为客户端还没有拿到公钥。所以前两个随机数是可以抓包拿到的，但是第三个随机数是C通过公钥加密传输的，所以第三个随机数的安全传输才是整个安全机制的重点。（前两个随机数被串改了也没关系，因为C和S的随机数不一样了，生成的对称密钥也不一样，后面的数据传输加解密过程中，就无法完成校验了）有个重点是，为什么需要3个随机数？而不能直接传输上面的第三次随机数？因为随机数为了确保随机性，而随机性不能完全依靠一方来确定，因为很可能不随机。而3个随机数，已经可以很好的保障最后生成的对称密钥的随机性了。\n\n<!-- more -->\n\n### 网络分层\n\n##### 五层分\n\n1. 物理层\n2. Mac层（链路层）\n3. 网络层\n4. 传输层\n5. 应用层\n\n##### 四层分\n\n1. 网络接口层\n2. 网络层\n3. 传输层\n4. 应用层\n\n##### 七层分\n\n1. 物理层\n2. Mac层（链路层）\n3. 网络层\n4. 传输层\n5. 会话层\n6. 表达层\n7. 应用层\n\n### 相关分层协议\n\n1. 物理层\n    * 网线、光纤、交叉线、集线器（HUB，就是现在电商网站上买的那些USB扩展口）\n2. Mac层（链路层）\n    * 交换机、ARP<通过IP找主机Mac地址>、RARP<通过主机Mac地址找IP>、VLAN\n3. 网络层\n    * 路由器、ICMP<ping使用的主协议>，IP\n4. 传输层\n    * TCP、UDP、其他\n5. 会话层\n   * SSL/TLS<部分>\n6. 表达层\n   * SSL/TLS<部分>\n7. 应用层\n    * HTTP、HTTPS、FTP、RTMP、DNS(HTTPDNS)、DHCP（自动获取ip地址协议）\n\n> 大纲如下  \n> 逐步更新，更新时间未知  \n\n### 数据是怎么通过协议进行传输的\n\n1. 等待更新\n2. 等待更新\n\n### 网络分层在数据传输过程中的具体体现\n\n1. 等待更新\n2. 等待更新\n\n### 数据是怎么在协议的基础上保持安全的\n\n1. 等待更新\n2. 等待更新\n\n### 我们如何访问到Baidu.com的\n\n1. 等待更新\n2. 等待更新\n\n### 直播是如何贴近我们生活的\n\n1. 等待更新\n2. 等待更新\n\n### 网络资源加速是如何实现的\n\n1. 等待更新\n2. 等待更新\n\n### 移动端HTTPS网络请求的优化方案\n\n1. 等待更新\n2. 等待更新\n\n### 结语\n","source":"_posts/网络基础协议.md","raw":"---\ntitle: 网络基础协议\ndate: 2019-03-01 11:47:37\ncategories:\n- 技术\ntags:\n- 计算机原理\n- 网络\nkeywords: 网络协议、Get、Post、路由器、交换机、HTTPS、RTMP、TCP、UDP、SSL\n---\n\n### 互联网规则\n\n1. 互联网本质，就是数据在一定的协议基础上，在多台主机之间，进行数据的流动共享。\n2. 网络传输协议非常多，不是简简单单的HTTP/HTTPS协议，我们App看的直播就有RTMP、私有UDP协议、DNS(+CDN加速)等等。\n3. 数据在网络上基于二进制包进行传输，传输规则基于7层网络协议，4/5层网络协议便于理解\n4. 数据包在传输过程中几个关键不可缺少的字段：端口、MAC地址、IP地址。可以没有应用层的HTTP等协议，但是绝对不可能没有网络层、Mac层和物理层。没有这三层，数据是不可能找到对应接收方的，甚至这个数据包都出不了你的电脑端口。可以没有应用层等，如ping一个主机使用的ICMP就是网络层协议，就没有应用层。\n\n### HTTP/HTTPS规则\n\n1. HTTP协议是无状态的协议，所以需要Session、Cookie\n2. HTTP没有三次握手，握手的是TCP。应用层只要通过TCP必定会有三次握手。握手并不是C-S之间有一条网络管道进行连接，而是两端各自维护相应的状态，当双方状态都处于runing的时候(双方套接字处于完成状态，本质是Socket套接字，UDP也适用该规则)，代表双方连接建立\n3. HTTPS的公私钥认证，很多情况下只发生一次，公私钥认证的用途仅仅是为C-S之间的后续通讯建立对称密钥。后续的网络请求不出问题是不会重新公私钥认证的。因为服务器会在第一次公私钥认证的时候，生成Session ID，该Session ID指向对称密钥并保存。客户端一般也会保存这个Session ID和对称密钥，后面客户端提交Session ID到服务器就可以建立起来安全通信。HTTP1.0就可以支持keep alive，多个网络请求可以复用建立的连接，这个时候更加不需要公私钥认证了。\n4. HTTPS的公私钥认证，生成的对称密钥是由C生成一个随机数、S生成一个随机数、C再生成一个随机数这三个数完成的。公私钥认证的开始，是没有加密的，因为客户端还没有拿到公钥。所以前两个随机数是可以抓包拿到的，但是第三个随机数是C通过公钥加密传输的，所以第三个随机数的安全传输才是整个安全机制的重点。（前两个随机数被串改了也没关系，因为C和S的随机数不一样了，生成的对称密钥也不一样，后面的数据传输加解密过程中，就无法完成校验了）有个重点是，为什么需要3个随机数？而不能直接传输上面的第三次随机数？因为随机数为了确保随机性，而随机性不能完全依靠一方来确定，因为很可能不随机。而3个随机数，已经可以很好的保障最后生成的对称密钥的随机性了。\n\n<!-- more -->\n\n### 网络分层\n\n##### 五层分\n\n1. 物理层\n2. Mac层（链路层）\n3. 网络层\n4. 传输层\n5. 应用层\n\n##### 四层分\n\n1. 网络接口层\n2. 网络层\n3. 传输层\n4. 应用层\n\n##### 七层分\n\n1. 物理层\n2. Mac层（链路层）\n3. 网络层\n4. 传输层\n5. 会话层\n6. 表达层\n7. 应用层\n\n### 相关分层协议\n\n1. 物理层\n    * 网线、光纤、交叉线、集线器（HUB，就是现在电商网站上买的那些USB扩展口）\n2. Mac层（链路层）\n    * 交换机、ARP<通过IP找主机Mac地址>、RARP<通过主机Mac地址找IP>、VLAN\n3. 网络层\n    * 路由器、ICMP<ping使用的主协议>，IP\n4. 传输层\n    * TCP、UDP、其他\n5. 会话层\n   * SSL/TLS<部分>\n6. 表达层\n   * SSL/TLS<部分>\n7. 应用层\n    * HTTP、HTTPS、FTP、RTMP、DNS(HTTPDNS)、DHCP（自动获取ip地址协议）\n\n> 大纲如下  \n> 逐步更新，更新时间未知  \n\n### 数据是怎么通过协议进行传输的\n\n1. 等待更新\n2. 等待更新\n\n### 网络分层在数据传输过程中的具体体现\n\n1. 等待更新\n2. 等待更新\n\n### 数据是怎么在协议的基础上保持安全的\n\n1. 等待更新\n2. 等待更新\n\n### 我们如何访问到Baidu.com的\n\n1. 等待更新\n2. 等待更新\n\n### 直播是如何贴近我们生活的\n\n1. 等待更新\n2. 等待更新\n\n### 网络资源加速是如何实现的\n\n1. 等待更新\n2. 等待更新\n\n### 移动端HTTPS网络请求的优化方案\n\n1. 等待更新\n2. 等待更新\n\n### 结语\n","slug":"网络基础协议","published":1,"updated":"2019-08-02T05:55:00.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjytswkzc000qodgpodddgfmb","content":"<h3 id=\"互联网规则\"><a href=\"#互联网规则\" class=\"headerlink\" title=\"互联网规则\"></a>互联网规则</h3><ol>\n<li>互联网本质，就是数据在一定的协议基础上，在多台主机之间，进行数据的流动共享。</li>\n<li>网络传输协议非常多，不是简简单单的HTTP/HTTPS协议，我们App看的直播就有RTMP、私有UDP协议、DNS(+CDN加速)等等。</li>\n<li>数据在网络上基于二进制包进行传输，传输规则基于7层网络协议，4/5层网络协议便于理解</li>\n<li>数据包在传输过程中几个关键不可缺少的字段：端口、MAC地址、IP地址。可以没有应用层的HTTP等协议，但是绝对不可能没有网络层、Mac层和物理层。没有这三层，数据是不可能找到对应接收方的，甚至这个数据包都出不了你的电脑端口。可以没有应用层等，如ping一个主机使用的ICMP就是网络层协议，就没有应用层。</li>\n</ol>\n<h3 id=\"HTTP-HTTPS规则\"><a href=\"#HTTP-HTTPS规则\" class=\"headerlink\" title=\"HTTP/HTTPS规则\"></a>HTTP/HTTPS规则</h3><ol>\n<li>HTTP协议是无状态的协议，所以需要Session、Cookie</li>\n<li>HTTP没有三次握手，握手的是TCP。应用层只要通过TCP必定会有三次握手。握手并不是C-S之间有一条网络管道进行连接，而是两端各自维护相应的状态，当双方状态都处于runing的时候(双方套接字处于完成状态，本质是Socket套接字，UDP也适用该规则)，代表双方连接建立</li>\n<li>HTTPS的公私钥认证，很多情况下只发生一次，公私钥认证的用途仅仅是为C-S之间的后续通讯建立对称密钥。后续的网络请求不出问题是不会重新公私钥认证的。因为服务器会在第一次公私钥认证的时候，生成Session ID，该Session ID指向对称密钥并保存。客户端一般也会保存这个Session ID和对称密钥，后面客户端提交Session ID到服务器就可以建立起来安全通信。HTTP1.0就可以支持keep alive，多个网络请求可以复用建立的连接，这个时候更加不需要公私钥认证了。</li>\n<li>HTTPS的公私钥认证，生成的对称密钥是由C生成一个随机数、S生成一个随机数、C再生成一个随机数这三个数完成的。公私钥认证的开始，是没有加密的，因为客户端还没有拿到公钥。所以前两个随机数是可以抓包拿到的，但是第三个随机数是C通过公钥加密传输的，所以第三个随机数的安全传输才是整个安全机制的重点。（前两个随机数被串改了也没关系，因为C和S的随机数不一样了，生成的对称密钥也不一样，后面的数据传输加解密过程中，就无法完成校验了）有个重点是，为什么需要3个随机数？而不能直接传输上面的第三次随机数？因为随机数为了确保随机性，而随机性不能完全依靠一方来确定，因为很可能不随机。而3个随机数，已经可以很好的保障最后生成的对称密钥的随机性了。</li>\n</ol>\n<a id=\"more\"></a>\n\n<h3 id=\"网络分层\"><a href=\"#网络分层\" class=\"headerlink\" title=\"网络分层\"></a>网络分层</h3><h5 id=\"五层分\"><a href=\"#五层分\" class=\"headerlink\" title=\"五层分\"></a>五层分</h5><ol>\n<li>物理层</li>\n<li>Mac层（链路层）</li>\n<li>网络层</li>\n<li>传输层</li>\n<li>应用层</li>\n</ol>\n<h5 id=\"四层分\"><a href=\"#四层分\" class=\"headerlink\" title=\"四层分\"></a>四层分</h5><ol>\n<li>网络接口层</li>\n<li>网络层</li>\n<li>传输层</li>\n<li>应用层</li>\n</ol>\n<h5 id=\"七层分\"><a href=\"#七层分\" class=\"headerlink\" title=\"七层分\"></a>七层分</h5><ol>\n<li>物理层</li>\n<li>Mac层（链路层）</li>\n<li>网络层</li>\n<li>传输层</li>\n<li>会话层</li>\n<li>表达层</li>\n<li>应用层</li>\n</ol>\n<h3 id=\"相关分层协议\"><a href=\"#相关分层协议\" class=\"headerlink\" title=\"相关分层协议\"></a>相关分层协议</h3><ol>\n<li>物理层<ul>\n<li>网线、光纤、交叉线、集线器（HUB，就是现在电商网站上买的那些USB扩展口）</li>\n</ul>\n</li>\n<li>Mac层（链路层）<ul>\n<li>交换机、ARP&lt;通过IP找主机Mac地址&gt;、RARP&lt;通过主机Mac地址找IP&gt;、VLAN</li>\n</ul>\n</li>\n<li>网络层<ul>\n<li>路由器、ICMP&lt;ping使用的主协议&gt;，IP</li>\n</ul>\n</li>\n<li>传输层<ul>\n<li>TCP、UDP、其他</li>\n</ul>\n</li>\n<li>会话层<ul>\n<li>SSL/TLS&lt;部分&gt;</li>\n</ul>\n</li>\n<li>表达层<ul>\n<li>SSL/TLS&lt;部分&gt;</li>\n</ul>\n</li>\n<li>应用层<ul>\n<li>HTTP、HTTPS、FTP、RTMP、DNS(HTTPDNS)、DHCP（自动获取ip地址协议）</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>大纲如下<br>逐步更新，更新时间未知  </p>\n</blockquote>\n<h3 id=\"数据是怎么通过协议进行传输的\"><a href=\"#数据是怎么通过协议进行传输的\" class=\"headerlink\" title=\"数据是怎么通过协议进行传输的\"></a>数据是怎么通过协议进行传输的</h3><ol>\n<li>等待更新</li>\n<li>等待更新</li>\n</ol>\n<h3 id=\"网络分层在数据传输过程中的具体体现\"><a href=\"#网络分层在数据传输过程中的具体体现\" class=\"headerlink\" title=\"网络分层在数据传输过程中的具体体现\"></a>网络分层在数据传输过程中的具体体现</h3><ol>\n<li>等待更新</li>\n<li>等待更新</li>\n</ol>\n<h3 id=\"数据是怎么在协议的基础上保持安全的\"><a href=\"#数据是怎么在协议的基础上保持安全的\" class=\"headerlink\" title=\"数据是怎么在协议的基础上保持安全的\"></a>数据是怎么在协议的基础上保持安全的</h3><ol>\n<li>等待更新</li>\n<li>等待更新</li>\n</ol>\n<h3 id=\"我们如何访问到Baidu-com的\"><a href=\"#我们如何访问到Baidu-com的\" class=\"headerlink\" title=\"我们如何访问到Baidu.com的\"></a>我们如何访问到Baidu.com的</h3><ol>\n<li>等待更新</li>\n<li>等待更新</li>\n</ol>\n<h3 id=\"直播是如何贴近我们生活的\"><a href=\"#直播是如何贴近我们生活的\" class=\"headerlink\" title=\"直播是如何贴近我们生活的\"></a>直播是如何贴近我们生活的</h3><ol>\n<li>等待更新</li>\n<li>等待更新</li>\n</ol>\n<h3 id=\"网络资源加速是如何实现的\"><a href=\"#网络资源加速是如何实现的\" class=\"headerlink\" title=\"网络资源加速是如何实现的\"></a>网络资源加速是如何实现的</h3><ol>\n<li>等待更新</li>\n<li>等待更新</li>\n</ol>\n<h3 id=\"移动端HTTPS网络请求的优化方案\"><a href=\"#移动端HTTPS网络请求的优化方案\" class=\"headerlink\" title=\"移动端HTTPS网络请求的优化方案\"></a>移动端HTTPS网络请求的优化方案</h3><ol>\n<li>等待更新</li>\n<li>等待更新</li>\n</ol>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3>","site":{"data":{}},"excerpt":"<h3 id=\"互联网规则\"><a href=\"#互联网规则\" class=\"headerlink\" title=\"互联网规则\"></a>互联网规则</h3><ol>\n<li>互联网本质，就是数据在一定的协议基础上，在多台主机之间，进行数据的流动共享。</li>\n<li>网络传输协议非常多，不是简简单单的HTTP/HTTPS协议，我们App看的直播就有RTMP、私有UDP协议、DNS(+CDN加速)等等。</li>\n<li>数据在网络上基于二进制包进行传输，传输规则基于7层网络协议，4/5层网络协议便于理解</li>\n<li>数据包在传输过程中几个关键不可缺少的字段：端口、MAC地址、IP地址。可以没有应用层的HTTP等协议，但是绝对不可能没有网络层、Mac层和物理层。没有这三层，数据是不可能找到对应接收方的，甚至这个数据包都出不了你的电脑端口。可以没有应用层等，如ping一个主机使用的ICMP就是网络层协议，就没有应用层。</li>\n</ol>\n<h3 id=\"HTTP-HTTPS规则\"><a href=\"#HTTP-HTTPS规则\" class=\"headerlink\" title=\"HTTP/HTTPS规则\"></a>HTTP/HTTPS规则</h3><ol>\n<li>HTTP协议是无状态的协议，所以需要Session、Cookie</li>\n<li>HTTP没有三次握手，握手的是TCP。应用层只要通过TCP必定会有三次握手。握手并不是C-S之间有一条网络管道进行连接，而是两端各自维护相应的状态，当双方状态都处于runing的时候(双方套接字处于完成状态，本质是Socket套接字，UDP也适用该规则)，代表双方连接建立</li>\n<li>HTTPS的公私钥认证，很多情况下只发生一次，公私钥认证的用途仅仅是为C-S之间的后续通讯建立对称密钥。后续的网络请求不出问题是不会重新公私钥认证的。因为服务器会在第一次公私钥认证的时候，生成Session ID，该Session ID指向对称密钥并保存。客户端一般也会保存这个Session ID和对称密钥，后面客户端提交Session ID到服务器就可以建立起来安全通信。HTTP1.0就可以支持keep alive，多个网络请求可以复用建立的连接，这个时候更加不需要公私钥认证了。</li>\n<li>HTTPS的公私钥认证，生成的对称密钥是由C生成一个随机数、S生成一个随机数、C再生成一个随机数这三个数完成的。公私钥认证的开始，是没有加密的，因为客户端还没有拿到公钥。所以前两个随机数是可以抓包拿到的，但是第三个随机数是C通过公钥加密传输的，所以第三个随机数的安全传输才是整个安全机制的重点。（前两个随机数被串改了也没关系，因为C和S的随机数不一样了，生成的对称密钥也不一样，后面的数据传输加解密过程中，就无法完成校验了）有个重点是，为什么需要3个随机数？而不能直接传输上面的第三次随机数？因为随机数为了确保随机性，而随机性不能完全依靠一方来确定，因为很可能不随机。而3个随机数，已经可以很好的保障最后生成的对称密钥的随机性了。</li>\n</ol>","more":"<h3 id=\"网络分层\"><a href=\"#网络分层\" class=\"headerlink\" title=\"网络分层\"></a>网络分层</h3><h5 id=\"五层分\"><a href=\"#五层分\" class=\"headerlink\" title=\"五层分\"></a>五层分</h5><ol>\n<li>物理层</li>\n<li>Mac层（链路层）</li>\n<li>网络层</li>\n<li>传输层</li>\n<li>应用层</li>\n</ol>\n<h5 id=\"四层分\"><a href=\"#四层分\" class=\"headerlink\" title=\"四层分\"></a>四层分</h5><ol>\n<li>网络接口层</li>\n<li>网络层</li>\n<li>传输层</li>\n<li>应用层</li>\n</ol>\n<h5 id=\"七层分\"><a href=\"#七层分\" class=\"headerlink\" title=\"七层分\"></a>七层分</h5><ol>\n<li>物理层</li>\n<li>Mac层（链路层）</li>\n<li>网络层</li>\n<li>传输层</li>\n<li>会话层</li>\n<li>表达层</li>\n<li>应用层</li>\n</ol>\n<h3 id=\"相关分层协议\"><a href=\"#相关分层协议\" class=\"headerlink\" title=\"相关分层协议\"></a>相关分层协议</h3><ol>\n<li>物理层<ul>\n<li>网线、光纤、交叉线、集线器（HUB，就是现在电商网站上买的那些USB扩展口）</li>\n</ul>\n</li>\n<li>Mac层（链路层）<ul>\n<li>交换机、ARP&lt;通过IP找主机Mac地址&gt;、RARP&lt;通过主机Mac地址找IP&gt;、VLAN</li>\n</ul>\n</li>\n<li>网络层<ul>\n<li>路由器、ICMP&lt;ping使用的主协议&gt;，IP</li>\n</ul>\n</li>\n<li>传输层<ul>\n<li>TCP、UDP、其他</li>\n</ul>\n</li>\n<li>会话层<ul>\n<li>SSL/TLS&lt;部分&gt;</li>\n</ul>\n</li>\n<li>表达层<ul>\n<li>SSL/TLS&lt;部分&gt;</li>\n</ul>\n</li>\n<li>应用层<ul>\n<li>HTTP、HTTPS、FTP、RTMP、DNS(HTTPDNS)、DHCP（自动获取ip地址协议）</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>大纲如下<br>逐步更新，更新时间未知  </p>\n</blockquote>\n<h3 id=\"数据是怎么通过协议进行传输的\"><a href=\"#数据是怎么通过协议进行传输的\" class=\"headerlink\" title=\"数据是怎么通过协议进行传输的\"></a>数据是怎么通过协议进行传输的</h3><ol>\n<li>等待更新</li>\n<li>等待更新</li>\n</ol>\n<h3 id=\"网络分层在数据传输过程中的具体体现\"><a href=\"#网络分层在数据传输过程中的具体体现\" class=\"headerlink\" title=\"网络分层在数据传输过程中的具体体现\"></a>网络分层在数据传输过程中的具体体现</h3><ol>\n<li>等待更新</li>\n<li>等待更新</li>\n</ol>\n<h3 id=\"数据是怎么在协议的基础上保持安全的\"><a href=\"#数据是怎么在协议的基础上保持安全的\" class=\"headerlink\" title=\"数据是怎么在协议的基础上保持安全的\"></a>数据是怎么在协议的基础上保持安全的</h3><ol>\n<li>等待更新</li>\n<li>等待更新</li>\n</ol>\n<h3 id=\"我们如何访问到Baidu-com的\"><a href=\"#我们如何访问到Baidu-com的\" class=\"headerlink\" title=\"我们如何访问到Baidu.com的\"></a>我们如何访问到Baidu.com的</h3><ol>\n<li>等待更新</li>\n<li>等待更新</li>\n</ol>\n<h3 id=\"直播是如何贴近我们生活的\"><a href=\"#直播是如何贴近我们生活的\" class=\"headerlink\" title=\"直播是如何贴近我们生活的\"></a>直播是如何贴近我们生活的</h3><ol>\n<li>等待更新</li>\n<li>等待更新</li>\n</ol>\n<h3 id=\"网络资源加速是如何实现的\"><a href=\"#网络资源加速是如何实现的\" class=\"headerlink\" title=\"网络资源加速是如何实现的\"></a>网络资源加速是如何实现的</h3><ol>\n<li>等待更新</li>\n<li>等待更新</li>\n</ol>\n<h3 id=\"移动端HTTPS网络请求的优化方案\"><a href=\"#移动端HTTPS网络请求的优化方案\" class=\"headerlink\" title=\"移动端HTTPS网络请求的优化方案\"></a>移动端HTTPS网络请求的优化方案</h3><ol>\n<li>等待更新</li>\n<li>等待更新</li>\n</ol>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3>"},{"title":"谈谈事件驱动","date":"2018-11-08T07:10:08.000Z","keywords":"事件驱动,Runloop,Runtime,Event loop,协程,多并发","_content":"\n`事件驱动`这个技术方案，可以说实实在在影响了这些年编程界的技术方向。最实际的受用者应该就是`异步编程`了，如I/O。\n\n我所认知到的语言，都是事件驱动的使用者，受益者，推动者。\n\n<!-- more -->\n\n很多朋友可能更多的停留在精通官方API阶段，还没有更深层次的认知计算机原理，不晓得代码是怎么工作的。我不精通官方API，计算机原理也认知浅薄，但在自己认知的语言范围内了解了一些。我感到庆幸，希望和大家分享。\n\n### `事件驱动`的形象描述\n\nA和家人去外婆家取了个号。A一直在门口等着，是阻塞。A出去玩一会，门分钟去外婆家门口看看到了自己号没有，是监听。A去一个衣服店看衣服去了，到了自己号的时候，收到外婆家发的短信消息后直接去外婆家，是回调。\n\n上面这个例子，变种极多也千篇一律。串行并行、同步异步、阻塞非阻塞都可以用。我们用这个例子来说`事件驱动`。\n\n这里分析第三种情况，A去看衣服去了，这个时候外婆家的号叫到自己，并短信通知了自己，这个行为的分析。\n\nA查看短信的行为和外婆家发出短信的行为，就是我们分析的重点。\n\n外婆家为了发出这个短信，需要耗时，甚至外婆家也不知道耗时多久。所以外婆家需要做的是，一定要在A的号到了的时候，准确及时的发出短信，这是一个事件的发出。\n\nA虽然有手机，但是看不看短信是A的事情。所以A一定要在看到短信之后立即作出处理判断，这是一个事件的反馈。\n\n但是A为了能够尽快吃到饭，多做了几手准备，他把西贝、海底捞几家店的号都拿了，打算谁先叫到自己，就去谁家。\n\n所以A接受到的事件是多个并且不确定的。\n\n`Life is thread`，我们把A比作一个线程。A能够及时响应各家店面发来的消息，原因就是线程里面有一个`while (true):{pass;}`这样的循环。依靠CPU这个超强大脑控制器，只要有事件需要通知到线程，线程里面的这个while循环就会获取到并及时处理。\n    \n所以`事件驱动`的本质是：**一方及时发出事件，通过CPU时间片实时轮转事件循环队列并告知到while循环以通知到另一方，另一方及时响应事件。**\n\n### iOS中的使用\n##### `Runloop`\n`Runloop`可以说把`事件驱动`利用到了极致。你能想象，如果没有`Runloop`，你就真的不能使用iPhone手机了！\n`Runloop`依托于线程。我们手势点击一个按钮，就是在操作主线程里的`Runloop`。\n`Runloop`通过`事件驱动`在以下8种状态下实时循环切换，用于省电的同时又能够及时处理用户界面反馈。\n```\ntypedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {\n    kCFRunLoopEntry         = (1UL << 0), // 即将进入Loop\n    kCFRunLoopBeforeTimers  = (1UL << 1), // 即将处理 Timer\n    kCFRunLoopBeforeSources = (1UL << 2), // 即将处理 Source\n    kCFRunLoopBeforeWaiting = (1UL << 5), // 即将进入休眠\n    kCFRunLoopAfterWaiting  = (1UL << 6), // 刚从休眠中唤醒\n    kCFRunLoopExit          = (1UL << 7), // 即将退出Loop\n};\n```\n##### 闭包\n我们通过IOS里的`Block`闭包，可以在异步执行一串功能逻辑代码后接着处理闭包里的活。\n```\n- (void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;\n```\n```\n[someObject someMethodThatTakesABlock:^returnType (parameters) {...}];\n```\n##### 还有其他非常多的使用，如通知等\n\n### Python中的使用\nPython近些年才完全开发完优秀的`协程`并开放使用。使得Python上`多并发`成为事实上的可能。这里的多，不是之前的几十几百，是上十万。\n##### `Event_loop`+`协程`\nPython里面使用多线程其实并不怎么爽，本身就是耗资源的语言，多线程切换更加雪上加霜了。通过协程，妥妥的解决了上十万的并发。\n```\nimport asyncio\nasync def test(i):\n\tprint(\"test_1\",i)\n\tawait asyncio.sleep(1)\n\tprint(\"test_2\",i)\nloop=asyncio.get_event_loop()\ntasks=[test(i) for i in range(5)]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()\n```\n##### `aiohttp`\n网络访问上的多并发，对`协程`的进一步封装。\n\n### Node.js中的使用\n##### `Event_loop`事件循环\n这个就没得说了，彻彻底底依靠`事件驱动`起家的语言。基于`javascript`和`V8`引擎起来的Node.js，就是完完全全的单线程语言。\n可是要知道，Node.js就是以单线程中使用事件驱动处理高IO闻名世界的。\n你可以想象一下，一个Node.js搭建的后台，每秒上千上万的并发，都是单线程在处理吗？\nJava就是一个用户一个请求一个线程（又名`线程驱动`），服务器资源耗费真的大。\n```\nvar fs = require(\"fs\");\nvar debug = require('debug')('example1');\n\ndebug(\"begin\");\n\nfs.readFile('package.json','utf-8',function(err,data){\n    if(err)  \n        debug(err);\n    else\n        debug(\"get file content\");\n});\n\nsetTimeout(function(){\n    debug(\"timeout2\");\n});\n\ndebug('end');\n\n```","source":"_posts/谈谈事件驱动.md","raw":"---\ntitle: 谈谈事件驱动\ndate: 2018-11-08 15:10:08\ncategories:\n- 技术\ntags:\n- iOS\n- Python\n- Node.js\nkeywords: 事件驱动,Runloop,Runtime,Event loop,协程,多并发\n---\n\n`事件驱动`这个技术方案，可以说实实在在影响了这些年编程界的技术方向。最实际的受用者应该就是`异步编程`了，如I/O。\n\n我所认知到的语言，都是事件驱动的使用者，受益者，推动者。\n\n<!-- more -->\n\n很多朋友可能更多的停留在精通官方API阶段，还没有更深层次的认知计算机原理，不晓得代码是怎么工作的。我不精通官方API，计算机原理也认知浅薄，但在自己认知的语言范围内了解了一些。我感到庆幸，希望和大家分享。\n\n### `事件驱动`的形象描述\n\nA和家人去外婆家取了个号。A一直在门口等着，是阻塞。A出去玩一会，门分钟去外婆家门口看看到了自己号没有，是监听。A去一个衣服店看衣服去了，到了自己号的时候，收到外婆家发的短信消息后直接去外婆家，是回调。\n\n上面这个例子，变种极多也千篇一律。串行并行、同步异步、阻塞非阻塞都可以用。我们用这个例子来说`事件驱动`。\n\n这里分析第三种情况，A去看衣服去了，这个时候外婆家的号叫到自己，并短信通知了自己，这个行为的分析。\n\nA查看短信的行为和外婆家发出短信的行为，就是我们分析的重点。\n\n外婆家为了发出这个短信，需要耗时，甚至外婆家也不知道耗时多久。所以外婆家需要做的是，一定要在A的号到了的时候，准确及时的发出短信，这是一个事件的发出。\n\nA虽然有手机，但是看不看短信是A的事情。所以A一定要在看到短信之后立即作出处理判断，这是一个事件的反馈。\n\n但是A为了能够尽快吃到饭，多做了几手准备，他把西贝、海底捞几家店的号都拿了，打算谁先叫到自己，就去谁家。\n\n所以A接受到的事件是多个并且不确定的。\n\n`Life is thread`，我们把A比作一个线程。A能够及时响应各家店面发来的消息，原因就是线程里面有一个`while (true):{pass;}`这样的循环。依靠CPU这个超强大脑控制器，只要有事件需要通知到线程，线程里面的这个while循环就会获取到并及时处理。\n    \n所以`事件驱动`的本质是：**一方及时发出事件，通过CPU时间片实时轮转事件循环队列并告知到while循环以通知到另一方，另一方及时响应事件。**\n\n### iOS中的使用\n##### `Runloop`\n`Runloop`可以说把`事件驱动`利用到了极致。你能想象，如果没有`Runloop`，你就真的不能使用iPhone手机了！\n`Runloop`依托于线程。我们手势点击一个按钮，就是在操作主线程里的`Runloop`。\n`Runloop`通过`事件驱动`在以下8种状态下实时循环切换，用于省电的同时又能够及时处理用户界面反馈。\n```\ntypedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {\n    kCFRunLoopEntry         = (1UL << 0), // 即将进入Loop\n    kCFRunLoopBeforeTimers  = (1UL << 1), // 即将处理 Timer\n    kCFRunLoopBeforeSources = (1UL << 2), // 即将处理 Source\n    kCFRunLoopBeforeWaiting = (1UL << 5), // 即将进入休眠\n    kCFRunLoopAfterWaiting  = (1UL << 6), // 刚从休眠中唤醒\n    kCFRunLoopExit          = (1UL << 7), // 即将退出Loop\n};\n```\n##### 闭包\n我们通过IOS里的`Block`闭包，可以在异步执行一串功能逻辑代码后接着处理闭包里的活。\n```\n- (void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;\n```\n```\n[someObject someMethodThatTakesABlock:^returnType (parameters) {...}];\n```\n##### 还有其他非常多的使用，如通知等\n\n### Python中的使用\nPython近些年才完全开发完优秀的`协程`并开放使用。使得Python上`多并发`成为事实上的可能。这里的多，不是之前的几十几百，是上十万。\n##### `Event_loop`+`协程`\nPython里面使用多线程其实并不怎么爽，本身就是耗资源的语言，多线程切换更加雪上加霜了。通过协程，妥妥的解决了上十万的并发。\n```\nimport asyncio\nasync def test(i):\n\tprint(\"test_1\",i)\n\tawait asyncio.sleep(1)\n\tprint(\"test_2\",i)\nloop=asyncio.get_event_loop()\ntasks=[test(i) for i in range(5)]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()\n```\n##### `aiohttp`\n网络访问上的多并发，对`协程`的进一步封装。\n\n### Node.js中的使用\n##### `Event_loop`事件循环\n这个就没得说了，彻彻底底依靠`事件驱动`起家的语言。基于`javascript`和`V8`引擎起来的Node.js，就是完完全全的单线程语言。\n可是要知道，Node.js就是以单线程中使用事件驱动处理高IO闻名世界的。\n你可以想象一下，一个Node.js搭建的后台，每秒上千上万的并发，都是单线程在处理吗？\nJava就是一个用户一个请求一个线程（又名`线程驱动`），服务器资源耗费真的大。\n```\nvar fs = require(\"fs\");\nvar debug = require('debug')('example1');\n\ndebug(\"begin\");\n\nfs.readFile('package.json','utf-8',function(err,data){\n    if(err)  \n        debug(err);\n    else\n        debug(\"get file content\");\n});\n\nsetTimeout(function(){\n    debug(\"timeout2\");\n});\n\ndebug('end');\n\n```","slug":"谈谈事件驱动","published":1,"updated":"2019-02-26T13:28:31.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjytswkzd000uodgpytblcqql","content":"<p><code>事件驱动</code>这个技术方案，可以说实实在在影响了这些年编程界的技术方向。最实际的受用者应该就是<code>异步编程</code>了，如I/O。</p>\n<p>我所认知到的语言，都是事件驱动的使用者，受益者，推动者。</p>\n<a id=\"more\"></a>\n\n<p>很多朋友可能更多的停留在精通官方API阶段，还没有更深层次的认知计算机原理，不晓得代码是怎么工作的。我不精通官方API，计算机原理也认知浅薄，但在自己认知的语言范围内了解了一些。我感到庆幸，希望和大家分享。</p>\n<h3 id=\"事件驱动的形象描述\"><a href=\"#事件驱动的形象描述\" class=\"headerlink\" title=\"事件驱动的形象描述\"></a><code>事件驱动</code>的形象描述</h3><p>A和家人去外婆家取了个号。A一直在门口等着，是阻塞。A出去玩一会，门分钟去外婆家门口看看到了自己号没有，是监听。A去一个衣服店看衣服去了，到了自己号的时候，收到外婆家发的短信消息后直接去外婆家，是回调。</p>\n<p>上面这个例子，变种极多也千篇一律。串行并行、同步异步、阻塞非阻塞都可以用。我们用这个例子来说<code>事件驱动</code>。</p>\n<p>这里分析第三种情况，A去看衣服去了，这个时候外婆家的号叫到自己，并短信通知了自己，这个行为的分析。</p>\n<p>A查看短信的行为和外婆家发出短信的行为，就是我们分析的重点。</p>\n<p>外婆家为了发出这个短信，需要耗时，甚至外婆家也不知道耗时多久。所以外婆家需要做的是，一定要在A的号到了的时候，准确及时的发出短信，这是一个事件的发出。</p>\n<p>A虽然有手机，但是看不看短信是A的事情。所以A一定要在看到短信之后立即作出处理判断，这是一个事件的反馈。</p>\n<p>但是A为了能够尽快吃到饭，多做了几手准备，他把西贝、海底捞几家店的号都拿了，打算谁先叫到自己，就去谁家。</p>\n<p>所以A接受到的事件是多个并且不确定的。</p>\n<p><code>Life is thread</code>，我们把A比作一个线程。A能够及时响应各家店面发来的消息，原因就是线程里面有一个<code>while (true):{pass;}</code>这样的循环。依靠CPU这个超强大脑控制器，只要有事件需要通知到线程，线程里面的这个while循环就会获取到并及时处理。</p>\n<p>所以<code>事件驱动</code>的本质是：<strong>一方及时发出事件，通过CPU时间片实时轮转事件循环队列并告知到while循环以通知到另一方，另一方及时响应事件。</strong></p>\n<h3 id=\"iOS中的使用\"><a href=\"#iOS中的使用\" class=\"headerlink\" title=\"iOS中的使用\"></a>iOS中的使用</h3><h5 id=\"Runloop\"><a href=\"#Runloop\" class=\"headerlink\" title=\"Runloop\"></a><code>Runloop</code></h5><p><code>Runloop</code>可以说把<code>事件驱动</code>利用到了极致。你能想象，如果没有<code>Runloop</code>，你就真的不能使用iPhone手机了！<br><code>Runloop</code>依托于线程。我们手势点击一个按钮，就是在操作主线程里的<code>Runloop</code>。<br><code>Runloop</code>通过<code>事件驱动</code>在以下8种状态下实时循环切换，用于省电的同时又能够及时处理用户界面反馈。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &#123;</span><br><span class=\"line\">    kCFRunLoopEntry         = (1UL &lt;&lt; 0), // 即将进入Loop</span><br><span class=\"line\">    kCFRunLoopBeforeTimers  = (1UL &lt;&lt; 1), // 即将处理 Timer</span><br><span class=\"line\">    kCFRunLoopBeforeSources = (1UL &lt;&lt; 2), // 即将处理 Source</span><br><span class=\"line\">    kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5), // 即将进入休眠</span><br><span class=\"line\">    kCFRunLoopAfterWaiting  = (1UL &lt;&lt; 6), // 刚从休眠中唤醒</span><br><span class=\"line\">    kCFRunLoopExit          = (1UL &lt;&lt; 7), // 即将退出Loop</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h5><p>我们通过IOS里的<code>Block</code>闭包，可以在异步执行一串功能逻辑代码后接着处理闭包里的活。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[someObject someMethodThatTakesABlock:^returnType (parameters) &#123;...&#125;];</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"还有其他非常多的使用，如通知等\"><a href=\"#还有其他非常多的使用，如通知等\" class=\"headerlink\" title=\"还有其他非常多的使用，如通知等\"></a>还有其他非常多的使用，如通知等</h5><h3 id=\"Python中的使用\"><a href=\"#Python中的使用\" class=\"headerlink\" title=\"Python中的使用\"></a>Python中的使用</h3><p>Python近些年才完全开发完优秀的<code>协程</code>并开放使用。使得Python上<code>多并发</code>成为事实上的可能。这里的多，不是之前的几十几百，是上十万。</p>\n<h5 id=\"Event-loop-协程\"><a href=\"#Event-loop-协程\" class=\"headerlink\" title=\"Event_loop+协程\"></a><code>Event_loop</code>+<code>协程</code></h5><p>Python里面使用多线程其实并不怎么爽，本身就是耗资源的语言，多线程切换更加雪上加霜了。通过协程，妥妥的解决了上十万的并发。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import asyncio</span><br><span class=\"line\">async def test(i):</span><br><span class=\"line\">\tprint(&quot;test_1&quot;,i)</span><br><span class=\"line\">\tawait asyncio.sleep(1)</span><br><span class=\"line\">\tprint(&quot;test_2&quot;,i)</span><br><span class=\"line\">loop=asyncio.get_event_loop()</span><br><span class=\"line\">tasks=[test(i) for i in range(5)]</span><br><span class=\"line\">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class=\"line\">loop.close()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"aiohttp\"><a href=\"#aiohttp\" class=\"headerlink\" title=\"aiohttp\"></a><code>aiohttp</code></h5><p>网络访问上的多并发，对<code>协程</code>的进一步封装。</p>\n<h3 id=\"Node-js中的使用\"><a href=\"#Node-js中的使用\" class=\"headerlink\" title=\"Node.js中的使用\"></a>Node.js中的使用</h3><h5 id=\"Event-loop事件循环\"><a href=\"#Event-loop事件循环\" class=\"headerlink\" title=\"Event_loop事件循环\"></a><code>Event_loop</code>事件循环</h5><p>这个就没得说了，彻彻底底依靠<code>事件驱动</code>起家的语言。基于<code>javascript</code>和<code>V8</code>引擎起来的Node.js，就是完完全全的单线程语言。<br>可是要知道，Node.js就是以单线程中使用事件驱动处理高IO闻名世界的。<br>你可以想象一下，一个Node.js搭建的后台，每秒上千上万的并发，都是单线程在处理吗？<br>Java就是一个用户一个请求一个线程（又名<code>线程驱动</code>），服务器资源耗费真的大。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var debug = require(&apos;debug&apos;)(&apos;example1&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">debug(&quot;begin&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(&apos;package.json&apos;,&apos;utf-8&apos;,function(err,data)&#123;</span><br><span class=\"line\">    if(err)  </span><br><span class=\"line\">        debug(err);</span><br><span class=\"line\">    else</span><br><span class=\"line\">        debug(&quot;get file content&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(function()&#123;</span><br><span class=\"line\">    debug(&quot;timeout2&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">debug(&apos;end&apos;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><code>事件驱动</code>这个技术方案，可以说实实在在影响了这些年编程界的技术方向。最实际的受用者应该就是<code>异步编程</code>了，如I/O。</p>\n<p>我所认知到的语言，都是事件驱动的使用者，受益者，推动者。</p>","more":"<p>很多朋友可能更多的停留在精通官方API阶段，还没有更深层次的认知计算机原理，不晓得代码是怎么工作的。我不精通官方API，计算机原理也认知浅薄，但在自己认知的语言范围内了解了一些。我感到庆幸，希望和大家分享。</p>\n<h3 id=\"事件驱动的形象描述\"><a href=\"#事件驱动的形象描述\" class=\"headerlink\" title=\"事件驱动的形象描述\"></a><code>事件驱动</code>的形象描述</h3><p>A和家人去外婆家取了个号。A一直在门口等着，是阻塞。A出去玩一会，门分钟去外婆家门口看看到了自己号没有，是监听。A去一个衣服店看衣服去了，到了自己号的时候，收到外婆家发的短信消息后直接去外婆家，是回调。</p>\n<p>上面这个例子，变种极多也千篇一律。串行并行、同步异步、阻塞非阻塞都可以用。我们用这个例子来说<code>事件驱动</code>。</p>\n<p>这里分析第三种情况，A去看衣服去了，这个时候外婆家的号叫到自己，并短信通知了自己，这个行为的分析。</p>\n<p>A查看短信的行为和外婆家发出短信的行为，就是我们分析的重点。</p>\n<p>外婆家为了发出这个短信，需要耗时，甚至外婆家也不知道耗时多久。所以外婆家需要做的是，一定要在A的号到了的时候，准确及时的发出短信，这是一个事件的发出。</p>\n<p>A虽然有手机，但是看不看短信是A的事情。所以A一定要在看到短信之后立即作出处理判断，这是一个事件的反馈。</p>\n<p>但是A为了能够尽快吃到饭，多做了几手准备，他把西贝、海底捞几家店的号都拿了，打算谁先叫到自己，就去谁家。</p>\n<p>所以A接受到的事件是多个并且不确定的。</p>\n<p><code>Life is thread</code>，我们把A比作一个线程。A能够及时响应各家店面发来的消息，原因就是线程里面有一个<code>while (true):{pass;}</code>这样的循环。依靠CPU这个超强大脑控制器，只要有事件需要通知到线程，线程里面的这个while循环就会获取到并及时处理。</p>\n<p>所以<code>事件驱动</code>的本质是：<strong>一方及时发出事件，通过CPU时间片实时轮转事件循环队列并告知到while循环以通知到另一方，另一方及时响应事件。</strong></p>\n<h3 id=\"iOS中的使用\"><a href=\"#iOS中的使用\" class=\"headerlink\" title=\"iOS中的使用\"></a>iOS中的使用</h3><h5 id=\"Runloop\"><a href=\"#Runloop\" class=\"headerlink\" title=\"Runloop\"></a><code>Runloop</code></h5><p><code>Runloop</code>可以说把<code>事件驱动</code>利用到了极致。你能想象，如果没有<code>Runloop</code>，你就真的不能使用iPhone手机了！<br><code>Runloop</code>依托于线程。我们手势点击一个按钮，就是在操作主线程里的<code>Runloop</code>。<br><code>Runloop</code>通过<code>事件驱动</code>在以下8种状态下实时循环切换，用于省电的同时又能够及时处理用户界面反馈。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &#123;</span><br><span class=\"line\">    kCFRunLoopEntry         = (1UL &lt;&lt; 0), // 即将进入Loop</span><br><span class=\"line\">    kCFRunLoopBeforeTimers  = (1UL &lt;&lt; 1), // 即将处理 Timer</span><br><span class=\"line\">    kCFRunLoopBeforeSources = (1UL &lt;&lt; 2), // 即将处理 Source</span><br><span class=\"line\">    kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5), // 即将进入休眠</span><br><span class=\"line\">    kCFRunLoopAfterWaiting  = (1UL &lt;&lt; 6), // 刚从休眠中唤醒</span><br><span class=\"line\">    kCFRunLoopExit          = (1UL &lt;&lt; 7), // 即将退出Loop</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h5><p>我们通过IOS里的<code>Block</code>闭包，可以在异步执行一串功能逻辑代码后接着处理闭包里的活。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[someObject someMethodThatTakesABlock:^returnType (parameters) &#123;...&#125;];</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"还有其他非常多的使用，如通知等\"><a href=\"#还有其他非常多的使用，如通知等\" class=\"headerlink\" title=\"还有其他非常多的使用，如通知等\"></a>还有其他非常多的使用，如通知等</h5><h3 id=\"Python中的使用\"><a href=\"#Python中的使用\" class=\"headerlink\" title=\"Python中的使用\"></a>Python中的使用</h3><p>Python近些年才完全开发完优秀的<code>协程</code>并开放使用。使得Python上<code>多并发</code>成为事实上的可能。这里的多，不是之前的几十几百，是上十万。</p>\n<h5 id=\"Event-loop-协程\"><a href=\"#Event-loop-协程\" class=\"headerlink\" title=\"Event_loop+协程\"></a><code>Event_loop</code>+<code>协程</code></h5><p>Python里面使用多线程其实并不怎么爽，本身就是耗资源的语言，多线程切换更加雪上加霜了。通过协程，妥妥的解决了上十万的并发。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import asyncio</span><br><span class=\"line\">async def test(i):</span><br><span class=\"line\">\tprint(&quot;test_1&quot;,i)</span><br><span class=\"line\">\tawait asyncio.sleep(1)</span><br><span class=\"line\">\tprint(&quot;test_2&quot;,i)</span><br><span class=\"line\">loop=asyncio.get_event_loop()</span><br><span class=\"line\">tasks=[test(i) for i in range(5)]</span><br><span class=\"line\">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class=\"line\">loop.close()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"aiohttp\"><a href=\"#aiohttp\" class=\"headerlink\" title=\"aiohttp\"></a><code>aiohttp</code></h5><p>网络访问上的多并发，对<code>协程</code>的进一步封装。</p>\n<h3 id=\"Node-js中的使用\"><a href=\"#Node-js中的使用\" class=\"headerlink\" title=\"Node.js中的使用\"></a>Node.js中的使用</h3><h5 id=\"Event-loop事件循环\"><a href=\"#Event-loop事件循环\" class=\"headerlink\" title=\"Event_loop事件循环\"></a><code>Event_loop</code>事件循环</h5><p>这个就没得说了，彻彻底底依靠<code>事件驱动</code>起家的语言。基于<code>javascript</code>和<code>V8</code>引擎起来的Node.js，就是完完全全的单线程语言。<br>可是要知道，Node.js就是以单线程中使用事件驱动处理高IO闻名世界的。<br>你可以想象一下，一个Node.js搭建的后台，每秒上千上万的并发，都是单线程在处理吗？<br>Java就是一个用户一个请求一个线程（又名<code>线程驱动</code>），服务器资源耗费真的大。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var debug = require(&apos;debug&apos;)(&apos;example1&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">debug(&quot;begin&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(&apos;package.json&apos;,&apos;utf-8&apos;,function(err,data)&#123;</span><br><span class=\"line\">    if(err)  </span><br><span class=\"line\">        debug(err);</span><br><span class=\"line\">    else</span><br><span class=\"line\">        debug(&quot;get file content&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(function()&#123;</span><br><span class=\"line\">    debug(&quot;timeout2&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">debug(&apos;end&apos;);</span><br></pre></td></tr></table></figure>"},{"title":"RAC-Api-Summer","date":"2019-01-15T07:24:59.000Z","keywords":"RAC,ReactiveCocoa,RAC分类,RAC API","_content":"\n###### From Internet.方便自己查阅使用，侵权删。\n\n### 一、常见类\n\n1、RACSiganl 信号类。\n\nRACEmptySignal ：空信号，用来实现 RACSignal 的 +empty 方法；\n\nRACReturnSignal ：一元信号，用来实现 RACSignal 的 +return: 方法；\n\nRACDynamicSignal ：动态信号，使用一个 block - 来实现订阅行为，我们在使用 RACSignal 的 +createSignal: 方法时创建的就是该类的实例；\n\nRACErrorSignal ：错误信号，用来实现 RACSignal 的 +error: 方法；\n\nRACChannelTerminal ：通道终端，代表 RACChannel 的一个终端，用来实现双向绑定。\n\n<!-- more -->\n\n2、RACSubscriber 订阅者\n\n3、RACDisposable 用于取消订阅或者清理资源，当信号发送完成或者发送错误的时候，就会自动触发它。\n\nRACSerialDisposable ：作为 disposable 的容器使用，可以包含一个 disposable 对象，并且允许将这个 disposable 对象通过原子操作交换出来；\n\nRACKVOTrampoline ：代表一次 KVO 观察，并且可以用来停止观察；\n\nRACCompoundDisposable ：它可以包含多个 disposable 对象，并且支持手动添加和移除 disposable 对象\n\nRACScopedDisposable ：当它被 dealloc 的时候调用本身的 -dispose 方法。\n\n4、RACSubject 信号提供者，自己可以充当信号，又能发送信号。\n\nRACGroupedSignal ：分组信号，用来实现 RACSignal 的分组功能；\n\nRACBehaviorSubject ：重演最后值的信号，当被订阅时，会向订阅者发送它最后接收到的值；\n\nRACReplaySubject ：重演信号，保存发送过的值，当被订阅时，会向订阅者重新发送这些值。\n\n5、RACTuple 元组类,类似NSArray,用来包装值.\n\n6、RACSequence RAC中的集合类\n\n7、RACCommand RAC中用于处理事件的类，可以把事件如何处理,事件中的数据如何传递，包装到这个类中，他可以很方便的监控事件的执行过程。\n\n8、RACMulticastConnection 用于当一个信号，被多次订阅时，为了保证创建信号时，避免多次调用创建信号中的block，造成副作用，可以使用这个类处理。\n\n9、RACScheduler RAC中的队列，用GCD封装的。\n\nRACImmediateScheduler ：立即执行调度的任务，这是唯一一个支持同步执行的调度器；\n\nRACQueueScheduler ：一个抽象的队列调度器，在一个 GCD 串行列队中异步调度所有任务；\n\nRACTargetQueueScheduler ：继承自 RACQueueScheduler ，在一个以一个任意的 GCD 队列为 target 的串行队列中异步调度所有任务；\n\nRACSubscriptionScheduler ：一个只用来调度订阅的调度器。\n\n### 二、常见用法\n\nrac_signalForSelector : 代替代理\n\nrac_valuesAndChangesForKeyPath: KVO\n\nrac_signalForControlEvents:监听事件\n\nrac_addObserverForName 代替通知\n\nrac_textSignal：监听文本框文字改变\n\nrac_liftSelector:withSignalsFromArray:Signals:当传入的Signals(信号数组)，每一个signal都至少sendNext过一次，就会去触发第一个selector参数的方法。\n\n### 三、常见宏\n\nRAC(TARGET, [KEYPATH, [NIL_VALUE]])：用于给某个对象的某个属性绑定\n\nRACObserve(self, name) ：监听某个对象的某个属性,返回的是信号。\n\n@weakify(Obj)和@strongify(Obj)\n\nRACTuplePack ：把数据包装成RACTuple（元组类）\n\nRACTupleUnpack：把RACTuple（元组类）解包成对应的数据\n\nRACChannelTo 用于双向绑定的一个终端\n\n### 四、常用操作方法\n\nflattenMap map 用于把源信号内容映射成新的内容。\n\nconcat 组合 按一定顺序拼接信号，当多个信号发出的时候，有顺序的接收信号\n\nthen 用于连接两个信号，当第一个信号完成，才会连接then返回的信号。\n\nmerge 把多个信号合并为一个信号，任何一个信号有新值的时候就会调用\n\nzipWith 把两个信号压缩成一个信号，只有当两个信号同时发出信号内容时，并且把两个信号的内容合并成一个元组，才会触发压缩流的next事件。\n\ncombineLatest:将多个信号合并起来，并且拿到各个信号的最新的值,必须每个合并的signal至少都有过一次sendNext，才会触发合并的信号。\n\nreduce聚合:用于信号发出的内容是元组，把信号发出元组的值聚合成一个值\n\nfilter:过滤信号，使用它可以获取满足条件的信号.\n\nignore:忽略完某些值的信号.\n\ndistinctUntilChanged:当上一次的值和当前的值有明显的变化就会发出信号，否则会被忽略掉。\n\ntake:从开始一共取N次的信号\n\ntakeLast:取最后N次的信号,前提条件，订阅者必须调用完成，因为只有完成，就知道总共有多少信号.\n\ntakeUntil:(RACSignal *):获取信号直到某个信号执行完成\n\nskip:(NSUInteger):跳过几个信号,不接受。\n\nswitchToLatest:用于signalOfSignals（信号的信号），有时候信号也会发出信号，会在signalOfSignals中，获取signalOfSignals发送的最新信号。\n\ndoNext: 执行Next之前，会先执行这个Block\n\ndoCompleted: 执行sendCompleted之前，会先执行这个Block\n\ntimeout：超时，可以让一个信号在一定的时间后，自动报错。\n\ninterval 定时：每隔一段时间发出信号\n\ndelay 延迟发送next。\n\nretry重试 ：只要失败，就会重新执行创建信号中的block,直到成功.\n\nreplay重放：当一个信号被多次订阅,反复播放内容\n\nthrottle节流:当某个信号发送比较频繁时，可以使用节流，在某一段时间不发送信号内容，过了一段时间获取信号的最新内容发出。\n\n### 五、UI - Category（常用汇总）\n\n1、rac_prepareForReuseSignal： 需要复用时用\n\n相关UI: MKAnnotationView、UICollectionReusableView、UITableViewCell、UITableViewHeaderFooterView\n\n2、rac_buttonClickedSignal：点击事件触发信号\n\n相关UI：UIActionSheet、UIAlertView\n\n3、rac_command：button类、刷新类相关命令替换\n\n相关UI：UIBarButtonItem、UIButton、UIRefreshControl\n\n4、rac_signalForControlEvents: control event 触发\n\n相关UI：UIControl\n\n5、rac_gestureSignal UIGestureRecognizer 事件处理信号\n\n相关UI：UIGestureRecognizer\n\n6、rac_imageSelectedSignal 选择图片的信号\n\n相关UI：UIImagePickerController\n\n7、rac_textSignal\n\n相关UI：UITextField、UITextView\n\n8、可实现双向绑定的相关API\n\nrac_channelForControlEvents: key: nilValue:\n\n相关UI：UIControl类\n\nrac_newDateChannelWithNilValue:\n\n相关UI：UIDatePicker\n\nrac_newSelectedSegmentIndexChannelWithNilValue:\n\n相关UI：UISegmentedControl\n\nrac_newValueChannelWithNilValue:\n\n相关UI：UISlider、UIStepper\n\nrac_newOnChannel\n\n相关UI：UISwitch\n\nrac_newTextChannel\n\n相关UI：UITextField\n\n### 六、Foundation - Category （常用汇总）\n\n1、NSArray\n\nrac_sequence 信号集合\n\n2、NSData\n\nrac_readContentsOfURL: options: scheduler: 比oc多出线程设置\n\n3、NSDictionary\n\nrac_sequence 不解释\n\nrac_keySequence key 集合\n\nrac_valueSequence value 集合\n\n4、NSEnumerator\n\nrac_sequence 不解释\n\n5、NSFileHandle\n\nrac_readInBackground 见名知意\n\n6、NSIndexSet\n\nrac_sequence 不解释\n\n7、NSInvocation\n\nrac_setArgument: atIndex: 设置参数\n\nrac_argumentAtIndex 取某个参数\n\nrac_returnValue 所关联方法的返回值\n\n8、NSNotificationCenter\n\nrac_addObserverForName: object:注册通知\n\n9、NSObject\n\nrac_willDeallocSignal 对象销毁时发动的信号\n\nrac_description debug用\n\nrac_observeKeyPath: options: observer: block:监听某个事件\n\nrac_liftSelector: withSignals: 全部信号都next在执行\n\nrac_signalForSelector: 代替某个方法\n\nrac_signalForSelector:(SEL)selector fromProtocol:代替代理\n\n10、NSOrderedSet\n\nrac_sequence 不解释\n\n11、NSSet\n\nrac_sequence 不解释\n\n12、NSString\n\nrac_keyPathComponents 获取一个路径所有的部分\n\nrac_keyPathByDeletingLastKeyPathComponent 删除路径最后一部分\n\nrac_keyPathByDeletingFirstKeyPathComponent 删除路径第一部分\n\nrac_sequence 不解释 (character)\n\nrac_readContentsOfURL: usedEncoding: scheduler: 比之OC多线程调用\n\n13、NSURLConnection\n\nrac_sendAsynchronousRequest 发起异步请求\n\n14、NSUserDefaults\n\nrac_channelTerminalForKey 用于双向绑定，此乃一","source":"_posts/RAC-Api-Summer.md","raw":"---\ntitle: RAC-Api-Summer\ndate: 2019-01-15 15:24:59\ncategories:\n- 技术\ntags:\n- iOS\nkeywords: RAC,ReactiveCocoa,RAC分类,RAC API\n---\n\n###### From Internet.方便自己查阅使用，侵权删。\n\n### 一、常见类\n\n1、RACSiganl 信号类。\n\nRACEmptySignal ：空信号，用来实现 RACSignal 的 +empty 方法；\n\nRACReturnSignal ：一元信号，用来实现 RACSignal 的 +return: 方法；\n\nRACDynamicSignal ：动态信号，使用一个 block - 来实现订阅行为，我们在使用 RACSignal 的 +createSignal: 方法时创建的就是该类的实例；\n\nRACErrorSignal ：错误信号，用来实现 RACSignal 的 +error: 方法；\n\nRACChannelTerminal ：通道终端，代表 RACChannel 的一个终端，用来实现双向绑定。\n\n<!-- more -->\n\n2、RACSubscriber 订阅者\n\n3、RACDisposable 用于取消订阅或者清理资源，当信号发送完成或者发送错误的时候，就会自动触发它。\n\nRACSerialDisposable ：作为 disposable 的容器使用，可以包含一个 disposable 对象，并且允许将这个 disposable 对象通过原子操作交换出来；\n\nRACKVOTrampoline ：代表一次 KVO 观察，并且可以用来停止观察；\n\nRACCompoundDisposable ：它可以包含多个 disposable 对象，并且支持手动添加和移除 disposable 对象\n\nRACScopedDisposable ：当它被 dealloc 的时候调用本身的 -dispose 方法。\n\n4、RACSubject 信号提供者，自己可以充当信号，又能发送信号。\n\nRACGroupedSignal ：分组信号，用来实现 RACSignal 的分组功能；\n\nRACBehaviorSubject ：重演最后值的信号，当被订阅时，会向订阅者发送它最后接收到的值；\n\nRACReplaySubject ：重演信号，保存发送过的值，当被订阅时，会向订阅者重新发送这些值。\n\n5、RACTuple 元组类,类似NSArray,用来包装值.\n\n6、RACSequence RAC中的集合类\n\n7、RACCommand RAC中用于处理事件的类，可以把事件如何处理,事件中的数据如何传递，包装到这个类中，他可以很方便的监控事件的执行过程。\n\n8、RACMulticastConnection 用于当一个信号，被多次订阅时，为了保证创建信号时，避免多次调用创建信号中的block，造成副作用，可以使用这个类处理。\n\n9、RACScheduler RAC中的队列，用GCD封装的。\n\nRACImmediateScheduler ：立即执行调度的任务，这是唯一一个支持同步执行的调度器；\n\nRACQueueScheduler ：一个抽象的队列调度器，在一个 GCD 串行列队中异步调度所有任务；\n\nRACTargetQueueScheduler ：继承自 RACQueueScheduler ，在一个以一个任意的 GCD 队列为 target 的串行队列中异步调度所有任务；\n\nRACSubscriptionScheduler ：一个只用来调度订阅的调度器。\n\n### 二、常见用法\n\nrac_signalForSelector : 代替代理\n\nrac_valuesAndChangesForKeyPath: KVO\n\nrac_signalForControlEvents:监听事件\n\nrac_addObserverForName 代替通知\n\nrac_textSignal：监听文本框文字改变\n\nrac_liftSelector:withSignalsFromArray:Signals:当传入的Signals(信号数组)，每一个signal都至少sendNext过一次，就会去触发第一个selector参数的方法。\n\n### 三、常见宏\n\nRAC(TARGET, [KEYPATH, [NIL_VALUE]])：用于给某个对象的某个属性绑定\n\nRACObserve(self, name) ：监听某个对象的某个属性,返回的是信号。\n\n@weakify(Obj)和@strongify(Obj)\n\nRACTuplePack ：把数据包装成RACTuple（元组类）\n\nRACTupleUnpack：把RACTuple（元组类）解包成对应的数据\n\nRACChannelTo 用于双向绑定的一个终端\n\n### 四、常用操作方法\n\nflattenMap map 用于把源信号内容映射成新的内容。\n\nconcat 组合 按一定顺序拼接信号，当多个信号发出的时候，有顺序的接收信号\n\nthen 用于连接两个信号，当第一个信号完成，才会连接then返回的信号。\n\nmerge 把多个信号合并为一个信号，任何一个信号有新值的时候就会调用\n\nzipWith 把两个信号压缩成一个信号，只有当两个信号同时发出信号内容时，并且把两个信号的内容合并成一个元组，才会触发压缩流的next事件。\n\ncombineLatest:将多个信号合并起来，并且拿到各个信号的最新的值,必须每个合并的signal至少都有过一次sendNext，才会触发合并的信号。\n\nreduce聚合:用于信号发出的内容是元组，把信号发出元组的值聚合成一个值\n\nfilter:过滤信号，使用它可以获取满足条件的信号.\n\nignore:忽略完某些值的信号.\n\ndistinctUntilChanged:当上一次的值和当前的值有明显的变化就会发出信号，否则会被忽略掉。\n\ntake:从开始一共取N次的信号\n\ntakeLast:取最后N次的信号,前提条件，订阅者必须调用完成，因为只有完成，就知道总共有多少信号.\n\ntakeUntil:(RACSignal *):获取信号直到某个信号执行完成\n\nskip:(NSUInteger):跳过几个信号,不接受。\n\nswitchToLatest:用于signalOfSignals（信号的信号），有时候信号也会发出信号，会在signalOfSignals中，获取signalOfSignals发送的最新信号。\n\ndoNext: 执行Next之前，会先执行这个Block\n\ndoCompleted: 执行sendCompleted之前，会先执行这个Block\n\ntimeout：超时，可以让一个信号在一定的时间后，自动报错。\n\ninterval 定时：每隔一段时间发出信号\n\ndelay 延迟发送next。\n\nretry重试 ：只要失败，就会重新执行创建信号中的block,直到成功.\n\nreplay重放：当一个信号被多次订阅,反复播放内容\n\nthrottle节流:当某个信号发送比较频繁时，可以使用节流，在某一段时间不发送信号内容，过了一段时间获取信号的最新内容发出。\n\n### 五、UI - Category（常用汇总）\n\n1、rac_prepareForReuseSignal： 需要复用时用\n\n相关UI: MKAnnotationView、UICollectionReusableView、UITableViewCell、UITableViewHeaderFooterView\n\n2、rac_buttonClickedSignal：点击事件触发信号\n\n相关UI：UIActionSheet、UIAlertView\n\n3、rac_command：button类、刷新类相关命令替换\n\n相关UI：UIBarButtonItem、UIButton、UIRefreshControl\n\n4、rac_signalForControlEvents: control event 触发\n\n相关UI：UIControl\n\n5、rac_gestureSignal UIGestureRecognizer 事件处理信号\n\n相关UI：UIGestureRecognizer\n\n6、rac_imageSelectedSignal 选择图片的信号\n\n相关UI：UIImagePickerController\n\n7、rac_textSignal\n\n相关UI：UITextField、UITextView\n\n8、可实现双向绑定的相关API\n\nrac_channelForControlEvents: key: nilValue:\n\n相关UI：UIControl类\n\nrac_newDateChannelWithNilValue:\n\n相关UI：UIDatePicker\n\nrac_newSelectedSegmentIndexChannelWithNilValue:\n\n相关UI：UISegmentedControl\n\nrac_newValueChannelWithNilValue:\n\n相关UI：UISlider、UIStepper\n\nrac_newOnChannel\n\n相关UI：UISwitch\n\nrac_newTextChannel\n\n相关UI：UITextField\n\n### 六、Foundation - Category （常用汇总）\n\n1、NSArray\n\nrac_sequence 信号集合\n\n2、NSData\n\nrac_readContentsOfURL: options: scheduler: 比oc多出线程设置\n\n3、NSDictionary\n\nrac_sequence 不解释\n\nrac_keySequence key 集合\n\nrac_valueSequence value 集合\n\n4、NSEnumerator\n\nrac_sequence 不解释\n\n5、NSFileHandle\n\nrac_readInBackground 见名知意\n\n6、NSIndexSet\n\nrac_sequence 不解释\n\n7、NSInvocation\n\nrac_setArgument: atIndex: 设置参数\n\nrac_argumentAtIndex 取某个参数\n\nrac_returnValue 所关联方法的返回值\n\n8、NSNotificationCenter\n\nrac_addObserverForName: object:注册通知\n\n9、NSObject\n\nrac_willDeallocSignal 对象销毁时发动的信号\n\nrac_description debug用\n\nrac_observeKeyPath: options: observer: block:监听某个事件\n\nrac_liftSelector: withSignals: 全部信号都next在执行\n\nrac_signalForSelector: 代替某个方法\n\nrac_signalForSelector:(SEL)selector fromProtocol:代替代理\n\n10、NSOrderedSet\n\nrac_sequence 不解释\n\n11、NSSet\n\nrac_sequence 不解释\n\n12、NSString\n\nrac_keyPathComponents 获取一个路径所有的部分\n\nrac_keyPathByDeletingLastKeyPathComponent 删除路径最后一部分\n\nrac_keyPathByDeletingFirstKeyPathComponent 删除路径第一部分\n\nrac_sequence 不解释 (character)\n\nrac_readContentsOfURL: usedEncoding: scheduler: 比之OC多线程调用\n\n13、NSURLConnection\n\nrac_sendAsynchronousRequest 发起异步请求\n\n14、NSUserDefaults\n\nrac_channelTerminalForKey 用于双向绑定，此乃一","slug":"RAC-Api-Summer","published":1,"updated":"2019-02-26T13:26:02.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjytswl3c001sodgptaonreeu","content":"<h6 id=\"From-Internet-方便自己查阅使用，侵权删。\"><a href=\"#From-Internet-方便自己查阅使用，侵权删。\" class=\"headerlink\" title=\"From Internet.方便自己查阅使用，侵权删。\"></a>From Internet.方便自己查阅使用，侵权删。</h6><h3 id=\"一、常见类\"><a href=\"#一、常见类\" class=\"headerlink\" title=\"一、常见类\"></a>一、常见类</h3><p>1、RACSiganl 信号类。</p>\n<p>RACEmptySignal ：空信号，用来实现 RACSignal 的 +empty 方法；</p>\n<p>RACReturnSignal ：一元信号，用来实现 RACSignal 的 +return: 方法；</p>\n<p>RACDynamicSignal ：动态信号，使用一个 block - 来实现订阅行为，我们在使用 RACSignal 的 +createSignal: 方法时创建的就是该类的实例；</p>\n<p>RACErrorSignal ：错误信号，用来实现 RACSignal 的 +error: 方法；</p>\n<p>RACChannelTerminal ：通道终端，代表 RACChannel 的一个终端，用来实现双向绑定。</p>\n<a id=\"more\"></a>\n\n<p>2、RACSubscriber 订阅者</p>\n<p>3、RACDisposable 用于取消订阅或者清理资源，当信号发送完成或者发送错误的时候，就会自动触发它。</p>\n<p>RACSerialDisposable ：作为 disposable 的容器使用，可以包含一个 disposable 对象，并且允许将这个 disposable 对象通过原子操作交换出来；</p>\n<p>RACKVOTrampoline ：代表一次 KVO 观察，并且可以用来停止观察；</p>\n<p>RACCompoundDisposable ：它可以包含多个 disposable 对象，并且支持手动添加和移除 disposable 对象</p>\n<p>RACScopedDisposable ：当它被 dealloc 的时候调用本身的 -dispose 方法。</p>\n<p>4、RACSubject 信号提供者，自己可以充当信号，又能发送信号。</p>\n<p>RACGroupedSignal ：分组信号，用来实现 RACSignal 的分组功能；</p>\n<p>RACBehaviorSubject ：重演最后值的信号，当被订阅时，会向订阅者发送它最后接收到的值；</p>\n<p>RACReplaySubject ：重演信号，保存发送过的值，当被订阅时，会向订阅者重新发送这些值。</p>\n<p>5、RACTuple 元组类,类似NSArray,用来包装值.</p>\n<p>6、RACSequence RAC中的集合类</p>\n<p>7、RACCommand RAC中用于处理事件的类，可以把事件如何处理,事件中的数据如何传递，包装到这个类中，他可以很方便的监控事件的执行过程。</p>\n<p>8、RACMulticastConnection 用于当一个信号，被多次订阅时，为了保证创建信号时，避免多次调用创建信号中的block，造成副作用，可以使用这个类处理。</p>\n<p>9、RACScheduler RAC中的队列，用GCD封装的。</p>\n<p>RACImmediateScheduler ：立即执行调度的任务，这是唯一一个支持同步执行的调度器；</p>\n<p>RACQueueScheduler ：一个抽象的队列调度器，在一个 GCD 串行列队中异步调度所有任务；</p>\n<p>RACTargetQueueScheduler ：继承自 RACQueueScheduler ，在一个以一个任意的 GCD 队列为 target 的串行队列中异步调度所有任务；</p>\n<p>RACSubscriptionScheduler ：一个只用来调度订阅的调度器。</p>\n<h3 id=\"二、常见用法\"><a href=\"#二、常见用法\" class=\"headerlink\" title=\"二、常见用法\"></a>二、常见用法</h3><p>rac_signalForSelector : 代替代理</p>\n<p>rac_valuesAndChangesForKeyPath: KVO</p>\n<p>rac_signalForControlEvents:监听事件</p>\n<p>rac_addObserverForName 代替通知</p>\n<p>rac_textSignal：监听文本框文字改变</p>\n<p>rac_liftSelector:withSignalsFromArray:Signals:当传入的Signals(信号数组)，每一个signal都至少sendNext过一次，就会去触发第一个selector参数的方法。</p>\n<h3 id=\"三、常见宏\"><a href=\"#三、常见宏\" class=\"headerlink\" title=\"三、常见宏\"></a>三、常见宏</h3><p>RAC(TARGET, [KEYPATH, [NIL_VALUE]])：用于给某个对象的某个属性绑定</p>\n<p>RACObserve(self, name) ：监听某个对象的某个属性,返回的是信号。</p>\n<p>@weakify(Obj)和@strongify(Obj)</p>\n<p>RACTuplePack ：把数据包装成RACTuple（元组类）</p>\n<p>RACTupleUnpack：把RACTuple（元组类）解包成对应的数据</p>\n<p>RACChannelTo 用于双向绑定的一个终端</p>\n<h3 id=\"四、常用操作方法\"><a href=\"#四、常用操作方法\" class=\"headerlink\" title=\"四、常用操作方法\"></a>四、常用操作方法</h3><p>flattenMap map 用于把源信号内容映射成新的内容。</p>\n<p>concat 组合 按一定顺序拼接信号，当多个信号发出的时候，有顺序的接收信号</p>\n<p>then 用于连接两个信号，当第一个信号完成，才会连接then返回的信号。</p>\n<p>merge 把多个信号合并为一个信号，任何一个信号有新值的时候就会调用</p>\n<p>zipWith 把两个信号压缩成一个信号，只有当两个信号同时发出信号内容时，并且把两个信号的内容合并成一个元组，才会触发压缩流的next事件。</p>\n<p>combineLatest:将多个信号合并起来，并且拿到各个信号的最新的值,必须每个合并的signal至少都有过一次sendNext，才会触发合并的信号。</p>\n<p>reduce聚合:用于信号发出的内容是元组，把信号发出元组的值聚合成一个值</p>\n<p>filter:过滤信号，使用它可以获取满足条件的信号.</p>\n<p>ignore:忽略完某些值的信号.</p>\n<p>distinctUntilChanged:当上一次的值和当前的值有明显的变化就会发出信号，否则会被忽略掉。</p>\n<p>take:从开始一共取N次的信号</p>\n<p>takeLast:取最后N次的信号,前提条件，订阅者必须调用完成，因为只有完成，就知道总共有多少信号.</p>\n<p>takeUntil:(RACSignal *):获取信号直到某个信号执行完成</p>\n<p>skip:(NSUInteger):跳过几个信号,不接受。</p>\n<p>switchToLatest:用于signalOfSignals（信号的信号），有时候信号也会发出信号，会在signalOfSignals中，获取signalOfSignals发送的最新信号。</p>\n<p>doNext: 执行Next之前，会先执行这个Block</p>\n<p>doCompleted: 执行sendCompleted之前，会先执行这个Block</p>\n<p>timeout：超时，可以让一个信号在一定的时间后，自动报错。</p>\n<p>interval 定时：每隔一段时间发出信号</p>\n<p>delay 延迟发送next。</p>\n<p>retry重试 ：只要失败，就会重新执行创建信号中的block,直到成功.</p>\n<p>replay重放：当一个信号被多次订阅,反复播放内容</p>\n<p>throttle节流:当某个信号发送比较频繁时，可以使用节流，在某一段时间不发送信号内容，过了一段时间获取信号的最新内容发出。</p>\n<h3 id=\"五、UI-Category（常用汇总）\"><a href=\"#五、UI-Category（常用汇总）\" class=\"headerlink\" title=\"五、UI - Category（常用汇总）\"></a>五、UI - Category（常用汇总）</h3><p>1、rac_prepareForReuseSignal： 需要复用时用</p>\n<p>相关UI: MKAnnotationView、UICollectionReusableView、UITableViewCell、UITableViewHeaderFooterView</p>\n<p>2、rac_buttonClickedSignal：点击事件触发信号</p>\n<p>相关UI：UIActionSheet、UIAlertView</p>\n<p>3、rac_command：button类、刷新类相关命令替换</p>\n<p>相关UI：UIBarButtonItem、UIButton、UIRefreshControl</p>\n<p>4、rac_signalForControlEvents: control event 触发</p>\n<p>相关UI：UIControl</p>\n<p>5、rac_gestureSignal UIGestureRecognizer 事件处理信号</p>\n<p>相关UI：UIGestureRecognizer</p>\n<p>6、rac_imageSelectedSignal 选择图片的信号</p>\n<p>相关UI：UIImagePickerController</p>\n<p>7、rac_textSignal</p>\n<p>相关UI：UITextField、UITextView</p>\n<p>8、可实现双向绑定的相关API</p>\n<p>rac_channelForControlEvents: key: nilValue:</p>\n<p>相关UI：UIControl类</p>\n<p>rac_newDateChannelWithNilValue:</p>\n<p>相关UI：UIDatePicker</p>\n<p>rac_newSelectedSegmentIndexChannelWithNilValue:</p>\n<p>相关UI：UISegmentedControl</p>\n<p>rac_newValueChannelWithNilValue:</p>\n<p>相关UI：UISlider、UIStepper</p>\n<p>rac_newOnChannel</p>\n<p>相关UI：UISwitch</p>\n<p>rac_newTextChannel</p>\n<p>相关UI：UITextField</p>\n<h3 id=\"六、Foundation-Category-（常用汇总）\"><a href=\"#六、Foundation-Category-（常用汇总）\" class=\"headerlink\" title=\"六、Foundation - Category （常用汇总）\"></a>六、Foundation - Category （常用汇总）</h3><p>1、NSArray</p>\n<p>rac_sequence 信号集合</p>\n<p>2、NSData</p>\n<p>rac_readContentsOfURL: options: scheduler: 比oc多出线程设置</p>\n<p>3、NSDictionary</p>\n<p>rac_sequence 不解释</p>\n<p>rac_keySequence key 集合</p>\n<p>rac_valueSequence value 集合</p>\n<p>4、NSEnumerator</p>\n<p>rac_sequence 不解释</p>\n<p>5、NSFileHandle</p>\n<p>rac_readInBackground 见名知意</p>\n<p>6、NSIndexSet</p>\n<p>rac_sequence 不解释</p>\n<p>7、NSInvocation</p>\n<p>rac_setArgument: atIndex: 设置参数</p>\n<p>rac_argumentAtIndex 取某个参数</p>\n<p>rac_returnValue 所关联方法的返回值</p>\n<p>8、NSNotificationCenter</p>\n<p>rac_addObserverForName: object:注册通知</p>\n<p>9、NSObject</p>\n<p>rac_willDeallocSignal 对象销毁时发动的信号</p>\n<p>rac_description debug用</p>\n<p>rac_observeKeyPath: options: observer: block:监听某个事件</p>\n<p>rac_liftSelector: withSignals: 全部信号都next在执行</p>\n<p>rac_signalForSelector: 代替某个方法</p>\n<p>rac_signalForSelector:(SEL)selector fromProtocol:代替代理</p>\n<p>10、NSOrderedSet</p>\n<p>rac_sequence 不解释</p>\n<p>11、NSSet</p>\n<p>rac_sequence 不解释</p>\n<p>12、NSString</p>\n<p>rac_keyPathComponents 获取一个路径所有的部分</p>\n<p>rac_keyPathByDeletingLastKeyPathComponent 删除路径最后一部分</p>\n<p>rac_keyPathByDeletingFirstKeyPathComponent 删除路径第一部分</p>\n<p>rac_sequence 不解释 (character)</p>\n<p>rac_readContentsOfURL: usedEncoding: scheduler: 比之OC多线程调用</p>\n<p>13、NSURLConnection</p>\n<p>rac_sendAsynchronousRequest 发起异步请求</p>\n<p>14、NSUserDefaults</p>\n<p>rac_channelTerminalForKey 用于双向绑定，此乃一</p>\n","site":{"data":{}},"excerpt":"<h6 id=\"From-Internet-方便自己查阅使用，侵权删。\"><a href=\"#From-Internet-方便自己查阅使用，侵权删。\" class=\"headerlink\" title=\"From Internet.方便自己查阅使用，侵权删。\"></a>From Internet.方便自己查阅使用，侵权删。</h6><h3 id=\"一、常见类\"><a href=\"#一、常见类\" class=\"headerlink\" title=\"一、常见类\"></a>一、常见类</h3><p>1、RACSiganl 信号类。</p>\n<p>RACEmptySignal ：空信号，用来实现 RACSignal 的 +empty 方法；</p>\n<p>RACReturnSignal ：一元信号，用来实现 RACSignal 的 +return: 方法；</p>\n<p>RACDynamicSignal ：动态信号，使用一个 block - 来实现订阅行为，我们在使用 RACSignal 的 +createSignal: 方法时创建的就是该类的实例；</p>\n<p>RACErrorSignal ：错误信号，用来实现 RACSignal 的 +error: 方法；</p>\n<p>RACChannelTerminal ：通道终端，代表 RACChannel 的一个终端，用来实现双向绑定。</p>","more":"<p>2、RACSubscriber 订阅者</p>\n<p>3、RACDisposable 用于取消订阅或者清理资源，当信号发送完成或者发送错误的时候，就会自动触发它。</p>\n<p>RACSerialDisposable ：作为 disposable 的容器使用，可以包含一个 disposable 对象，并且允许将这个 disposable 对象通过原子操作交换出来；</p>\n<p>RACKVOTrampoline ：代表一次 KVO 观察，并且可以用来停止观察；</p>\n<p>RACCompoundDisposable ：它可以包含多个 disposable 对象，并且支持手动添加和移除 disposable 对象</p>\n<p>RACScopedDisposable ：当它被 dealloc 的时候调用本身的 -dispose 方法。</p>\n<p>4、RACSubject 信号提供者，自己可以充当信号，又能发送信号。</p>\n<p>RACGroupedSignal ：分组信号，用来实现 RACSignal 的分组功能；</p>\n<p>RACBehaviorSubject ：重演最后值的信号，当被订阅时，会向订阅者发送它最后接收到的值；</p>\n<p>RACReplaySubject ：重演信号，保存发送过的值，当被订阅时，会向订阅者重新发送这些值。</p>\n<p>5、RACTuple 元组类,类似NSArray,用来包装值.</p>\n<p>6、RACSequence RAC中的集合类</p>\n<p>7、RACCommand RAC中用于处理事件的类，可以把事件如何处理,事件中的数据如何传递，包装到这个类中，他可以很方便的监控事件的执行过程。</p>\n<p>8、RACMulticastConnection 用于当一个信号，被多次订阅时，为了保证创建信号时，避免多次调用创建信号中的block，造成副作用，可以使用这个类处理。</p>\n<p>9、RACScheduler RAC中的队列，用GCD封装的。</p>\n<p>RACImmediateScheduler ：立即执行调度的任务，这是唯一一个支持同步执行的调度器；</p>\n<p>RACQueueScheduler ：一个抽象的队列调度器，在一个 GCD 串行列队中异步调度所有任务；</p>\n<p>RACTargetQueueScheduler ：继承自 RACQueueScheduler ，在一个以一个任意的 GCD 队列为 target 的串行队列中异步调度所有任务；</p>\n<p>RACSubscriptionScheduler ：一个只用来调度订阅的调度器。</p>\n<h3 id=\"二、常见用法\"><a href=\"#二、常见用法\" class=\"headerlink\" title=\"二、常见用法\"></a>二、常见用法</h3><p>rac_signalForSelector : 代替代理</p>\n<p>rac_valuesAndChangesForKeyPath: KVO</p>\n<p>rac_signalForControlEvents:监听事件</p>\n<p>rac_addObserverForName 代替通知</p>\n<p>rac_textSignal：监听文本框文字改变</p>\n<p>rac_liftSelector:withSignalsFromArray:Signals:当传入的Signals(信号数组)，每一个signal都至少sendNext过一次，就会去触发第一个selector参数的方法。</p>\n<h3 id=\"三、常见宏\"><a href=\"#三、常见宏\" class=\"headerlink\" title=\"三、常见宏\"></a>三、常见宏</h3><p>RAC(TARGET, [KEYPATH, [NIL_VALUE]])：用于给某个对象的某个属性绑定</p>\n<p>RACObserve(self, name) ：监听某个对象的某个属性,返回的是信号。</p>\n<p>@weakify(Obj)和@strongify(Obj)</p>\n<p>RACTuplePack ：把数据包装成RACTuple（元组类）</p>\n<p>RACTupleUnpack：把RACTuple（元组类）解包成对应的数据</p>\n<p>RACChannelTo 用于双向绑定的一个终端</p>\n<h3 id=\"四、常用操作方法\"><a href=\"#四、常用操作方法\" class=\"headerlink\" title=\"四、常用操作方法\"></a>四、常用操作方法</h3><p>flattenMap map 用于把源信号内容映射成新的内容。</p>\n<p>concat 组合 按一定顺序拼接信号，当多个信号发出的时候，有顺序的接收信号</p>\n<p>then 用于连接两个信号，当第一个信号完成，才会连接then返回的信号。</p>\n<p>merge 把多个信号合并为一个信号，任何一个信号有新值的时候就会调用</p>\n<p>zipWith 把两个信号压缩成一个信号，只有当两个信号同时发出信号内容时，并且把两个信号的内容合并成一个元组，才会触发压缩流的next事件。</p>\n<p>combineLatest:将多个信号合并起来，并且拿到各个信号的最新的值,必须每个合并的signal至少都有过一次sendNext，才会触发合并的信号。</p>\n<p>reduce聚合:用于信号发出的内容是元组，把信号发出元组的值聚合成一个值</p>\n<p>filter:过滤信号，使用它可以获取满足条件的信号.</p>\n<p>ignore:忽略完某些值的信号.</p>\n<p>distinctUntilChanged:当上一次的值和当前的值有明显的变化就会发出信号，否则会被忽略掉。</p>\n<p>take:从开始一共取N次的信号</p>\n<p>takeLast:取最后N次的信号,前提条件，订阅者必须调用完成，因为只有完成，就知道总共有多少信号.</p>\n<p>takeUntil:(RACSignal *):获取信号直到某个信号执行完成</p>\n<p>skip:(NSUInteger):跳过几个信号,不接受。</p>\n<p>switchToLatest:用于signalOfSignals（信号的信号），有时候信号也会发出信号，会在signalOfSignals中，获取signalOfSignals发送的最新信号。</p>\n<p>doNext: 执行Next之前，会先执行这个Block</p>\n<p>doCompleted: 执行sendCompleted之前，会先执行这个Block</p>\n<p>timeout：超时，可以让一个信号在一定的时间后，自动报错。</p>\n<p>interval 定时：每隔一段时间发出信号</p>\n<p>delay 延迟发送next。</p>\n<p>retry重试 ：只要失败，就会重新执行创建信号中的block,直到成功.</p>\n<p>replay重放：当一个信号被多次订阅,反复播放内容</p>\n<p>throttle节流:当某个信号发送比较频繁时，可以使用节流，在某一段时间不发送信号内容，过了一段时间获取信号的最新内容发出。</p>\n<h3 id=\"五、UI-Category（常用汇总）\"><a href=\"#五、UI-Category（常用汇总）\" class=\"headerlink\" title=\"五、UI - Category（常用汇总）\"></a>五、UI - Category（常用汇总）</h3><p>1、rac_prepareForReuseSignal： 需要复用时用</p>\n<p>相关UI: MKAnnotationView、UICollectionReusableView、UITableViewCell、UITableViewHeaderFooterView</p>\n<p>2、rac_buttonClickedSignal：点击事件触发信号</p>\n<p>相关UI：UIActionSheet、UIAlertView</p>\n<p>3、rac_command：button类、刷新类相关命令替换</p>\n<p>相关UI：UIBarButtonItem、UIButton、UIRefreshControl</p>\n<p>4、rac_signalForControlEvents: control event 触发</p>\n<p>相关UI：UIControl</p>\n<p>5、rac_gestureSignal UIGestureRecognizer 事件处理信号</p>\n<p>相关UI：UIGestureRecognizer</p>\n<p>6、rac_imageSelectedSignal 选择图片的信号</p>\n<p>相关UI：UIImagePickerController</p>\n<p>7、rac_textSignal</p>\n<p>相关UI：UITextField、UITextView</p>\n<p>8、可实现双向绑定的相关API</p>\n<p>rac_channelForControlEvents: key: nilValue:</p>\n<p>相关UI：UIControl类</p>\n<p>rac_newDateChannelWithNilValue:</p>\n<p>相关UI：UIDatePicker</p>\n<p>rac_newSelectedSegmentIndexChannelWithNilValue:</p>\n<p>相关UI：UISegmentedControl</p>\n<p>rac_newValueChannelWithNilValue:</p>\n<p>相关UI：UISlider、UIStepper</p>\n<p>rac_newOnChannel</p>\n<p>相关UI：UISwitch</p>\n<p>rac_newTextChannel</p>\n<p>相关UI：UITextField</p>\n<h3 id=\"六、Foundation-Category-（常用汇总）\"><a href=\"#六、Foundation-Category-（常用汇总）\" class=\"headerlink\" title=\"六、Foundation - Category （常用汇总）\"></a>六、Foundation - Category （常用汇总）</h3><p>1、NSArray</p>\n<p>rac_sequence 信号集合</p>\n<p>2、NSData</p>\n<p>rac_readContentsOfURL: options: scheduler: 比oc多出线程设置</p>\n<p>3、NSDictionary</p>\n<p>rac_sequence 不解释</p>\n<p>rac_keySequence key 集合</p>\n<p>rac_valueSequence value 集合</p>\n<p>4、NSEnumerator</p>\n<p>rac_sequence 不解释</p>\n<p>5、NSFileHandle</p>\n<p>rac_readInBackground 见名知意</p>\n<p>6、NSIndexSet</p>\n<p>rac_sequence 不解释</p>\n<p>7、NSInvocation</p>\n<p>rac_setArgument: atIndex: 设置参数</p>\n<p>rac_argumentAtIndex 取某个参数</p>\n<p>rac_returnValue 所关联方法的返回值</p>\n<p>8、NSNotificationCenter</p>\n<p>rac_addObserverForName: object:注册通知</p>\n<p>9、NSObject</p>\n<p>rac_willDeallocSignal 对象销毁时发动的信号</p>\n<p>rac_description debug用</p>\n<p>rac_observeKeyPath: options: observer: block:监听某个事件</p>\n<p>rac_liftSelector: withSignals: 全部信号都next在执行</p>\n<p>rac_signalForSelector: 代替某个方法</p>\n<p>rac_signalForSelector:(SEL)selector fromProtocol:代替代理</p>\n<p>10、NSOrderedSet</p>\n<p>rac_sequence 不解释</p>\n<p>11、NSSet</p>\n<p>rac_sequence 不解释</p>\n<p>12、NSString</p>\n<p>rac_keyPathComponents 获取一个路径所有的部分</p>\n<p>rac_keyPathByDeletingLastKeyPathComponent 删除路径最后一部分</p>\n<p>rac_keyPathByDeletingFirstKeyPathComponent 删除路径第一部分</p>\n<p>rac_sequence 不解释 (character)</p>\n<p>rac_readContentsOfURL: usedEncoding: scheduler: 比之OC多线程调用</p>\n<p>13、NSURLConnection</p>\n<p>rac_sendAsynchronousRequest 发起异步请求</p>\n<p>14、NSUserDefaults</p>\n<p>rac_channelTerminalForKey 用于双向绑定，此乃一</p>"},{"title":"内存分配详解-由底到高","date":"2019-02-26T11:04:53.000Z","keywords":"计算机原理,内存分配,内存分区,比特,字节,指针,指针的指针,32位,64位,内存条,4G,8G","_content":"\n### 一行代码引发的思考\n> int a = 5;\n\n问1:变量a在内存的哪里？\n问2:数字5在内存的哪里？\n问3:int的字节大小是多少？如果a=12345后，字节大小变不变？\n问4:代码里面print(\"%d\", a)，为什么可以输出5，a是怎么找到5的？\n问5:内存到底在哪里？\n问6:总内存有多大？\n问7:总内存的大小是怎么确定的？\n\n各位能回答上面的7问吗？\n\n由底往上来解析，一步一步揭开洋葱的外衣，真相终究会大白于天下！\n\n<!-- more -->\n\n### 字节与比特\n\n比特这玩意，说好理解，马上能理解。说难理解，那肯定还是需要一翻思考总结的。\n`比特是计算机存储的最小存储单元`。我们认知到的数字`3`，在计算机的存储里（硬盘或者内存）的结构是这样的：`00000011`。是的，也就是我们理解的二进制。\n所以这个数字`3`是由8位组成的。每位有`0`和`1`两种变化。\n恐怖的是，比特存储，是计算机的基石。我们在互联网上通行的一切，如图片、音视频、文字，甚至各位的博客、App、电子书等等，能想到的能通过互联网传输的一切，都是比特存储。\n举个例子，我们看的一张图片，在磁盘上的存储，或许就是这样子：`0101011101010101010111101011110101010101100***(省略100000000个)***1010100111010101`。\n所以，祝各位每年的`1024节`快乐，因为我们的努力，世界才如此缤纷多彩 ：)\n\n1字节(byte)=8比特(bit)\n我们刚才说到的数字`3`，就是一个字节，在磁盘上就是`00000011`。（为了便于理解，实际可能是`00000000 00000011`，或者`00000000 00000000 00000000 00000011`）。\n`1字节=8比特`，这个是定死的，开始就是这么玩的，也会永远的玩下去。\n\n1KB = 1024B（2的10次方）\n1MB = 1024KB（2的10次方）\n1GB = 1024MB（2的10次方）\n这里大家不要迷惑，为什么是2的10次方，而不是3的10次方，也不是2的15次方。\n\"就是这么规定的，爱玩不玩！\"\n\n具体怎么定的这个规则，肯定有原因，肯定也能查到历史。具体各位在自行查看中外文档吧，查到了也请告知。\n\n### 计算机基础与`位`的进化史\n\n这里说计算机/手机的两个层面，一个是内存条，一个是CPU。\n\n#### 内存条\n实实在在的东西，有4GB、8GB、16GB等大小，长条形的带黑边的玩意，实体店网店都能买到，笔记本的小一些，台式机的大一些，有各种型号。手机的内存条是出厂固定在里面的，不好弄。\n插到计算机的主板上面就能使用了。如果电脑开机的时候出现`滴滴滴`的声音，就把内存条拔出来檫檫，有很大概率能好。\n**内存条硬性决定了我们可用的最大内存。**\n\n#### CPU\n**CPU软件决定了我们可用的最大内存。**\nCPU决定我们的操作系统是`32位`还是`64位`（甚至8位，16位等）。\n这里的`32位`和`64位`，指的是`内存地址`的`位`大小。\n\n内存条是硬件存储设备。它随随便便就能支持8GB的数据存储。各位知道8GB是多大吗？8GB = 8G \\* 1024M \\* 1024K \\* 1024Byte，也就是`8589934592`Byte(字节)。\n再恐怖点，1Byte=8Bit，Bit才是最小存储单元，所以真实存储是：`8589934592 * 8`即`68719476736`Bit（比特）。\n\n逆过来分析：\n这么大的比特数据，在内存条是按照8Bit一组排列的。\n每8Bit形成一个小房间。所以8GB的内存条里面，有`68719476736 / 8`个房间。\n计算机操作系统可以通过`定向寻址`的方案，直接找到每个房间。形象来说，就是每个房间都有一个`内存地址`,系统通过`内存地址`就可以一瞬间biu～一下就到那个房间，房间里面有8个小人(8Bit)。\n\n`内存地址`是关键，他是什么东西？\n就是刚才我们说到的`32位`和`64位`CPU。如果CPU是32位，那么`内存地址`最小为：`00000000 00000000 00000000 00000000`，最大为：`11111111 11111111 11111111 11111111`。64位就`00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000`和`11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111`。\n对于32位CPU来说，这最小和最大之间，有多少个呢？因为每个Bit有`0`和`1`两个选择，所以总共有2的32次方个。每一个都一一对应内存条里面的一个房间，所以最多可以对应`2*2*2*2(32个2相乘)=4294967296`个房间。\n每个房间是8Bit即1Byte(字节)，也就是总房间大小为:`4294967296Byte`，也就是`4294967296Byte/1024K/1024M/1024G = 4GB`。\n**真相开始大白了，对于32位CPU的操作系统，最大的内存地址也就是：`11111111 11111111 11111111 11111111`。也就是最多只能找到`2*2*2*2(32个2相乘)=4294967296`个房间。也就是最大内存查找范围只有`4294967296Byte/1024K/1024M/1024G = 4GB`。**\n\n原理分析完了，各位就知道一个现象了：\n当年win7系统，明明买了8G的内存条，到`我到电脑`里面一看，只有4G不到。其余到4G不见了。\n其实不是不见了，它还在那里，只是操作系统因为CPU到32位限制，读取不了更多到内存空间了。\n\n#### 初步总结\n32位的CPU操作系统，只能读取4G的内存空间，内存条有更多空间也读取不了了。本质原因在于`内存地址`，就是每个存储字节(房间)的`内存地址`(房间号)。\n因为`内存地址`只有32位，`11111111 11111111 11111111 11111111`是`内存地址`的最大值，也就是最大门牌号。\n如果我们把最大门牌号变大，那操作系统肯定能够读取到更多到房间。\n`64位`CPU到最大`内存地址`是：`11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111`，即`18446744073709551616`，这代表有`18446744073709551616`个房间，也就是`18446744073709551616Byte/1024K/1024M/1024G = 17179869184GB`。恐怖不恐怖？但是目前综合技术限制，我们更多使用的是8G内存、16G内存和32G内存，更大到商用的，我没听过了。\n所以win7系统，明明放了8G内存条，只能使用4G的解决方案就是：重装系统，装64位的。\n\n### 指针\n\n万物皆为C。即C语言。\n后面孩子孙子辈的语言，尽管百花齐放，终究逃离不了指针。这是计算机发展史上的根基。\n\n指针是什么？我理解的指针，就是存储一段数据，这个数据是什么？是`内存地址`。\n\n```\nint main(int argc, char *argv[]) {\n    int a = 5;\n    int *p = &a;\n}\n```\n\n上面代码中，如何通过p找到5？\n\n5是int类型的数据，所以在32位的内存条中这样存储：`00000000 00000000 00000000 00000101`。它占据4个房间。\na是什么？a是给我们程序员看的。代码跑起来后，a代表的就是5的`内存地址`，所以a就是连续的4个房间的内存地址，第一个房间的`内存地址`是：`00000000 00000000 11111111 11111111`(我假设的)。后面三个房间分别二进制+1。通过第一个房间，就可以连续的找到5这个存储数据。\np呢，指向a的指针，所以系统在内存里面存储了`00000000 00000000 11111111 11111111`这个二进制数据，也就是把a的`内存地址`给存了下来。同时这个二进制数据也有自己的连续房间号内存地址：`00000000 11111111 11111111 11111111`(我假设的）。这个地址，就是p啦。\np如何找到5？就是p通过存储的a的内存地址，找到了5的第一个房间号，都找到房间号了，肯定也就找到5这个存储数据了。\n\n### 指针的指针\n\n```\nint main(int argc, char *argv[]) {\n    int a = 5;\n    int *p = &a;\n    int **pp = &p;\n}\n```\n\n各位看，这里又创建了指向p指针的指针。啥意思？就还是指针。只不过这个指针，指向的不是5这个数据，还是另一个指针。那`int ***ppp = &pp`呢？还是一样的，还是指针，这个指针指向pp的内存地址。\n\n所以这个时候，系统在内存里面存储了`00000000 11111111 11111111 11111111`这个二进制数据，也就是把p的`内存地址`给存了下来。同时这个二进制数据也有自己的连续房间号内存地址：`00001111 11111111 11111111 11111111`(我假设的）。这个地址，就是pp啦。\n\n指针的指针的指针的指针，也还是一样的逻辑。`int **********pppppppppp = &ppppppppp`。\n\n### 内存分配\n\n各位看到了，内存分配的本质，就是`内存地址`的存储和调用。\n每一个变量，在程序运行后，就不存在了，存在的是这个变量所对应的`内存地址`。我们通过`内存地址`找到对应的数据，或者通过`内存地址`找到上一个`内存地址`，并最终找到对应的数据。\n总内存条很大，所以里面分了几个大区。如堆栈等，还有高低位的限制。总体来说，内存是按照一定的顺序进行存储的。\n我们使用的那些字面量啊或者对象啊啥的，就是一块存储区域。操作系统（栈）或者我们自己（堆）在内存区里面创建了这个数据并存储了下来。因为数据存储在房间里，所以每个数据都有一串连续的房间号（内存地址）。\n在指针的逻辑里面，我们赋值等操作的时候，就是把这个内存地址，不断的放在另一个内存区域里面进行记录，然后读取的时候一环一环的就读取到了最终存储房间。\n\n### 内存分区\n\n内存分区有多种，如堆、栈、静态区、全局区、代码区等。上面的理解了，这些都只是外部包装，虽然他们本身很复杂，但是理解起来会简单的多了。因为我也只是理解，就不夸夸其谈了。自行Google。\n\n___\n\nC绝对是计算机语言的开荒基石。\n熟练C的程序员，大脑里就有一片星辰大海。","source":"_posts/内存分配详解-由底到高.md","raw":"---\ntitle: 内存分配详解-由底到高\ndate: 2019-02-26 19:04:53\ncategories:\n- 技术\ntags:\n- 计算机原理\n- C\n- iOS\n- Python\n- Node.js\nkeywords: 计算机原理,内存分配,内存分区,比特,字节,指针,指针的指针,32位,64位,内存条,4G,8G\n---\n\n### 一行代码引发的思考\n> int a = 5;\n\n问1:变量a在内存的哪里？\n问2:数字5在内存的哪里？\n问3:int的字节大小是多少？如果a=12345后，字节大小变不变？\n问4:代码里面print(\"%d\", a)，为什么可以输出5，a是怎么找到5的？\n问5:内存到底在哪里？\n问6:总内存有多大？\n问7:总内存的大小是怎么确定的？\n\n各位能回答上面的7问吗？\n\n由底往上来解析，一步一步揭开洋葱的外衣，真相终究会大白于天下！\n\n<!-- more -->\n\n### 字节与比特\n\n比特这玩意，说好理解，马上能理解。说难理解，那肯定还是需要一翻思考总结的。\n`比特是计算机存储的最小存储单元`。我们认知到的数字`3`，在计算机的存储里（硬盘或者内存）的结构是这样的：`00000011`。是的，也就是我们理解的二进制。\n所以这个数字`3`是由8位组成的。每位有`0`和`1`两种变化。\n恐怖的是，比特存储，是计算机的基石。我们在互联网上通行的一切，如图片、音视频、文字，甚至各位的博客、App、电子书等等，能想到的能通过互联网传输的一切，都是比特存储。\n举个例子，我们看的一张图片，在磁盘上的存储，或许就是这样子：`0101011101010101010111101011110101010101100***(省略100000000个)***1010100111010101`。\n所以，祝各位每年的`1024节`快乐，因为我们的努力，世界才如此缤纷多彩 ：)\n\n1字节(byte)=8比特(bit)\n我们刚才说到的数字`3`，就是一个字节，在磁盘上就是`00000011`。（为了便于理解，实际可能是`00000000 00000011`，或者`00000000 00000000 00000000 00000011`）。\n`1字节=8比特`，这个是定死的，开始就是这么玩的，也会永远的玩下去。\n\n1KB = 1024B（2的10次方）\n1MB = 1024KB（2的10次方）\n1GB = 1024MB（2的10次方）\n这里大家不要迷惑，为什么是2的10次方，而不是3的10次方，也不是2的15次方。\n\"就是这么规定的，爱玩不玩！\"\n\n具体怎么定的这个规则，肯定有原因，肯定也能查到历史。具体各位在自行查看中外文档吧，查到了也请告知。\n\n### 计算机基础与`位`的进化史\n\n这里说计算机/手机的两个层面，一个是内存条，一个是CPU。\n\n#### 内存条\n实实在在的东西，有4GB、8GB、16GB等大小，长条形的带黑边的玩意，实体店网店都能买到，笔记本的小一些，台式机的大一些，有各种型号。手机的内存条是出厂固定在里面的，不好弄。\n插到计算机的主板上面就能使用了。如果电脑开机的时候出现`滴滴滴`的声音，就把内存条拔出来檫檫，有很大概率能好。\n**内存条硬性决定了我们可用的最大内存。**\n\n#### CPU\n**CPU软件决定了我们可用的最大内存。**\nCPU决定我们的操作系统是`32位`还是`64位`（甚至8位，16位等）。\n这里的`32位`和`64位`，指的是`内存地址`的`位`大小。\n\n内存条是硬件存储设备。它随随便便就能支持8GB的数据存储。各位知道8GB是多大吗？8GB = 8G \\* 1024M \\* 1024K \\* 1024Byte，也就是`8589934592`Byte(字节)。\n再恐怖点，1Byte=8Bit，Bit才是最小存储单元，所以真实存储是：`8589934592 * 8`即`68719476736`Bit（比特）。\n\n逆过来分析：\n这么大的比特数据，在内存条是按照8Bit一组排列的。\n每8Bit形成一个小房间。所以8GB的内存条里面，有`68719476736 / 8`个房间。\n计算机操作系统可以通过`定向寻址`的方案，直接找到每个房间。形象来说，就是每个房间都有一个`内存地址`,系统通过`内存地址`就可以一瞬间biu～一下就到那个房间，房间里面有8个小人(8Bit)。\n\n`内存地址`是关键，他是什么东西？\n就是刚才我们说到的`32位`和`64位`CPU。如果CPU是32位，那么`内存地址`最小为：`00000000 00000000 00000000 00000000`，最大为：`11111111 11111111 11111111 11111111`。64位就`00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000`和`11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111`。\n对于32位CPU来说，这最小和最大之间，有多少个呢？因为每个Bit有`0`和`1`两个选择，所以总共有2的32次方个。每一个都一一对应内存条里面的一个房间，所以最多可以对应`2*2*2*2(32个2相乘)=4294967296`个房间。\n每个房间是8Bit即1Byte(字节)，也就是总房间大小为:`4294967296Byte`，也就是`4294967296Byte/1024K/1024M/1024G = 4GB`。\n**真相开始大白了，对于32位CPU的操作系统，最大的内存地址也就是：`11111111 11111111 11111111 11111111`。也就是最多只能找到`2*2*2*2(32个2相乘)=4294967296`个房间。也就是最大内存查找范围只有`4294967296Byte/1024K/1024M/1024G = 4GB`。**\n\n原理分析完了，各位就知道一个现象了：\n当年win7系统，明明买了8G的内存条，到`我到电脑`里面一看，只有4G不到。其余到4G不见了。\n其实不是不见了，它还在那里，只是操作系统因为CPU到32位限制，读取不了更多到内存空间了。\n\n#### 初步总结\n32位的CPU操作系统，只能读取4G的内存空间，内存条有更多空间也读取不了了。本质原因在于`内存地址`，就是每个存储字节(房间)的`内存地址`(房间号)。\n因为`内存地址`只有32位，`11111111 11111111 11111111 11111111`是`内存地址`的最大值，也就是最大门牌号。\n如果我们把最大门牌号变大，那操作系统肯定能够读取到更多到房间。\n`64位`CPU到最大`内存地址`是：`11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111`，即`18446744073709551616`，这代表有`18446744073709551616`个房间，也就是`18446744073709551616Byte/1024K/1024M/1024G = 17179869184GB`。恐怖不恐怖？但是目前综合技术限制，我们更多使用的是8G内存、16G内存和32G内存，更大到商用的，我没听过了。\n所以win7系统，明明放了8G内存条，只能使用4G的解决方案就是：重装系统，装64位的。\n\n### 指针\n\n万物皆为C。即C语言。\n后面孩子孙子辈的语言，尽管百花齐放，终究逃离不了指针。这是计算机发展史上的根基。\n\n指针是什么？我理解的指针，就是存储一段数据，这个数据是什么？是`内存地址`。\n\n```\nint main(int argc, char *argv[]) {\n    int a = 5;\n    int *p = &a;\n}\n```\n\n上面代码中，如何通过p找到5？\n\n5是int类型的数据，所以在32位的内存条中这样存储：`00000000 00000000 00000000 00000101`。它占据4个房间。\na是什么？a是给我们程序员看的。代码跑起来后，a代表的就是5的`内存地址`，所以a就是连续的4个房间的内存地址，第一个房间的`内存地址`是：`00000000 00000000 11111111 11111111`(我假设的)。后面三个房间分别二进制+1。通过第一个房间，就可以连续的找到5这个存储数据。\np呢，指向a的指针，所以系统在内存里面存储了`00000000 00000000 11111111 11111111`这个二进制数据，也就是把a的`内存地址`给存了下来。同时这个二进制数据也有自己的连续房间号内存地址：`00000000 11111111 11111111 11111111`(我假设的）。这个地址，就是p啦。\np如何找到5？就是p通过存储的a的内存地址，找到了5的第一个房间号，都找到房间号了，肯定也就找到5这个存储数据了。\n\n### 指针的指针\n\n```\nint main(int argc, char *argv[]) {\n    int a = 5;\n    int *p = &a;\n    int **pp = &p;\n}\n```\n\n各位看，这里又创建了指向p指针的指针。啥意思？就还是指针。只不过这个指针，指向的不是5这个数据，还是另一个指针。那`int ***ppp = &pp`呢？还是一样的，还是指针，这个指针指向pp的内存地址。\n\n所以这个时候，系统在内存里面存储了`00000000 11111111 11111111 11111111`这个二进制数据，也就是把p的`内存地址`给存了下来。同时这个二进制数据也有自己的连续房间号内存地址：`00001111 11111111 11111111 11111111`(我假设的）。这个地址，就是pp啦。\n\n指针的指针的指针的指针，也还是一样的逻辑。`int **********pppppppppp = &ppppppppp`。\n\n### 内存分配\n\n各位看到了，内存分配的本质，就是`内存地址`的存储和调用。\n每一个变量，在程序运行后，就不存在了，存在的是这个变量所对应的`内存地址`。我们通过`内存地址`找到对应的数据，或者通过`内存地址`找到上一个`内存地址`，并最终找到对应的数据。\n总内存条很大，所以里面分了几个大区。如堆栈等，还有高低位的限制。总体来说，内存是按照一定的顺序进行存储的。\n我们使用的那些字面量啊或者对象啊啥的，就是一块存储区域。操作系统（栈）或者我们自己（堆）在内存区里面创建了这个数据并存储了下来。因为数据存储在房间里，所以每个数据都有一串连续的房间号（内存地址）。\n在指针的逻辑里面，我们赋值等操作的时候，就是把这个内存地址，不断的放在另一个内存区域里面进行记录，然后读取的时候一环一环的就读取到了最终存储房间。\n\n### 内存分区\n\n内存分区有多种，如堆、栈、静态区、全局区、代码区等。上面的理解了，这些都只是外部包装，虽然他们本身很复杂，但是理解起来会简单的多了。因为我也只是理解，就不夸夸其谈了。自行Google。\n\n___\n\nC绝对是计算机语言的开荒基石。\n熟练C的程序员，大脑里就有一片星辰大海。","slug":"内存分配详解-由底到高","published":1,"updated":"2019-03-07T01:58:56.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjytswl3e001uodgpkl1ef9xx","content":"<h3 id=\"一行代码引发的思考\"><a href=\"#一行代码引发的思考\" class=\"headerlink\" title=\"一行代码引发的思考\"></a>一行代码引发的思考</h3><blockquote>\n<p>int a = 5;</p>\n</blockquote>\n<p>问1:变量a在内存的哪里？<br>问2:数字5在内存的哪里？<br>问3:int的字节大小是多少？如果a=12345后，字节大小变不变？<br>问4:代码里面print(“%d”, a)，为什么可以输出5，a是怎么找到5的？<br>问5:内存到底在哪里？<br>问6:总内存有多大？<br>问7:总内存的大小是怎么确定的？</p>\n<p>各位能回答上面的7问吗？</p>\n<p>由底往上来解析，一步一步揭开洋葱的外衣，真相终究会大白于天下！</p>\n<a id=\"more\"></a>\n\n<h3 id=\"字节与比特\"><a href=\"#字节与比特\" class=\"headerlink\" title=\"字节与比特\"></a>字节与比特</h3><p>比特这玩意，说好理解，马上能理解。说难理解，那肯定还是需要一翻思考总结的。<br><code>比特是计算机存储的最小存储单元</code>。我们认知到的数字<code>3</code>，在计算机的存储里（硬盘或者内存）的结构是这样的：<code>00000011</code>。是的，也就是我们理解的二进制。<br>所以这个数字<code>3</code>是由8位组成的。每位有<code>0</code>和<code>1</code>两种变化。<br>恐怖的是，比特存储，是计算机的基石。我们在互联网上通行的一切，如图片、音视频、文字，甚至各位的博客、App、电子书等等，能想到的能通过互联网传输的一切，都是比特存储。<br>举个例子，我们看的一张图片，在磁盘上的存储，或许就是这样子：<code>0101011101010101010111101011110101010101100***(省略100000000个)***1010100111010101</code>。<br>所以，祝各位每年的<code>1024节</code>快乐，因为我们的努力，世界才如此缤纷多彩 ：)</p>\n<p>1字节(byte)=8比特(bit)<br>我们刚才说到的数字<code>3</code>，就是一个字节，在磁盘上就是<code>00000011</code>。（为了便于理解，实际可能是<code>00000000 00000011</code>，或者<code>00000000 00000000 00000000 00000011</code>）。<br><code>1字节=8比特</code>，这个是定死的，开始就是这么玩的，也会永远的玩下去。</p>\n<p>1KB = 1024B（2的10次方）<br>1MB = 1024KB（2的10次方）<br>1GB = 1024MB（2的10次方）<br>这里大家不要迷惑，为什么是2的10次方，而不是3的10次方，也不是2的15次方。<br>“就是这么规定的，爱玩不玩！”</p>\n<p>具体怎么定的这个规则，肯定有原因，肯定也能查到历史。具体各位在自行查看中外文档吧，查到了也请告知。</p>\n<h3 id=\"计算机基础与位的进化史\"><a href=\"#计算机基础与位的进化史\" class=\"headerlink\" title=\"计算机基础与位的进化史\"></a>计算机基础与<code>位</code>的进化史</h3><p>这里说计算机/手机的两个层面，一个是内存条，一个是CPU。</p>\n<h4 id=\"内存条\"><a href=\"#内存条\" class=\"headerlink\" title=\"内存条\"></a>内存条</h4><p>实实在在的东西，有4GB、8GB、16GB等大小，长条形的带黑边的玩意，实体店网店都能买到，笔记本的小一些，台式机的大一些，有各种型号。手机的内存条是出厂固定在里面的，不好弄。<br>插到计算机的主板上面就能使用了。如果电脑开机的时候出现<code>滴滴滴</code>的声音，就把内存条拔出来檫檫，有很大概率能好。<br><strong>内存条硬性决定了我们可用的最大内存。</strong></p>\n<h4 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h4><p><strong>CPU软件决定了我们可用的最大内存。</strong><br>CPU决定我们的操作系统是<code>32位</code>还是<code>64位</code>（甚至8位，16位等）。<br>这里的<code>32位</code>和<code>64位</code>，指的是<code>内存地址</code>的<code>位</code>大小。</p>\n<p>内存条是硬件存储设备。它随随便便就能支持8GB的数据存储。各位知道8GB是多大吗？8GB = 8G * 1024M * 1024K * 1024Byte，也就是<code>8589934592</code>Byte(字节)。<br>再恐怖点，1Byte=8Bit，Bit才是最小存储单元，所以真实存储是：<code>8589934592 * 8</code>即<code>68719476736</code>Bit（比特）。</p>\n<p>逆过来分析：<br>这么大的比特数据，在内存条是按照8Bit一组排列的。<br>每8Bit形成一个小房间。所以8GB的内存条里面，有<code>68719476736 / 8</code>个房间。<br>计算机操作系统可以通过<code>定向寻址</code>的方案，直接找到每个房间。形象来说，就是每个房间都有一个<code>内存地址</code>,系统通过<code>内存地址</code>就可以一瞬间biu～一下就到那个房间，房间里面有8个小人(8Bit)。</p>\n<p><code>内存地址</code>是关键，他是什么东西？<br>就是刚才我们说到的<code>32位</code>和<code>64位</code>CPU。如果CPU是32位，那么<code>内存地址</code>最小为：<code>00000000 00000000 00000000 00000000</code>，最大为：<code>11111111 11111111 11111111 11111111</code>。64位就<code>00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000</code>和<code>11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111</code>。<br>对于32位CPU来说，这最小和最大之间，有多少个呢？因为每个Bit有<code>0</code>和<code>1</code>两个选择，所以总共有2的32次方个。每一个都一一对应内存条里面的一个房间，所以最多可以对应<code>2*2*2*2(32个2相乘)=4294967296</code>个房间。<br>每个房间是8Bit即1Byte(字节)，也就是总房间大小为:<code>4294967296Byte</code>，也就是<code>4294967296Byte/1024K/1024M/1024G = 4GB</code>。<br><strong>真相开始大白了，对于32位CPU的操作系统，最大的内存地址也就是：<code>11111111 11111111 11111111 11111111</code>。也就是最多只能找到<code>2*2*2*2(32个2相乘)=4294967296</code>个房间。也就是最大内存查找范围只有<code>4294967296Byte/1024K/1024M/1024G = 4GB</code>。</strong></p>\n<p>原理分析完了，各位就知道一个现象了：<br>当年win7系统，明明买了8G的内存条，到<code>我到电脑</code>里面一看，只有4G不到。其余到4G不见了。<br>其实不是不见了，它还在那里，只是操作系统因为CPU到32位限制，读取不了更多到内存空间了。</p>\n<h4 id=\"初步总结\"><a href=\"#初步总结\" class=\"headerlink\" title=\"初步总结\"></a>初步总结</h4><p>32位的CPU操作系统，只能读取4G的内存空间，内存条有更多空间也读取不了了。本质原因在于<code>内存地址</code>，就是每个存储字节(房间)的<code>内存地址</code>(房间号)。<br>因为<code>内存地址</code>只有32位，<code>11111111 11111111 11111111 11111111</code>是<code>内存地址</code>的最大值，也就是最大门牌号。<br>如果我们把最大门牌号变大，那操作系统肯定能够读取到更多到房间。<br><code>64位</code>CPU到最大<code>内存地址</code>是：<code>11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111</code>，即<code>18446744073709551616</code>，这代表有<code>18446744073709551616</code>个房间，也就是<code>18446744073709551616Byte/1024K/1024M/1024G = 17179869184GB</code>。恐怖不恐怖？但是目前综合技术限制，我们更多使用的是8G内存、16G内存和32G内存，更大到商用的，我没听过了。<br>所以win7系统，明明放了8G内存条，只能使用4G的解决方案就是：重装系统，装64位的。</p>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><p>万物皆为C。即C语言。<br>后面孩子孙子辈的语言，尽管百花齐放，终究逃离不了指针。这是计算机发展史上的根基。</p>\n<p>指针是什么？我理解的指针，就是存储一段数据，这个数据是什么？是<code>内存地址</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main(int argc, char *argv[]) &#123;</span><br><span class=\"line\">    int a = 5;</span><br><span class=\"line\">    int *p = &amp;a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，如何通过p找到5？</p>\n<p>5是int类型的数据，所以在32位的内存条中这样存储：<code>00000000 00000000 00000000 00000101</code>。它占据4个房间。<br>a是什么？a是给我们程序员看的。代码跑起来后，a代表的就是5的<code>内存地址</code>，所以a就是连续的4个房间的内存地址，第一个房间的<code>内存地址</code>是：<code>00000000 00000000 11111111 11111111</code>(我假设的)。后面三个房间分别二进制+1。通过第一个房间，就可以连续的找到5这个存储数据。<br>p呢，指向a的指针，所以系统在内存里面存储了<code>00000000 00000000 11111111 11111111</code>这个二进制数据，也就是把a的<code>内存地址</code>给存了下来。同时这个二进制数据也有自己的连续房间号内存地址：<code>00000000 11111111 11111111 11111111</code>(我假设的）。这个地址，就是p啦。<br>p如何找到5？就是p通过存储的a的内存地址，找到了5的第一个房间号，都找到房间号了，肯定也就找到5这个存储数据了。</p>\n<h3 id=\"指针的指针\"><a href=\"#指针的指针\" class=\"headerlink\" title=\"指针的指针\"></a>指针的指针</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main(int argc, char *argv[]) &#123;</span><br><span class=\"line\">    int a = 5;</span><br><span class=\"line\">    int *p = &amp;a;</span><br><span class=\"line\">    int **pp = &amp;p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>各位看，这里又创建了指向p指针的指针。啥意思？就还是指针。只不过这个指针，指向的不是5这个数据，还是另一个指针。那<code>int ***ppp = &amp;pp</code>呢？还是一样的，还是指针，这个指针指向pp的内存地址。</p>\n<p>所以这个时候，系统在内存里面存储了<code>00000000 11111111 11111111 11111111</code>这个二进制数据，也就是把p的<code>内存地址</code>给存了下来。同时这个二进制数据也有自己的连续房间号内存地址：<code>00001111 11111111 11111111 11111111</code>(我假设的）。这个地址，就是pp啦。</p>\n<p>指针的指针的指针的指针，也还是一样的逻辑。<code>int **********pppppppppp = &amp;ppppppppp</code>。</p>\n<h3 id=\"内存分配\"><a href=\"#内存分配\" class=\"headerlink\" title=\"内存分配\"></a>内存分配</h3><p>各位看到了，内存分配的本质，就是<code>内存地址</code>的存储和调用。<br>每一个变量，在程序运行后，就不存在了，存在的是这个变量所对应的<code>内存地址</code>。我们通过<code>内存地址</code>找到对应的数据，或者通过<code>内存地址</code>找到上一个<code>内存地址</code>，并最终找到对应的数据。<br>总内存条很大，所以里面分了几个大区。如堆栈等，还有高低位的限制。总体来说，内存是按照一定的顺序进行存储的。<br>我们使用的那些字面量啊或者对象啊啥的，就是一块存储区域。操作系统（栈）或者我们自己（堆）在内存区里面创建了这个数据并存储了下来。因为数据存储在房间里，所以每个数据都有一串连续的房间号（内存地址）。<br>在指针的逻辑里面，我们赋值等操作的时候，就是把这个内存地址，不断的放在另一个内存区域里面进行记录，然后读取的时候一环一环的就读取到了最终存储房间。</p>\n<h3 id=\"内存分区\"><a href=\"#内存分区\" class=\"headerlink\" title=\"内存分区\"></a>内存分区</h3><p>内存分区有多种，如堆、栈、静态区、全局区、代码区等。上面的理解了，这些都只是外部包装，虽然他们本身很复杂，但是理解起来会简单的多了。因为我也只是理解，就不夸夸其谈了。自行Google。</p>\n<hr>\n<p>C绝对是计算机语言的开荒基石。<br>熟练C的程序员，大脑里就有一片星辰大海。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"一行代码引发的思考\"><a href=\"#一行代码引发的思考\" class=\"headerlink\" title=\"一行代码引发的思考\"></a>一行代码引发的思考</h3><blockquote>\n<p>int a = 5;</p>\n</blockquote>\n<p>问1:变量a在内存的哪里？<br>问2:数字5在内存的哪里？<br>问3:int的字节大小是多少？如果a=12345后，字节大小变不变？<br>问4:代码里面print(“%d”, a)，为什么可以输出5，a是怎么找到5的？<br>问5:内存到底在哪里？<br>问6:总内存有多大？<br>问7:总内存的大小是怎么确定的？</p>\n<p>各位能回答上面的7问吗？</p>\n<p>由底往上来解析，一步一步揭开洋葱的外衣，真相终究会大白于天下！</p>","more":"<h3 id=\"字节与比特\"><a href=\"#字节与比特\" class=\"headerlink\" title=\"字节与比特\"></a>字节与比特</h3><p>比特这玩意，说好理解，马上能理解。说难理解，那肯定还是需要一翻思考总结的。<br><code>比特是计算机存储的最小存储单元</code>。我们认知到的数字<code>3</code>，在计算机的存储里（硬盘或者内存）的结构是这样的：<code>00000011</code>。是的，也就是我们理解的二进制。<br>所以这个数字<code>3</code>是由8位组成的。每位有<code>0</code>和<code>1</code>两种变化。<br>恐怖的是，比特存储，是计算机的基石。我们在互联网上通行的一切，如图片、音视频、文字，甚至各位的博客、App、电子书等等，能想到的能通过互联网传输的一切，都是比特存储。<br>举个例子，我们看的一张图片，在磁盘上的存储，或许就是这样子：<code>0101011101010101010111101011110101010101100***(省略100000000个)***1010100111010101</code>。<br>所以，祝各位每年的<code>1024节</code>快乐，因为我们的努力，世界才如此缤纷多彩 ：)</p>\n<p>1字节(byte)=8比特(bit)<br>我们刚才说到的数字<code>3</code>，就是一个字节，在磁盘上就是<code>00000011</code>。（为了便于理解，实际可能是<code>00000000 00000011</code>，或者<code>00000000 00000000 00000000 00000011</code>）。<br><code>1字节=8比特</code>，这个是定死的，开始就是这么玩的，也会永远的玩下去。</p>\n<p>1KB = 1024B（2的10次方）<br>1MB = 1024KB（2的10次方）<br>1GB = 1024MB（2的10次方）<br>这里大家不要迷惑，为什么是2的10次方，而不是3的10次方，也不是2的15次方。<br>“就是这么规定的，爱玩不玩！”</p>\n<p>具体怎么定的这个规则，肯定有原因，肯定也能查到历史。具体各位在自行查看中外文档吧，查到了也请告知。</p>\n<h3 id=\"计算机基础与位的进化史\"><a href=\"#计算机基础与位的进化史\" class=\"headerlink\" title=\"计算机基础与位的进化史\"></a>计算机基础与<code>位</code>的进化史</h3><p>这里说计算机/手机的两个层面，一个是内存条，一个是CPU。</p>\n<h4 id=\"内存条\"><a href=\"#内存条\" class=\"headerlink\" title=\"内存条\"></a>内存条</h4><p>实实在在的东西，有4GB、8GB、16GB等大小，长条形的带黑边的玩意，实体店网店都能买到，笔记本的小一些，台式机的大一些，有各种型号。手机的内存条是出厂固定在里面的，不好弄。<br>插到计算机的主板上面就能使用了。如果电脑开机的时候出现<code>滴滴滴</code>的声音，就把内存条拔出来檫檫，有很大概率能好。<br><strong>内存条硬性决定了我们可用的最大内存。</strong></p>\n<h4 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h4><p><strong>CPU软件决定了我们可用的最大内存。</strong><br>CPU决定我们的操作系统是<code>32位</code>还是<code>64位</code>（甚至8位，16位等）。<br>这里的<code>32位</code>和<code>64位</code>，指的是<code>内存地址</code>的<code>位</code>大小。</p>\n<p>内存条是硬件存储设备。它随随便便就能支持8GB的数据存储。各位知道8GB是多大吗？8GB = 8G * 1024M * 1024K * 1024Byte，也就是<code>8589934592</code>Byte(字节)。<br>再恐怖点，1Byte=8Bit，Bit才是最小存储单元，所以真实存储是：<code>8589934592 * 8</code>即<code>68719476736</code>Bit（比特）。</p>\n<p>逆过来分析：<br>这么大的比特数据，在内存条是按照8Bit一组排列的。<br>每8Bit形成一个小房间。所以8GB的内存条里面，有<code>68719476736 / 8</code>个房间。<br>计算机操作系统可以通过<code>定向寻址</code>的方案，直接找到每个房间。形象来说，就是每个房间都有一个<code>内存地址</code>,系统通过<code>内存地址</code>就可以一瞬间biu～一下就到那个房间，房间里面有8个小人(8Bit)。</p>\n<p><code>内存地址</code>是关键，他是什么东西？<br>就是刚才我们说到的<code>32位</code>和<code>64位</code>CPU。如果CPU是32位，那么<code>内存地址</code>最小为：<code>00000000 00000000 00000000 00000000</code>，最大为：<code>11111111 11111111 11111111 11111111</code>。64位就<code>00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000</code>和<code>11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111</code>。<br>对于32位CPU来说，这最小和最大之间，有多少个呢？因为每个Bit有<code>0</code>和<code>1</code>两个选择，所以总共有2的32次方个。每一个都一一对应内存条里面的一个房间，所以最多可以对应<code>2*2*2*2(32个2相乘)=4294967296</code>个房间。<br>每个房间是8Bit即1Byte(字节)，也就是总房间大小为:<code>4294967296Byte</code>，也就是<code>4294967296Byte/1024K/1024M/1024G = 4GB</code>。<br><strong>真相开始大白了，对于32位CPU的操作系统，最大的内存地址也就是：<code>11111111 11111111 11111111 11111111</code>。也就是最多只能找到<code>2*2*2*2(32个2相乘)=4294967296</code>个房间。也就是最大内存查找范围只有<code>4294967296Byte/1024K/1024M/1024G = 4GB</code>。</strong></p>\n<p>原理分析完了，各位就知道一个现象了：<br>当年win7系统，明明买了8G的内存条，到<code>我到电脑</code>里面一看，只有4G不到。其余到4G不见了。<br>其实不是不见了，它还在那里，只是操作系统因为CPU到32位限制，读取不了更多到内存空间了。</p>\n<h4 id=\"初步总结\"><a href=\"#初步总结\" class=\"headerlink\" title=\"初步总结\"></a>初步总结</h4><p>32位的CPU操作系统，只能读取4G的内存空间，内存条有更多空间也读取不了了。本质原因在于<code>内存地址</code>，就是每个存储字节(房间)的<code>内存地址</code>(房间号)。<br>因为<code>内存地址</code>只有32位，<code>11111111 11111111 11111111 11111111</code>是<code>内存地址</code>的最大值，也就是最大门牌号。<br>如果我们把最大门牌号变大，那操作系统肯定能够读取到更多到房间。<br><code>64位</code>CPU到最大<code>内存地址</code>是：<code>11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111</code>，即<code>18446744073709551616</code>，这代表有<code>18446744073709551616</code>个房间，也就是<code>18446744073709551616Byte/1024K/1024M/1024G = 17179869184GB</code>。恐怖不恐怖？但是目前综合技术限制，我们更多使用的是8G内存、16G内存和32G内存，更大到商用的，我没听过了。<br>所以win7系统，明明放了8G内存条，只能使用4G的解决方案就是：重装系统，装64位的。</p>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><p>万物皆为C。即C语言。<br>后面孩子孙子辈的语言，尽管百花齐放，终究逃离不了指针。这是计算机发展史上的根基。</p>\n<p>指针是什么？我理解的指针，就是存储一段数据，这个数据是什么？是<code>内存地址</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main(int argc, char *argv[]) &#123;</span><br><span class=\"line\">    int a = 5;</span><br><span class=\"line\">    int *p = &amp;a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，如何通过p找到5？</p>\n<p>5是int类型的数据，所以在32位的内存条中这样存储：<code>00000000 00000000 00000000 00000101</code>。它占据4个房间。<br>a是什么？a是给我们程序员看的。代码跑起来后，a代表的就是5的<code>内存地址</code>，所以a就是连续的4个房间的内存地址，第一个房间的<code>内存地址</code>是：<code>00000000 00000000 11111111 11111111</code>(我假设的)。后面三个房间分别二进制+1。通过第一个房间，就可以连续的找到5这个存储数据。<br>p呢，指向a的指针，所以系统在内存里面存储了<code>00000000 00000000 11111111 11111111</code>这个二进制数据，也就是把a的<code>内存地址</code>给存了下来。同时这个二进制数据也有自己的连续房间号内存地址：<code>00000000 11111111 11111111 11111111</code>(我假设的）。这个地址，就是p啦。<br>p如何找到5？就是p通过存储的a的内存地址，找到了5的第一个房间号，都找到房间号了，肯定也就找到5这个存储数据了。</p>\n<h3 id=\"指针的指针\"><a href=\"#指针的指针\" class=\"headerlink\" title=\"指针的指针\"></a>指针的指针</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main(int argc, char *argv[]) &#123;</span><br><span class=\"line\">    int a = 5;</span><br><span class=\"line\">    int *p = &amp;a;</span><br><span class=\"line\">    int **pp = &amp;p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>各位看，这里又创建了指向p指针的指针。啥意思？就还是指针。只不过这个指针，指向的不是5这个数据，还是另一个指针。那<code>int ***ppp = &amp;pp</code>呢？还是一样的，还是指针，这个指针指向pp的内存地址。</p>\n<p>所以这个时候，系统在内存里面存储了<code>00000000 11111111 11111111 11111111</code>这个二进制数据，也就是把p的<code>内存地址</code>给存了下来。同时这个二进制数据也有自己的连续房间号内存地址：<code>00001111 11111111 11111111 11111111</code>(我假设的）。这个地址，就是pp啦。</p>\n<p>指针的指针的指针的指针，也还是一样的逻辑。<code>int **********pppppppppp = &amp;ppppppppp</code>。</p>\n<h3 id=\"内存分配\"><a href=\"#内存分配\" class=\"headerlink\" title=\"内存分配\"></a>内存分配</h3><p>各位看到了，内存分配的本质，就是<code>内存地址</code>的存储和调用。<br>每一个变量，在程序运行后，就不存在了，存在的是这个变量所对应的<code>内存地址</code>。我们通过<code>内存地址</code>找到对应的数据，或者通过<code>内存地址</code>找到上一个<code>内存地址</code>，并最终找到对应的数据。<br>总内存条很大，所以里面分了几个大区。如堆栈等，还有高低位的限制。总体来说，内存是按照一定的顺序进行存储的。<br>我们使用的那些字面量啊或者对象啊啥的，就是一块存储区域。操作系统（栈）或者我们自己（堆）在内存区里面创建了这个数据并存储了下来。因为数据存储在房间里，所以每个数据都有一串连续的房间号（内存地址）。<br>在指针的逻辑里面，我们赋值等操作的时候，就是把这个内存地址，不断的放在另一个内存区域里面进行记录，然后读取的时候一环一环的就读取到了最终存储房间。</p>\n<h3 id=\"内存分区\"><a href=\"#内存分区\" class=\"headerlink\" title=\"内存分区\"></a>内存分区</h3><p>内存分区有多种，如堆、栈、静态区、全局区、代码区等。上面的理解了，这些都只是外部包装，虽然他们本身很复杂，但是理解起来会简单的多了。因为我也只是理解，就不夸夸其谈了。自行Google。</p>\n<hr>\n<p>C绝对是计算机语言的开荒基石。<br>熟练C的程序员，大脑里就有一片星辰大海。</p>"},{"title":"计算机Unicode编码终结","date":"2019-05-21T05:47:16.000Z","keywords":"Unicode,计算机编码,计算机内存编码,磁盘数据存储编码,UTF,字符编码","_content":"\n>开局三把西瓜刀：\n>1.代码多年不识字符集和编码，是有过错的。\n>2.一天到晚说“Unicode编码”，自己的误区大了。\n>3.没有认知字符、字节、字符集、编码的区别并以讹传讹，就是万恶了。\n>from “一个工匠”\n\n假设你已经查阅了很多关于Unicode、UTF8等之间的关系，并且有了很好的认知。毕竟这博客太低微了，能找到并打开这个链接，那肯定都是看过十几个其他博文的解读了。\n本篇博文**重点描述编码认知过程中的几个坑点**，这个很重要。\n\n<!-- more -->\n\n### ASCII和Unicode的关系\n就当作父子关系吧。这最好理解。\n虽然ASCII是大学计算机教科书入门知识点，如果不联系上编码和Unicode，还是不好理解的。知道有这个东西在，但是怎么玩的却不是很清楚。\n**ASCII是字符集。什么是字符集？就是一个映射表。**\n你现在看到的所有abcd或者汉字或者泰文或者emoji，你要有一个认知，不要认为他们独一无二！他们只是图形，你要把它们理解为符号。而你随手那么一画，也能弄出来一个符号。因为计算机，只认识0和1，计算机没有思维，它不理解我们眼中汉字的博大精深。ASCII把一个位置，标记了一个符号含义。这个位置就是**码位**，这个符号，就是我们看到的abcd。计算机只认识码位，应用层根据码位从Ascii映射符号。如果你自定义了一个字符集，把相同的码位定位为刚才你随手画的那个符号，又有什么关系呢？因为这个码位到底代表什么，是应用层的事情了，而我们切换字体，是不是也有异曲同工之妙？\n**ASCII主要是制定了规则。**这样整个美国人民都可以根据码位对应一样的符号，就能统一的显示单词语句了。\n好景不长，计算机发展太快，ASCII本身有缺陷，只有256个字符，中国几十万汉子，那是ASCII能表示的了？更何况还有韩国，印度等等。\n这个时候Unicode出来了。**Unicode干嘛的？啥也没干除了一件事，就是继续制定规则。**这个规则很大，涵盖了所有的字符，并且还在不断增加。这样，不管是汉字，还是泰文，都能通过Unicode找到一个映射的码位。有了统一的规则，世界就能连起来了嘛，因为索引10000代表一个符号，10001又代表一个符号，而他们代表的符号，是全球统一的，所有应用层都能根据这个码位显示一样的符号。\n所以ASCII和Unicode是什么关系？ASCII是第一个让人们可以通过计算机交流的字符集合。Unicode不是第二个，Unicode没出来之前，中国还自己做了GBK字符集。但是Unicode是最全的一个，**兼容了ASCII，但是比ASCII多了太多的码位。所以说，ASCII和Unicode是父子关系，父亲开拓了疆土，儿子做大了企业。**\n而他们之所以能全球统一，是大势所趋。但他们不是唯一的，你行你也可以搞一个，制定属于自己的一套字符集，你就能弄出来绝对的秘文（虽然是明文，但是码位和符号映射只有你知道，那也就是秘文了）。\n\n### UTF-8，UTF-16，UTF-32\n这三个，叫做字符编码。切记，上面的ASCII和Unicode是字符集，已经介绍了用途。这三个UTF是字符编码，**他们是编码！！！**。\n**字符编码存在的意义，依托于字符集。有了字符集，才有字符编码。**\n因为我们知道了码位，才知道对应的字符，而码位我们可以形象的理解为索引。码位是需要0和1表示的，码位是计算机沟通的途径。\n码位，怎么形成对应的0和1串，就是编码。\n其中，这三个UTF编码最为出名。\n这三个UTF对同一个码位有不同的表示形式。具体各位通过其他博文已经了解到了，多写无意，我就不做搬运工了。\n但是我们得知道：\n1. UTF-8占用空间最小，但是解析速度低，因为不能按序解析字节，UTF-8对字节大小是变化非常大的。\n2. UTF-16占用空间中等，解析速度快。因为更多的码位用2个字节表示，字节大小基本固定（少部分字符通过4个字节表示），解析非常快。\n3. UTF-32占用空间最大，解析速度最快。一个码位用4个字节表示，字节大小全部固定，解析非常快。\n\n### Unicode和Unicode编码\n对于“Unicode编码”，听到不是一次两次了，不理解Unicode之前，我也是这么叫它的。\n但是我们通过ASCII和Unicode的说明，我们已经了解到，Unicode根本不是编码，Unicode是一个字符集。\nUnicode是大而全的字符集，因为时代的需要，做到了全球化。\n你想有自己的字符集，你也行。\n**Unicode并没有对码位做存储等说明，即没有任何字节说明，仅仅描述了码位和字符的映射关系。**\n所以：**Unicode不是编码，Unicode是字符集，和编码没有关系，他们不在一个维度。**\n\n### Unicode和UTF-8的关系\n**Unicode描述了码位和字符的对应关系，UTF描述了码位的计算机存储方案。**\n这样码位就能够通过晶体管进行计算、存储、传输了。\n所以Unicode和UTF-8有什么关系？他们本身没有什么关系，他们是负责解决两个问题的方案，不再一个维度。就是上面说的，“Unicode编码”是错误的叫法。\nUnicode制定了规则，UTF-8按照自己的方案执行了规则，UTF-16、UTF-32也是一样。UTF是为了把码位通过不同的形式，进行传输，这样就可以信息交换了。\n\n### 内存字符编码，网络传输字符编码，磁盘字符编码\n通过上面三个UTF的编码说明，可以得出，空间最小的是UTF-8编码。\n所以毋庸置疑，网络传输，磁盘存储，都是用的是UTF-8编码。占用空间小，对于网络和磁盘来说，比什么都重要。1M或者2M的数据，感觉无所谓，那么100G呢？UTF-8很可能一下子就能节省80%的空间。\n但是内存里面通过什么编码？\n很多人就疑惑了，啥？内存里面也需要编码？\n理解一下，计算机执行所有数据，都是指令和数据的交替。计算机认识啥？认识符号吗？不可能的。\n计算机只认识码位。\n计算机在哪里执行指令和运算数据？内存啊！\n我们在显示器上面看到的这些文字，是怎么显示的？其实应用层读取到的仅仅是码位，应用层通过码位根据映射表进行符号显示的。\n显示器实时读取内存缓冲区里面的数据，然后根据数据显示界面。内存缓冲区里面肯定只能是码位的二进制啊！\n所以，内存里面的码位数据，也是需要编码的。\n很多博文说，内存里面使用的是“Unicode编码”。这是非常错误的。\n一来，Unicode不是编码，\n二来，Unicode编码长什么样？至少写到现在，我不知道码位是如何通过“Unicode编码”来实现。\n**内存使用的是UTF-16编码！PC、Mac、Linux都是这样处理的**\n因为UTF-8解析慢，UTF-32空间大，而内存里面一段时间需要处理的码位并不会非常大，不会有几百兆数量级。\n所以内存编码，采用UTF-16，通过空间换取时间。UTF-16空间大小也适中，解析速度快，非常理想。（除了UTF，还有其他编码，但是UTF更有统一性和跨平台性）\n\n### 编码与字节关系\n**编码，即码位通过二进制表现的方式。**\n一个字符，码位可能是10000，那么通过UTF-8，UTF-16，UTF-32，获取其他编码方式，生成的二进制都是不一样的。\n二进制不一样，相应的字节也就不一样。\n所以这也就是常说的，\n通过UTF-8编码，一个字符(码位)是1个字节、或者2个字节、或者3个字节、或者4个字节，因为UTF-8变字节存储。\n通过UTF-16编码，一个字符(码位)是2个字节、或者4个字节，因为UTF-16按照整数编码方便解析，2个字节已经可以处理90%多的码位了。\n通过UTF-32，每个字符(码位)都是4个字节。\n\n___\n\n因为自身见识面的浅薄，对于很多大的事件，不能自己产生客观的观点与评价。\n但是，见识浅薄的，绝不仅仅是我一个，而是绝大多数。\n对于敏感事件，或许，知道这个事件的存在并从能领悟一些事情，比满口胡言断章取义，给自己和社会带来的价值更大。\n社会需要不同的声音，人生而是群居动物。活跃终究是社会繁荣的体现。\n言论在互联网上，很大程度是自由的。\n希望有正确见解的人，多多发声，而巨婴们，学习就好，打出的字别人都在笑话，何必呢。\n\n-- 华为事件和更多敏感事件有感。","source":"_posts/计算机Unicode编码终结.md","raw":"---\ntitle: 计算机Unicode编码终结\ndate: 2019-05-21 13:47:16\ncategories:\n- 技术\ntags:\n- 计算机原理\nkeywords: Unicode,计算机编码,计算机内存编码,磁盘数据存储编码,UTF,字符编码\n---\n\n>开局三把西瓜刀：\n>1.代码多年不识字符集和编码，是有过错的。\n>2.一天到晚说“Unicode编码”，自己的误区大了。\n>3.没有认知字符、字节、字符集、编码的区别并以讹传讹，就是万恶了。\n>from “一个工匠”\n\n假设你已经查阅了很多关于Unicode、UTF8等之间的关系，并且有了很好的认知。毕竟这博客太低微了，能找到并打开这个链接，那肯定都是看过十几个其他博文的解读了。\n本篇博文**重点描述编码认知过程中的几个坑点**，这个很重要。\n\n<!-- more -->\n\n### ASCII和Unicode的关系\n就当作父子关系吧。这最好理解。\n虽然ASCII是大学计算机教科书入门知识点，如果不联系上编码和Unicode，还是不好理解的。知道有这个东西在，但是怎么玩的却不是很清楚。\n**ASCII是字符集。什么是字符集？就是一个映射表。**\n你现在看到的所有abcd或者汉字或者泰文或者emoji，你要有一个认知，不要认为他们独一无二！他们只是图形，你要把它们理解为符号。而你随手那么一画，也能弄出来一个符号。因为计算机，只认识0和1，计算机没有思维，它不理解我们眼中汉字的博大精深。ASCII把一个位置，标记了一个符号含义。这个位置就是**码位**，这个符号，就是我们看到的abcd。计算机只认识码位，应用层根据码位从Ascii映射符号。如果你自定义了一个字符集，把相同的码位定位为刚才你随手画的那个符号，又有什么关系呢？因为这个码位到底代表什么，是应用层的事情了，而我们切换字体，是不是也有异曲同工之妙？\n**ASCII主要是制定了规则。**这样整个美国人民都可以根据码位对应一样的符号，就能统一的显示单词语句了。\n好景不长，计算机发展太快，ASCII本身有缺陷，只有256个字符，中国几十万汉子，那是ASCII能表示的了？更何况还有韩国，印度等等。\n这个时候Unicode出来了。**Unicode干嘛的？啥也没干除了一件事，就是继续制定规则。**这个规则很大，涵盖了所有的字符，并且还在不断增加。这样，不管是汉字，还是泰文，都能通过Unicode找到一个映射的码位。有了统一的规则，世界就能连起来了嘛，因为索引10000代表一个符号，10001又代表一个符号，而他们代表的符号，是全球统一的，所有应用层都能根据这个码位显示一样的符号。\n所以ASCII和Unicode是什么关系？ASCII是第一个让人们可以通过计算机交流的字符集合。Unicode不是第二个，Unicode没出来之前，中国还自己做了GBK字符集。但是Unicode是最全的一个，**兼容了ASCII，但是比ASCII多了太多的码位。所以说，ASCII和Unicode是父子关系，父亲开拓了疆土，儿子做大了企业。**\n而他们之所以能全球统一，是大势所趋。但他们不是唯一的，你行你也可以搞一个，制定属于自己的一套字符集，你就能弄出来绝对的秘文（虽然是明文，但是码位和符号映射只有你知道，那也就是秘文了）。\n\n### UTF-8，UTF-16，UTF-32\n这三个，叫做字符编码。切记，上面的ASCII和Unicode是字符集，已经介绍了用途。这三个UTF是字符编码，**他们是编码！！！**。\n**字符编码存在的意义，依托于字符集。有了字符集，才有字符编码。**\n因为我们知道了码位，才知道对应的字符，而码位我们可以形象的理解为索引。码位是需要0和1表示的，码位是计算机沟通的途径。\n码位，怎么形成对应的0和1串，就是编码。\n其中，这三个UTF编码最为出名。\n这三个UTF对同一个码位有不同的表示形式。具体各位通过其他博文已经了解到了，多写无意，我就不做搬运工了。\n但是我们得知道：\n1. UTF-8占用空间最小，但是解析速度低，因为不能按序解析字节，UTF-8对字节大小是变化非常大的。\n2. UTF-16占用空间中等，解析速度快。因为更多的码位用2个字节表示，字节大小基本固定（少部分字符通过4个字节表示），解析非常快。\n3. UTF-32占用空间最大，解析速度最快。一个码位用4个字节表示，字节大小全部固定，解析非常快。\n\n### Unicode和Unicode编码\n对于“Unicode编码”，听到不是一次两次了，不理解Unicode之前，我也是这么叫它的。\n但是我们通过ASCII和Unicode的说明，我们已经了解到，Unicode根本不是编码，Unicode是一个字符集。\nUnicode是大而全的字符集，因为时代的需要，做到了全球化。\n你想有自己的字符集，你也行。\n**Unicode并没有对码位做存储等说明，即没有任何字节说明，仅仅描述了码位和字符的映射关系。**\n所以：**Unicode不是编码，Unicode是字符集，和编码没有关系，他们不在一个维度。**\n\n### Unicode和UTF-8的关系\n**Unicode描述了码位和字符的对应关系，UTF描述了码位的计算机存储方案。**\n这样码位就能够通过晶体管进行计算、存储、传输了。\n所以Unicode和UTF-8有什么关系？他们本身没有什么关系，他们是负责解决两个问题的方案，不再一个维度。就是上面说的，“Unicode编码”是错误的叫法。\nUnicode制定了规则，UTF-8按照自己的方案执行了规则，UTF-16、UTF-32也是一样。UTF是为了把码位通过不同的形式，进行传输，这样就可以信息交换了。\n\n### 内存字符编码，网络传输字符编码，磁盘字符编码\n通过上面三个UTF的编码说明，可以得出，空间最小的是UTF-8编码。\n所以毋庸置疑，网络传输，磁盘存储，都是用的是UTF-8编码。占用空间小，对于网络和磁盘来说，比什么都重要。1M或者2M的数据，感觉无所谓，那么100G呢？UTF-8很可能一下子就能节省80%的空间。\n但是内存里面通过什么编码？\n很多人就疑惑了，啥？内存里面也需要编码？\n理解一下，计算机执行所有数据，都是指令和数据的交替。计算机认识啥？认识符号吗？不可能的。\n计算机只认识码位。\n计算机在哪里执行指令和运算数据？内存啊！\n我们在显示器上面看到的这些文字，是怎么显示的？其实应用层读取到的仅仅是码位，应用层通过码位根据映射表进行符号显示的。\n显示器实时读取内存缓冲区里面的数据，然后根据数据显示界面。内存缓冲区里面肯定只能是码位的二进制啊！\n所以，内存里面的码位数据，也是需要编码的。\n很多博文说，内存里面使用的是“Unicode编码”。这是非常错误的。\n一来，Unicode不是编码，\n二来，Unicode编码长什么样？至少写到现在，我不知道码位是如何通过“Unicode编码”来实现。\n**内存使用的是UTF-16编码！PC、Mac、Linux都是这样处理的**\n因为UTF-8解析慢，UTF-32空间大，而内存里面一段时间需要处理的码位并不会非常大，不会有几百兆数量级。\n所以内存编码，采用UTF-16，通过空间换取时间。UTF-16空间大小也适中，解析速度快，非常理想。（除了UTF，还有其他编码，但是UTF更有统一性和跨平台性）\n\n### 编码与字节关系\n**编码，即码位通过二进制表现的方式。**\n一个字符，码位可能是10000，那么通过UTF-8，UTF-16，UTF-32，获取其他编码方式，生成的二进制都是不一样的。\n二进制不一样，相应的字节也就不一样。\n所以这也就是常说的，\n通过UTF-8编码，一个字符(码位)是1个字节、或者2个字节、或者3个字节、或者4个字节，因为UTF-8变字节存储。\n通过UTF-16编码，一个字符(码位)是2个字节、或者4个字节，因为UTF-16按照整数编码方便解析，2个字节已经可以处理90%多的码位了。\n通过UTF-32，每个字符(码位)都是4个字节。\n\n___\n\n因为自身见识面的浅薄，对于很多大的事件，不能自己产生客观的观点与评价。\n但是，见识浅薄的，绝不仅仅是我一个，而是绝大多数。\n对于敏感事件，或许，知道这个事件的存在并从能领悟一些事情，比满口胡言断章取义，给自己和社会带来的价值更大。\n社会需要不同的声音，人生而是群居动物。活跃终究是社会繁荣的体现。\n言论在互联网上，很大程度是自由的。\n希望有正确见解的人，多多发声，而巨婴们，学习就好，打出的字别人都在笑话，何必呢。\n\n-- 华为事件和更多敏感事件有感。","slug":"计算机Unicode编码终结","published":1,"updated":"2019-05-21T09:17:43.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjytswl3h001wodgp4spn3svq","content":"<blockquote>\n<p>开局三把西瓜刀：<br>1.代码多年不识字符集和编码，是有过错的。<br>2.一天到晚说“Unicode编码”，自己的误区大了。<br>3.没有认知字符、字节、字符集、编码的区别并以讹传讹，就是万恶了。<br>from “一个工匠”</p>\n</blockquote>\n<p>假设你已经查阅了很多关于Unicode、UTF8等之间的关系，并且有了很好的认知。毕竟这博客太低微了，能找到并打开这个链接，那肯定都是看过十几个其他博文的解读了。<br>本篇博文<strong>重点描述编码认知过程中的几个坑点</strong>，这个很重要。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"ASCII和Unicode的关系\"><a href=\"#ASCII和Unicode的关系\" class=\"headerlink\" title=\"ASCII和Unicode的关系\"></a>ASCII和Unicode的关系</h3><p>就当作父子关系吧。这最好理解。<br>虽然ASCII是大学计算机教科书入门知识点，如果不联系上编码和Unicode，还是不好理解的。知道有这个东西在，但是怎么玩的却不是很清楚。<br><strong>ASCII是字符集。什么是字符集？就是一个映射表。</strong><br>你现在看到的所有abcd或者汉字或者泰文或者emoji，你要有一个认知，不要认为他们独一无二！他们只是图形，你要把它们理解为符号。而你随手那么一画，也能弄出来一个符号。因为计算机，只认识0和1，计算机没有思维，它不理解我们眼中汉字的博大精深。ASCII把一个位置，标记了一个符号含义。这个位置就是<strong>码位</strong>，这个符号，就是我们看到的abcd。计算机只认识码位，应用层根据码位从Ascii映射符号。如果你自定义了一个字符集，把相同的码位定位为刚才你随手画的那个符号，又有什么关系呢？因为这个码位到底代表什么，是应用层的事情了，而我们切换字体，是不是也有异曲同工之妙？<br><strong>ASCII主要是制定了规则。</strong>这样整个美国人民都可以根据码位对应一样的符号，就能统一的显示单词语句了。<br>好景不长，计算机发展太快，ASCII本身有缺陷，只有256个字符，中国几十万汉子，那是ASCII能表示的了？更何况还有韩国，印度等等。<br>这个时候Unicode出来了。<strong>Unicode干嘛的？啥也没干除了一件事，就是继续制定规则。</strong>这个规则很大，涵盖了所有的字符，并且还在不断增加。这样，不管是汉字，还是泰文，都能通过Unicode找到一个映射的码位。有了统一的规则，世界就能连起来了嘛，因为索引10000代表一个符号，10001又代表一个符号，而他们代表的符号，是全球统一的，所有应用层都能根据这个码位显示一样的符号。<br>所以ASCII和Unicode是什么关系？ASCII是第一个让人们可以通过计算机交流的字符集合。Unicode不是第二个，Unicode没出来之前，中国还自己做了GBK字符集。但是Unicode是最全的一个，<strong>兼容了ASCII，但是比ASCII多了太多的码位。所以说，ASCII和Unicode是父子关系，父亲开拓了疆土，儿子做大了企业。</strong><br>而他们之所以能全球统一，是大势所趋。但他们不是唯一的，你行你也可以搞一个，制定属于自己的一套字符集，你就能弄出来绝对的秘文（虽然是明文，但是码位和符号映射只有你知道，那也就是秘文了）。</p>\n<h3 id=\"UTF-8，UTF-16，UTF-32\"><a href=\"#UTF-8，UTF-16，UTF-32\" class=\"headerlink\" title=\"UTF-8，UTF-16，UTF-32\"></a>UTF-8，UTF-16，UTF-32</h3><p>这三个，叫做字符编码。切记，上面的ASCII和Unicode是字符集，已经介绍了用途。这三个UTF是字符编码，<strong>他们是编码！！！</strong>。<br><strong>字符编码存在的意义，依托于字符集。有了字符集，才有字符编码。</strong><br>因为我们知道了码位，才知道对应的字符，而码位我们可以形象的理解为索引。码位是需要0和1表示的，码位是计算机沟通的途径。<br>码位，怎么形成对应的0和1串，就是编码。<br>其中，这三个UTF编码最为出名。<br>这三个UTF对同一个码位有不同的表示形式。具体各位通过其他博文已经了解到了，多写无意，我就不做搬运工了。<br>但是我们得知道：</p>\n<ol>\n<li>UTF-8占用空间最小，但是解析速度低，因为不能按序解析字节，UTF-8对字节大小是变化非常大的。</li>\n<li>UTF-16占用空间中等，解析速度快。因为更多的码位用2个字节表示，字节大小基本固定（少部分字符通过4个字节表示），解析非常快。</li>\n<li>UTF-32占用空间最大，解析速度最快。一个码位用4个字节表示，字节大小全部固定，解析非常快。</li>\n</ol>\n<h3 id=\"Unicode和Unicode编码\"><a href=\"#Unicode和Unicode编码\" class=\"headerlink\" title=\"Unicode和Unicode编码\"></a>Unicode和Unicode编码</h3><p>对于“Unicode编码”，听到不是一次两次了，不理解Unicode之前，我也是这么叫它的。<br>但是我们通过ASCII和Unicode的说明，我们已经了解到，Unicode根本不是编码，Unicode是一个字符集。<br>Unicode是大而全的字符集，因为时代的需要，做到了全球化。<br>你想有自己的字符集，你也行。<br><strong>Unicode并没有对码位做存储等说明，即没有任何字节说明，仅仅描述了码位和字符的映射关系。</strong><br>所以：<strong>Unicode不是编码，Unicode是字符集，和编码没有关系，他们不在一个维度。</strong></p>\n<h3 id=\"Unicode和UTF-8的关系\"><a href=\"#Unicode和UTF-8的关系\" class=\"headerlink\" title=\"Unicode和UTF-8的关系\"></a>Unicode和UTF-8的关系</h3><p><strong>Unicode描述了码位和字符的对应关系，UTF描述了码位的计算机存储方案。</strong><br>这样码位就能够通过晶体管进行计算、存储、传输了。<br>所以Unicode和UTF-8有什么关系？他们本身没有什么关系，他们是负责解决两个问题的方案，不再一个维度。就是上面说的，“Unicode编码”是错误的叫法。<br>Unicode制定了规则，UTF-8按照自己的方案执行了规则，UTF-16、UTF-32也是一样。UTF是为了把码位通过不同的形式，进行传输，这样就可以信息交换了。</p>\n<h3 id=\"内存字符编码，网络传输字符编码，磁盘字符编码\"><a href=\"#内存字符编码，网络传输字符编码，磁盘字符编码\" class=\"headerlink\" title=\"内存字符编码，网络传输字符编码，磁盘字符编码\"></a>内存字符编码，网络传输字符编码，磁盘字符编码</h3><p>通过上面三个UTF的编码说明，可以得出，空间最小的是UTF-8编码。<br>所以毋庸置疑，网络传输，磁盘存储，都是用的是UTF-8编码。占用空间小，对于网络和磁盘来说，比什么都重要。1M或者2M的数据，感觉无所谓，那么100G呢？UTF-8很可能一下子就能节省80%的空间。<br>但是内存里面通过什么编码？<br>很多人就疑惑了，啥？内存里面也需要编码？<br>理解一下，计算机执行所有数据，都是指令和数据的交替。计算机认识啥？认识符号吗？不可能的。<br>计算机只认识码位。<br>计算机在哪里执行指令和运算数据？内存啊！<br>我们在显示器上面看到的这些文字，是怎么显示的？其实应用层读取到的仅仅是码位，应用层通过码位根据映射表进行符号显示的。<br>显示器实时读取内存缓冲区里面的数据，然后根据数据显示界面。内存缓冲区里面肯定只能是码位的二进制啊！<br>所以，内存里面的码位数据，也是需要编码的。<br>很多博文说，内存里面使用的是“Unicode编码”。这是非常错误的。<br>一来，Unicode不是编码，<br>二来，Unicode编码长什么样？至少写到现在，我不知道码位是如何通过“Unicode编码”来实现。<br><strong>内存使用的是UTF-16编码！PC、Mac、Linux都是这样处理的</strong><br>因为UTF-8解析慢，UTF-32空间大，而内存里面一段时间需要处理的码位并不会非常大，不会有几百兆数量级。<br>所以内存编码，采用UTF-16，通过空间换取时间。UTF-16空间大小也适中，解析速度快，非常理想。（除了UTF，还有其他编码，但是UTF更有统一性和跨平台性）</p>\n<h3 id=\"编码与字节关系\"><a href=\"#编码与字节关系\" class=\"headerlink\" title=\"编码与字节关系\"></a>编码与字节关系</h3><p><strong>编码，即码位通过二进制表现的方式。</strong><br>一个字符，码位可能是10000，那么通过UTF-8，UTF-16，UTF-32，获取其他编码方式，生成的二进制都是不一样的。<br>二进制不一样，相应的字节也就不一样。<br>所以这也就是常说的，<br>通过UTF-8编码，一个字符(码位)是1个字节、或者2个字节、或者3个字节、或者4个字节，因为UTF-8变字节存储。<br>通过UTF-16编码，一个字符(码位)是2个字节、或者4个字节，因为UTF-16按照整数编码方便解析，2个字节已经可以处理90%多的码位了。<br>通过UTF-32，每个字符(码位)都是4个字节。</p>\n<hr>\n<p>因为自身见识面的浅薄，对于很多大的事件，不能自己产生客观的观点与评价。<br>但是，见识浅薄的，绝不仅仅是我一个，而是绝大多数。<br>对于敏感事件，或许，知道这个事件的存在并从能领悟一些事情，比满口胡言断章取义，给自己和社会带来的价值更大。<br>社会需要不同的声音，人生而是群居动物。活跃终究是社会繁荣的体现。<br>言论在互联网上，很大程度是自由的。<br>希望有正确见解的人，多多发声，而巨婴们，学习就好，打出的字别人都在笑话，何必呢。</p>\n<p>– 华为事件和更多敏感事件有感。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>开局三把西瓜刀：<br>1.代码多年不识字符集和编码，是有过错的。<br>2.一天到晚说“Unicode编码”，自己的误区大了。<br>3.没有认知字符、字节、字符集、编码的区别并以讹传讹，就是万恶了。<br>from “一个工匠”</p>\n</blockquote>\n<p>假设你已经查阅了很多关于Unicode、UTF8等之间的关系，并且有了很好的认知。毕竟这博客太低微了，能找到并打开这个链接，那肯定都是看过十几个其他博文的解读了。<br>本篇博文<strong>重点描述编码认知过程中的几个坑点</strong>，这个很重要。</p>","more":"<h3 id=\"ASCII和Unicode的关系\"><a href=\"#ASCII和Unicode的关系\" class=\"headerlink\" title=\"ASCII和Unicode的关系\"></a>ASCII和Unicode的关系</h3><p>就当作父子关系吧。这最好理解。<br>虽然ASCII是大学计算机教科书入门知识点，如果不联系上编码和Unicode，还是不好理解的。知道有这个东西在，但是怎么玩的却不是很清楚。<br><strong>ASCII是字符集。什么是字符集？就是一个映射表。</strong><br>你现在看到的所有abcd或者汉字或者泰文或者emoji，你要有一个认知，不要认为他们独一无二！他们只是图形，你要把它们理解为符号。而你随手那么一画，也能弄出来一个符号。因为计算机，只认识0和1，计算机没有思维，它不理解我们眼中汉字的博大精深。ASCII把一个位置，标记了一个符号含义。这个位置就是<strong>码位</strong>，这个符号，就是我们看到的abcd。计算机只认识码位，应用层根据码位从Ascii映射符号。如果你自定义了一个字符集，把相同的码位定位为刚才你随手画的那个符号，又有什么关系呢？因为这个码位到底代表什么，是应用层的事情了，而我们切换字体，是不是也有异曲同工之妙？<br><strong>ASCII主要是制定了规则。</strong>这样整个美国人民都可以根据码位对应一样的符号，就能统一的显示单词语句了。<br>好景不长，计算机发展太快，ASCII本身有缺陷，只有256个字符，中国几十万汉子，那是ASCII能表示的了？更何况还有韩国，印度等等。<br>这个时候Unicode出来了。<strong>Unicode干嘛的？啥也没干除了一件事，就是继续制定规则。</strong>这个规则很大，涵盖了所有的字符，并且还在不断增加。这样，不管是汉字，还是泰文，都能通过Unicode找到一个映射的码位。有了统一的规则，世界就能连起来了嘛，因为索引10000代表一个符号，10001又代表一个符号，而他们代表的符号，是全球统一的，所有应用层都能根据这个码位显示一样的符号。<br>所以ASCII和Unicode是什么关系？ASCII是第一个让人们可以通过计算机交流的字符集合。Unicode不是第二个，Unicode没出来之前，中国还自己做了GBK字符集。但是Unicode是最全的一个，<strong>兼容了ASCII，但是比ASCII多了太多的码位。所以说，ASCII和Unicode是父子关系，父亲开拓了疆土，儿子做大了企业。</strong><br>而他们之所以能全球统一，是大势所趋。但他们不是唯一的，你行你也可以搞一个，制定属于自己的一套字符集，你就能弄出来绝对的秘文（虽然是明文，但是码位和符号映射只有你知道，那也就是秘文了）。</p>\n<h3 id=\"UTF-8，UTF-16，UTF-32\"><a href=\"#UTF-8，UTF-16，UTF-32\" class=\"headerlink\" title=\"UTF-8，UTF-16，UTF-32\"></a>UTF-8，UTF-16，UTF-32</h3><p>这三个，叫做字符编码。切记，上面的ASCII和Unicode是字符集，已经介绍了用途。这三个UTF是字符编码，<strong>他们是编码！！！</strong>。<br><strong>字符编码存在的意义，依托于字符集。有了字符集，才有字符编码。</strong><br>因为我们知道了码位，才知道对应的字符，而码位我们可以形象的理解为索引。码位是需要0和1表示的，码位是计算机沟通的途径。<br>码位，怎么形成对应的0和1串，就是编码。<br>其中，这三个UTF编码最为出名。<br>这三个UTF对同一个码位有不同的表示形式。具体各位通过其他博文已经了解到了，多写无意，我就不做搬运工了。<br>但是我们得知道：</p>\n<ol>\n<li>UTF-8占用空间最小，但是解析速度低，因为不能按序解析字节，UTF-8对字节大小是变化非常大的。</li>\n<li>UTF-16占用空间中等，解析速度快。因为更多的码位用2个字节表示，字节大小基本固定（少部分字符通过4个字节表示），解析非常快。</li>\n<li>UTF-32占用空间最大，解析速度最快。一个码位用4个字节表示，字节大小全部固定，解析非常快。</li>\n</ol>\n<h3 id=\"Unicode和Unicode编码\"><a href=\"#Unicode和Unicode编码\" class=\"headerlink\" title=\"Unicode和Unicode编码\"></a>Unicode和Unicode编码</h3><p>对于“Unicode编码”，听到不是一次两次了，不理解Unicode之前，我也是这么叫它的。<br>但是我们通过ASCII和Unicode的说明，我们已经了解到，Unicode根本不是编码，Unicode是一个字符集。<br>Unicode是大而全的字符集，因为时代的需要，做到了全球化。<br>你想有自己的字符集，你也行。<br><strong>Unicode并没有对码位做存储等说明，即没有任何字节说明，仅仅描述了码位和字符的映射关系。</strong><br>所以：<strong>Unicode不是编码，Unicode是字符集，和编码没有关系，他们不在一个维度。</strong></p>\n<h3 id=\"Unicode和UTF-8的关系\"><a href=\"#Unicode和UTF-8的关系\" class=\"headerlink\" title=\"Unicode和UTF-8的关系\"></a>Unicode和UTF-8的关系</h3><p><strong>Unicode描述了码位和字符的对应关系，UTF描述了码位的计算机存储方案。</strong><br>这样码位就能够通过晶体管进行计算、存储、传输了。<br>所以Unicode和UTF-8有什么关系？他们本身没有什么关系，他们是负责解决两个问题的方案，不再一个维度。就是上面说的，“Unicode编码”是错误的叫法。<br>Unicode制定了规则，UTF-8按照自己的方案执行了规则，UTF-16、UTF-32也是一样。UTF是为了把码位通过不同的形式，进行传输，这样就可以信息交换了。</p>\n<h3 id=\"内存字符编码，网络传输字符编码，磁盘字符编码\"><a href=\"#内存字符编码，网络传输字符编码，磁盘字符编码\" class=\"headerlink\" title=\"内存字符编码，网络传输字符编码，磁盘字符编码\"></a>内存字符编码，网络传输字符编码，磁盘字符编码</h3><p>通过上面三个UTF的编码说明，可以得出，空间最小的是UTF-8编码。<br>所以毋庸置疑，网络传输，磁盘存储，都是用的是UTF-8编码。占用空间小，对于网络和磁盘来说，比什么都重要。1M或者2M的数据，感觉无所谓，那么100G呢？UTF-8很可能一下子就能节省80%的空间。<br>但是内存里面通过什么编码？<br>很多人就疑惑了，啥？内存里面也需要编码？<br>理解一下，计算机执行所有数据，都是指令和数据的交替。计算机认识啥？认识符号吗？不可能的。<br>计算机只认识码位。<br>计算机在哪里执行指令和运算数据？内存啊！<br>我们在显示器上面看到的这些文字，是怎么显示的？其实应用层读取到的仅仅是码位，应用层通过码位根据映射表进行符号显示的。<br>显示器实时读取内存缓冲区里面的数据，然后根据数据显示界面。内存缓冲区里面肯定只能是码位的二进制啊！<br>所以，内存里面的码位数据，也是需要编码的。<br>很多博文说，内存里面使用的是“Unicode编码”。这是非常错误的。<br>一来，Unicode不是编码，<br>二来，Unicode编码长什么样？至少写到现在，我不知道码位是如何通过“Unicode编码”来实现。<br><strong>内存使用的是UTF-16编码！PC、Mac、Linux都是这样处理的</strong><br>因为UTF-8解析慢，UTF-32空间大，而内存里面一段时间需要处理的码位并不会非常大，不会有几百兆数量级。<br>所以内存编码，采用UTF-16，通过空间换取时间。UTF-16空间大小也适中，解析速度快，非常理想。（除了UTF，还有其他编码，但是UTF更有统一性和跨平台性）</p>\n<h3 id=\"编码与字节关系\"><a href=\"#编码与字节关系\" class=\"headerlink\" title=\"编码与字节关系\"></a>编码与字节关系</h3><p><strong>编码，即码位通过二进制表现的方式。</strong><br>一个字符，码位可能是10000，那么通过UTF-8，UTF-16，UTF-32，获取其他编码方式，生成的二进制都是不一样的。<br>二进制不一样，相应的字节也就不一样。<br>所以这也就是常说的，<br>通过UTF-8编码，一个字符(码位)是1个字节、或者2个字节、或者3个字节、或者4个字节，因为UTF-8变字节存储。<br>通过UTF-16编码，一个字符(码位)是2个字节、或者4个字节，因为UTF-16按照整数编码方便解析，2个字节已经可以处理90%多的码位了。<br>通过UTF-32，每个字符(码位)都是4个字节。</p>\n<hr>\n<p>因为自身见识面的浅薄，对于很多大的事件，不能自己产生客观的观点与评价。<br>但是，见识浅薄的，绝不仅仅是我一个，而是绝大多数。<br>对于敏感事件，或许，知道这个事件的存在并从能领悟一些事情，比满口胡言断章取义，给自己和社会带来的价值更大。<br>社会需要不同的声音，人生而是群居动物。活跃终究是社会繁荣的体现。<br>言论在互联网上，很大程度是自由的。<br>希望有正确见解的人，多多发声，而巨婴们，学习就好，打出的字别人都在笑话，何必呢。</p>\n<p>– 华为事件和更多敏感事件有感。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjytswkyy0007odgp5qohotkx","category_id":"cjytswkyu0004odgpibv2hr3m","_id":"cjytswkz5000eodgpgg8r0fhn"},{"post_id":"cjytswkyo0001odgpan58d5hj","category_id":"cjytswkyu0004odgpibv2hr3m","_id":"cjytswkz8000iodgp835641jr"},{"post_id":"cjytswkyt0003odgp2we4a7ri","category_id":"cjytswkyu0004odgpibv2hr3m","_id":"cjytswkza000modgpsap4x92i"},{"post_id":"cjytswkyw0006odgpw1n8p5i4","category_id":"cjytswkyu0004odgpibv2hr3m","_id":"cjytswkzd000rodgpzt4sq6wr"},{"post_id":"cjytswkyz0008odgp7u1ffdy9","category_id":"cjytswkza000lodgp39b011pe","_id":"cjytswkze000wodgp19jpmm7h"},{"post_id":"cjytswkzc000qodgpodddgfmb","category_id":"cjytswkyu0004odgpibv2hr3m","_id":"cjytswkzf0010odgp7yowzycf"},{"post_id":"cjytswkzd000uodgpytblcqql","category_id":"cjytswkyu0004odgpibv2hr3m","_id":"cjytswkzf0012odgp3rm6p4nl"},{"post_id":"cjytswkz2000codgpwkukkz7v","category_id":"cjytswkzd000sodgpicypwqpa","_id":"cjytswkzg0016odgp6q41954b"},{"post_id":"cjytswkz3000dodgps8k5o2wt","category_id":"cjytswkzd000sodgpicypwqpa","_id":"cjytswkzh0019odgpug1r1xse"},{"post_id":"cjytswkz6000hodgpo52wmeie","category_id":"cjytswkzd000sodgpicypwqpa","_id":"cjytswkzj001dodgp25jquq21"},{"post_id":"cjytswkz8000kodgp0q6ojbhr","category_id":"cjytswkza000lodgp39b011pe","_id":"cjytswkzj001godgps67gw8gw"},{"post_id":"cjytswkzb000oodgpf3ibytm0","category_id":"cjytswkzd000sodgpicypwqpa","_id":"cjytswkzk001jodgp7fx64ha8"},{"post_id":"cjytswl3c001sodgptaonreeu","category_id":"cjytswkyu0004odgpibv2hr3m","_id":"cjytswl3j001yodgpk3mizuy6"},{"post_id":"cjytswl3e001uodgpkl1ef9xx","category_id":"cjytswkyu0004odgpibv2hr3m","_id":"cjytswl3j0020odgpcsruqwk3"},{"post_id":"cjytswl3h001wodgp4spn3svq","category_id":"cjytswkyu0004odgpibv2hr3m","_id":"cjytswl3j0021odgp35mc25r6"}],"PostTag":[{"post_id":"cjytswkyo0001odgpan58d5hj","tag_id":"cjytswkyw0005odgptd1u9rx4","_id":"cjytswkz1000bodgprqomtwog"},{"post_id":"cjytswkyt0003odgp2we4a7ri","tag_id":"cjytswkz0000aodgp1cyxnkv0","_id":"cjytswkz8000jodgp818prevn"},{"post_id":"cjytswkyw0006odgpw1n8p5i4","tag_id":"cjytswkyw0005odgptd1u9rx4","_id":"cjytswkzc000podgppy4dvjwj"},{"post_id":"cjytswkzc000qodgpodddgfmb","tag_id":"cjytswkz0000aodgp1cyxnkv0","_id":"cjytswkze000vodgpyuamdx7t"},{"post_id":"cjytswkzc000qodgpodddgfmb","tag_id":"cjytswkza000nodgpxquln25p","_id":"cjytswkzf000zodgprxdms3a2"},{"post_id":"cjytswkyy0007odgp5qohotkx","tag_id":"cjytswkza000nodgpxquln25p","_id":"cjytswkzf0011odgpgnwwdf16"},{"post_id":"cjytswkyy0007odgp5qohotkx","tag_id":"cjytswkz0000aodgp1cyxnkv0","_id":"cjytswkzg0014odgpxrl0injz"},{"post_id":"cjytswkyz0008odgp7u1ffdy9","tag_id":"cjytswkzf000yodgpvamwgwdm","_id":"cjytswkzh0017odgponx2ijp6"},{"post_id":"cjytswkz2000codgpwkukkz7v","tag_id":"cjytswkzf000yodgpvamwgwdm","_id":"cjytswkzi001bodgpe0vswmrj"},{"post_id":"cjytswkz3000dodgps8k5o2wt","tag_id":"cjytswkzf000yodgpvamwgwdm","_id":"cjytswkzj001fodgprzyduxll"},{"post_id":"cjytswkz6000hodgpo52wmeie","tag_id":"cjytswkzf000yodgpvamwgwdm","_id":"cjytswkzk001iodgpc6vliztj"},{"post_id":"cjytswkz8000kodgp0q6ojbhr","tag_id":"cjytswkzf000yodgpvamwgwdm","_id":"cjytswkzl001lodgp8bkcacee"},{"post_id":"cjytswkzb000oodgpf3ibytm0","tag_id":"cjytswkzf000yodgpvamwgwdm","_id":"cjytswkzl001nodgp4ebwznh1"},{"post_id":"cjytswkzd000uodgpytblcqql","tag_id":"cjytswkyw0005odgptd1u9rx4","_id":"cjytswkzm001podgprhad2viu"},{"post_id":"cjytswkzd000uodgpytblcqql","tag_id":"cjytswkzl001modgpjjggkuho","_id":"cjytswkzm001qodgpgp5iz4q8"},{"post_id":"cjytswkzd000uodgpytblcqql","tag_id":"cjytswkzl001oodgp6ruvfta4","_id":"cjytswkzm001rodgp69q8lcvk"},{"post_id":"cjytswl3c001sodgptaonreeu","tag_id":"cjytswkyw0005odgptd1u9rx4","_id":"cjytswl3g001vodgplaeoyy85"},{"post_id":"cjytswl3h001wodgp4spn3svq","tag_id":"cjytswkz0000aodgp1cyxnkv0","_id":"cjytswl3j001zodgpygr8vkvs"},{"post_id":"cjytswl3e001uodgpkl1ef9xx","tag_id":"cjytswkz0000aodgp1cyxnkv0","_id":"cjytswl3k0022odgpz0nmkser"},{"post_id":"cjytswl3e001uodgpkl1ef9xx","tag_id":"cjytswl3i001xodgpojbedas1","_id":"cjytswl3k0023odgpho4m1tng"},{"post_id":"cjytswl3e001uodgpkl1ef9xx","tag_id":"cjytswkyw0005odgptd1u9rx4","_id":"cjytswl3k0024odgpaqowo9sx"},{"post_id":"cjytswl3e001uodgpkl1ef9xx","tag_id":"cjytswkzl001modgpjjggkuho","_id":"cjytswl3k0025odgp1ig9x2wx"},{"post_id":"cjytswl3e001uodgpkl1ef9xx","tag_id":"cjytswkzl001oodgp6ruvfta4","_id":"cjytswl3k0026odgpgj5xqbsc"}],"Tag":[{"name":"iOS","_id":"cjytswkyw0005odgptd1u9rx4"},{"name":"计算机原理","_id":"cjytswkz0000aodgp1cyxnkv0"},{"name":"网络","_id":"cjytswkza000nodgpxquln25p"},{"name":"Life","_id":"cjytswkzf000yodgpvamwgwdm"},{"name":"Python","_id":"cjytswkzl001modgpjjggkuho"},{"name":"Node.js","_id":"cjytswkzl001oodgp6ruvfta4"},{"name":"C","_id":"cjytswl3i001xodgpojbedas1"}]}}